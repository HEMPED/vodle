{"version":3,"file":"9632.7f5cfc35cfb25f09.js","mappings":"qNAaA,MAAMA,EACJC,YAAYC,EAAWC,GACrBC,KAAKF,UAAYA,EACjBE,KAAKD,OAASA,EACdC,KAAKC,MAPc,CAQpB,CACKC,KAAKC,GAAW,qCAEpB,GADAC,EAAKH,MATmB,GAUnBG,EAAKC,QAAS,CACjB,MAAMP,EAAYM,EAAKN,UACvBM,EAAKC,cAAgBC,OAAgBF,EAAKG,SAAUJ,EAAWL,EAAW,CAAC,WAAY,sBAAuBM,EAAKL,OACpH,CALmB,IAMrB,CAIDS,YACEC,OAlByB,IAkBlBT,KAAKC,MAAgC,+BAC5C,MAAMI,EAAUL,KAAKK,QACjBA,IACEL,KAAKO,SACPP,KAAKO,SAASG,kBAAkBL,EAAQM,cAAeN,GAGvDA,EAAQO,UAGZZ,KAAKa,SAAMC,EACXd,KAAKC,MA7BoB,CA8B1B,EAEH,MAAMc,EAAU,CAACC,EAAMC,EAAIlB,OACpBiB,GAGDA,EAAKlB,YAAcmB,KAGhBC,OAAsBF,EAAKjB,OAAQA,GAEtCoB,EAAgB,CAACC,EAAMrB,IACtBqB,EAGDA,aAAgBxB,EACXwB,EAEF,IAAIxB,EAAewB,EAAMrB,GALvB,KAuBLsB,EAAM,MACVxB,YAAYyB,IACVC,OAAiBvB,KAAMsB,GACvBtB,KAAKwB,gBAAiBC,OAAYzB,KAAM,iBAAkB,GAC1DA,KAAK0B,kBAAmBD,OAAYzB,KAAM,mBAAoB,GAC9DA,KAAK2B,iBAAkBF,OAAYzB,KAAM,kBAAmB,GAC5DA,KAAK4B,WAAa,GAClB5B,KAAK6B,kBAAmB,EACxB7B,KAAK8B,WAAY,EACjB9B,KAAK+B,iBAAkB,EACvB/B,KAAKgC,WAAY,EACjBhC,KAAKiC,MAAQ,GAIbjC,KAAKkC,UAAW,CACjB,CACDC,sBACMnC,KAAKoC,SACPpC,KAAKoC,QAAQC,QAA6B,IAAtBrC,KAAKsC,aAE5B,CACDC,mBACoBzB,IAAdd,KAAKwC,OACFxC,KAAK8B,WACR9B,KAAKyC,QAAQzC,KAAKwC,KAAMxC,KAAK0C,YAGlC,CACDC,oBAEE,GADA3C,KAAK8B,UAAqD,OAAzCc,SAASC,cAAc,eAA6D,OAAnC7C,KAAK8C,GAAGC,QAAQ,oBACxDjC,IAAtBd,KAAKsC,aAA4B,CACnC,MAAMU,GAAOC,OAAWjD,MACxBA,KAAKsC,aAAeY,eAAkB,mBAA6B,QAATF,EAC3D,CACDhD,KAAKwB,eAAe2B,MACrB,CACKC,mBAAmB,qCACvBC,EAAKd,cACLc,EAAKjB,eAAiBkB,gCAAoCC,uBAAuBF,EAAKP,GAAIO,EAAKG,SAASC,KAAKJ,GAAOA,EAAKK,QAAQD,KAAKJ,GAAOA,EAAKM,OAAOF,KAAKJ,GAAOA,EAAKO,MAAMH,KAAKJ,IACrLA,EAAKlB,qBAHkB,IAIxB,CACD0B,oBACE7D,KAAKgC,WAAY,CAClB,CACD8B,uBACE,UAAW9C,KAAQhB,KAAKiC,OACtB8B,OAAU/C,EAAKX,QAAS2D,KACxBhD,EAAKR,WAGHR,KAAKoC,UACPpC,KAAKoC,QAAQ6B,UACbjE,KAAKoC,aAAUtB,GAEjBd,KAAK4B,WAAWsC,OAAS,EACzBlE,KAAKiC,MAAMiC,OAAS,EACpBlE,KAAKgC,WAAY,CAClB,CAWDmC,KAAKrE,EAAWsE,EAAgBC,EAAMC,GACpC,OAAOtE,KAAKuE,QAAO,EAAIzE,EAAWsE,EAAgBC,EAAMC,EACzD,CAWDC,OAAOC,EAAa1E,EAAWsE,EAAgBC,EAAMC,GACnD,OAAOtE,KAAKyE,YAAYD,EAAa,CAAC,CAAE1E,YAAWsE,mBAAmBC,EAAMC,EAC7E,CAWDG,YAAYD,EAAaE,EAAkBL,EAAMC,GAC/C,OAAOtE,KAAK2E,UAAU,CACpBC,YAAaJ,EACbK,YAAaH,EACbL,QACCC,EACJ,CAQDQ,IAAIT,EAAMC,GACR,OAAOtE,KAAK+E,aAAY,EAAI,EAAGV,EAAMC,EACtC,CAQDU,MAAMC,EAAiBZ,EAAMC,GAC3B,MAAMY,EAAK,CACTC,aAAa,EACbC,aAAa,EACbf,QAEF,MAA+B,iBAApBY,GAAgCA,EAAgBnF,WACzDoF,EAAGG,WAAaJ,EAChBC,EAAGC,YAAc,GAEiB,iBAApBF,IACdC,EAAGC,YAAcF,EAAkB,GAE9BjF,KAAK2E,UAAUO,EAAIZ,EAC3B,CAODgB,UAAUjB,EAAMC,GACd,OAAOtE,KAAK+E,YAAY,GAAG,EAAIV,EAAMC,EACtC,CASDS,YAAYQ,EAAYH,EAAc,EAAGf,EAAMC,GAC7C,OAAOtE,KAAK2E,UAAU,CACpBQ,YAAaI,EACbH,cACAf,QACCC,EACJ,CASD7B,QAAQ3C,EAAWsE,EAAgBC,EAAMC,GACvC,OAAOtE,KAAKwF,SAAS,CAAC,CAAE1F,YAAWsE,mBAAmBC,EAAMC,EAC7D,CAWDkB,SAASvD,EAAOoC,EAAMC,GACpBD,WAA2CA,EAAO,KAE5B,IAAlBA,EAAKnC,WACPmC,EAAKnC,UAAW,GAEXlC,KAAK2E,UAAU,CACpBC,YAAa,EACbC,YAAa5C,EACbkD,YAAa,EACbC,aAAa,EACbf,QACCC,EACJ,CAYDmB,WAAWxE,EAAIlB,EAAQ2F,EAAWC,GAChC,MAAMC,EAAS5F,KAAK6F,gBACpB,GAAI9E,EAAQ6E,EAAQ3E,EAAIlB,GACtB,OAAO+F,QAAQC,QAAQ,CACrBC,SAAS,EACT3F,QAASuF,EAAOvF,UAGpB,IAAI0F,EACJ,MAAME,EAAU,IAAIH,QAASI,GAAOH,EAAUG,GAC9C,IAAIC,EACJ,MAAMC,EAAa,CACjBC,WAAW,EACXC,YAAcC,IACZ,IAAIC,EACJ,MAAMC,EAAI,IAAIX,QAASI,GAAOM,EAAON,GACrCH,SAAQ,CACNC,SAAS,EACT3F,QAASkG,EACTG,aAAWC,UAAE,YACXH,UACML,CACP,GAHU,8CAKNM,EALM,KAKNA,GAGX,GAAkB,SAAdf,EACFS,EAASnG,KAAKyC,QAAQxB,EAAIlB,EAAQqG,OAE/B,CAEH,MAAMQ,EAAiB5G,KAAKiC,MAAM4E,KAAMC,GAAM/F,EAAQ+F,EAAG7F,EAAIlB,IACzD6G,EACFT,EAASnG,KAAKgF,MAAM4B,EAAgBG,OAAOC,OAAOD,OAAOC,OAAO,GAAIZ,GAAa,CAAEV,UAAW,OAAQuB,iBAAkBtB,KAEnG,YAAlBvF,EACH+F,EAASnG,KAAKmE,KAAKlD,EAAIlB,EAAQgH,OAAOC,OAAOD,OAAOC,OAAO,GAAIZ,GAAa,CAAEa,iBAAkBtB,KAE3E,SAAdD,IACPS,EAASnG,KAAKyC,QAAQxB,EAAIlB,EAAQgH,OAAOC,OAAOD,OAAOC,OAAO,GAAIZ,GAAa,CAAEV,UAAW,OAAQxD,UAAU,EAAM+E,iBAAkBtB,KAEzI,CACD,OAAOM,CACR,CAMKiB,aAAa,qCACjB,MAAMtB,EAASvC,EAAKwC,gBACpB,GAAID,EACF,MAAO,CACL3E,GAAI2E,EAAOvF,QAAQ8G,QACnBpH,OAAQ6F,EAAO7F,OACfM,QAASuF,EAAOvF,QANH,IAUlB,CAIK+G,YAAY,qCAChB,OAAO/D,EAAKwC,eADI,IAEjB,CAMKwB,WAAWC,GAAO,qCACtB,OAAOC,EAAKtF,MAAMqF,EADI,IAEvB,CAMKE,UAAUxG,GAAM,qCACpB,OAAOuG,EAAKE,cAAczG,EADN,IAErB,CAMK0G,YAAY1G,GAAM,qCACtB,OAAOuG,EAAKI,gBAAgB3G,EADN,IAEvB,CACD4G,YACE,OAAO5H,KAAKiC,MAAMiC,MACnB,CACD2B,gBACE,OAAO7F,KAAKiC,MAAMjC,KAAKiC,MAAMiC,OAAS,EACvC,CACDuD,cAAczG,EAAOhB,KAAK6F,iBACxB,SAAU7E,IAAQhB,KAAK2H,gBAAgB3G,GACxC,CACD2G,gBAAgB3G,EAAOhB,KAAK6F,iBAC1B,IAAK7E,EACH,OAEF,MAAMiB,EAAQjC,KAAKiC,MACbqF,EAAQrF,EAAM4F,QAAQ7G,GAC5B,OAAOsG,EAAQ,EAAIrF,EAAMqF,EAAQ,QAAKxG,CACvC,CAMK6D,UAAUO,EAAIZ,GAAM,qCACxB,IAAIwD,EAAIC,EACR,GAAI3H,EAAK2B,kBAAuC,QAAlB+F,EAAK5C,EAAGb,YAAyB,IAAPyD,OAAgB,EAASA,EAAGE,YAClF,OAAO,EAET,MAAM/B,EAAU,IAAIH,QAAQ,CAACC,EAASkC,KACpC/C,EAAGa,QAAUA,EACbb,EAAG+C,OAASA,IASd,GAPA/C,EAAGZ,KAAOA,EAONY,EAAGb,OAA8B,IAAtBa,EAAGb,KAAKgC,WAAuBjG,EAAK0B,UAAW,CAC5D,MAAMoG,EAAStF,SAASC,cAAc,cACtC,GAAIqF,EAAQ,CACV,MAAMC,QAAsBD,EAAOC,gBACnC,IAAsB,IAAlBA,EACF,OAAO,EAET,GAA6B,iBAAlBA,EACTD,SAAO/D,KAAKgE,EAAejD,EAAGb,KAAKqB,WAAa,SACzC,CAEV,CACF,CAED,OAA+E,KAAhD,QAAzBqC,EAAK7C,EAAGL,mBAAgC,IAAPkD,OAAgB,EAASA,EAAG7D,UACjEgB,EAAGL,iBAAc/D,GAGnBV,EAAKwB,WAAWuC,KAAKe,GAGrB9E,EAAKgI,WACEnC,CAtCiB,IAuCzB,CACDoC,QAAQC,EAAQpD,GACd,GAAIlF,KAAKgC,UACPhC,KAAKuI,UAAU,+BAAgCrD,QAOjD,GAJIA,EAAGZ,MACLY,EAAGZ,KAAKgE,EAAOE,aAAcF,EAAOG,mBAAoBH,EAAOI,aAAcJ,EAAOK,YAAaL,EAAO5C,WAE1GR,EAAGa,QAAQuC,EAAOE,eACQ,IAAtBtD,EAAGb,KAAKgC,WAAuBrG,KAAK8B,UAAW,CACjD,MAAMoG,EAAStF,SAASC,cAAc,cAClCqF,GAEFA,EAAOU,WADgC,SAArBN,EAAO5C,UAAuB,OAAS,UAG5D,CACF,CACDmD,OAAOC,EAAc5D,GACflF,KAAKgC,UACPhC,KAAKuI,UAAU,+BAAgCrD,IAGjDlF,KAAK4B,WAAWsC,OAAS,EACzBlE,KAAKuI,UAAUO,EAAc5D,GAC9B,CACDqD,UAAUO,EAAc5D,GAClBA,EAAGZ,MACLY,EAAGZ,MAAK,GAAO,EAAOwE,GAExBvB,EAAOU,SAAWjI,KAAKgC,UACrBkD,EAAG+C,OAAOa,GAGV5D,EAAGa,SAAQ,EAEd,CAMDqC,WAGE,GAAIpI,KAAK+B,gBACP,OAAO,EAGT,MAAMmD,EAAKlF,KAAK4B,WAAWmH,QAC3B,QAAK7D,IAGLlF,KAAKgJ,cAAc9D,IACZ,EACR,CAEK8D,cAAc9D,GAAI,qCACtB,IAEEqC,EAAK7F,iBAAiByB,OACtBoE,EAAKxF,iBAAkB,EACvBwF,EAAK0B,UAAU/D,GACf,MAAMyD,EAAcpB,EAAK1B,gBACnB6C,EAAenB,EAAK2B,gBAAgBhE,EAAIyD,GAC9C,IAAKA,IAAgBD,EACnB,MAAM,IAAIS,MAAM,uCAEdT,GA5ea,IA4eGA,EAAazI,cACzByI,EAAaxI,KAAKqH,EAAKzE,KAE/ByE,EAAK6B,aAAaV,EAAcC,EAAazD,GAE7C,MAAMuD,GAAsBvD,EAAGmE,4BAA8BnE,EAAGoE,4BAA8BZ,IAAiBC,EAY/G,IAAIL,EAXAG,GAAsBvD,EAAGb,MAAQsE,IACW,SAAtBzD,EAAGb,KAAKqB,YAM9BR,EAAGb,KAAK4C,iBAAmB/B,EAAGb,KAAK4C,kBAAiFyB,GAAazB,kBAEnI0B,EAAY1B,iBAAmB/B,EAAGb,KAAK4C,kBAIvCqB,EADEG,QACalB,EAAKgC,WAAWb,EAAcC,EAAazD,GAOjD,CACPsD,cAAc,EACdC,oBAAoB,GAGxBlB,EAAKc,QAAQC,EAAQpD,GACrBqC,EAAK5F,gBAAgBwB,MAItB,CAHA,MACM2F,GACLvB,EAAKsB,OAAOC,EAAc5D,EAC3B,CACDqC,EAAKxF,iBAAkB,EACvBwF,EAAKa,UAjDiB,IAkDvB,CACDa,UAAU/D,GACR,IAAI4C,EAAIC,EACJyB,EACJ,MAAMC,EAAczJ,KAAKiC,MAAMiC,OAG/B,GAFmB,QAAlB4D,EAAK5C,EAAGb,YAAyB,IAAPyD,IAAsB5C,EAAGb,KAAO,IACxB,QAAlC0D,GAAMyB,EAAKtE,EAAGb,MAAM9D,gBAA6B,IAAPwH,IAAsByB,EAAGjJ,SAAWP,KAAKO,eAC9DO,IAAlBoE,EAAGG,WAA0B,EAC/B5E,YAA0BK,IAAnBoE,EAAGC,YAA2B,iCACrC1E,YAA0BK,IAAnBoE,EAAGE,YAA2B,gCACrC,MAAMkC,EAAQtH,KAAKiC,MAAM4F,QAAQ3C,EAAGG,YACpC,GAAIiC,EAAQ,EACV,MAAM,IAAI6B,MAAM,4BAElBjE,EAAGC,aAAemC,CACnB,MACsBxG,IAAnBoE,EAAGC,cACDD,EAAGC,YAAc,IACnBD,EAAGC,YAAcsE,EAAc,GAE7BvE,EAAGE,YAAc,IACnBF,EAAGE,YAAcqE,EAAcvE,EAAGC,aAEpCD,EAAGoE,0BAA4BpE,EAAGE,YAAc,GAAKF,EAAGC,YAAcD,EAAGE,cAAgBqE,GAEvFvE,EAAGL,eAGDK,EAAGN,YAAc,GAAKM,EAAGN,YAAc6E,KACzCvE,EAAGN,YAAc6E,GAEnBvE,EAAGmE,2BAA6BnE,EAAGN,cAAgB6E,GAErD,MAAM5E,EAAcK,EAAGL,YACvB,IAAKA,EACH,QAEFpE,OAAOoE,EAAYX,OAAS,EAAG,0BAC/B,MAAMwF,EArgBcC,IACfA,EACJC,IAAKxI,GACFA,aAAgBxB,EACXwB,EAEL,cAAeA,EACVD,EAAcC,EAAKtB,UAAmC,OAAxBsB,EAAKgD,oBAA0BtD,EAAYM,EAAKgD,gBAEhFjD,EAAcC,OAAMN,IAE1B+I,OAAQ/C,GAAY,OAANA,GA0fSgD,CAAejF,GACvC,GAA+B,IAA3B6E,EAAgBxF,OAClB,MAAM,IAAIiF,MAAM,2BAGlB,UAAWnI,KAAQ0I,EAAiB,CAClC1I,EAAKT,SAAW2E,EAAGb,KAAK9D,SACxB,MAAMM,EAAMG,EAAKH,IACjB,GAAIA,GAAOA,IAAQb,KACjB,MAAM,IAAImJ,MAAM,sCAElB,GAlkBuB,IAkkBnBnI,EAAKf,MACP,MAAM,IAAIkJ,MAAM,sCAEnB,CACDjE,EAAGL,YAAc6E,CAClB,CASDR,gBAAgBhE,EAAIyD,GAElB,MAAM9D,EAAcK,EAAGL,YACvB,QAAoB/D,IAAhB+D,EACF,OAAOA,EAAYA,EAAYX,OAAS,GAG1C,MAAMiB,EAAcD,EAAGC,YACvB,QAAoBrE,IAAhBqE,EAA2B,CAC7B,MAAMlD,EAAQjC,KAAKiC,MACb8H,EAAY5E,EAAcD,EAAGE,YACnC,QAAS4E,EAAI/H,EAAMiC,OAAS,EAAG8F,GAAK,EAAGA,IAAK,CAC1C,MAAMhJ,EAAOiB,EAAM+H,GACnB,IAAKA,EAAI7E,GAAe6E,GAAKD,IAAc/I,IAAS2H,EAClD,OAAO3H,CAEV,CACF,CAEF,CAQDoI,aAAaV,EAAcC,EAAazD,GACtC,IAAI4C,EAAIC,EAAIyB,GACZ/I,OAAOkI,GAAeD,EAAc,+CACpCjI,OAAOyE,EAAGa,QAAS,0BACnBtF,OAAOyE,EAAG+C,OAAQ,wBAElB,MAAM5D,EAAOa,EAAGb,MACRQ,cAAaM,cAAaC,eAAgBF,EAElD,IAAI+E,EAEJ,QAAoBnJ,IAAhBqE,QAA6CrE,IAAhBsE,EAA2B,EAC1D3E,OAAO0E,GAAe,EAAG,oCACzB1E,OAAO2E,GAAe,EAAG,mCACzB6E,EAAe,GACf,QAASD,EAAI7E,EAAa6E,EAAI7E,EAAcC,EAAa4E,IAAK,CAC5D,MAAMhJ,EAAOhB,KAAKiC,MAAM+H,QACXlJ,IAATE,GAAsBA,IAAS0H,GAAgB1H,IAAS2H,GAC1DsB,EAAa9F,KAAKnD,EAErB,CAEyB,QAAzB8G,EAAKzD,EAAKqB,iBAA8B,IAAPoC,IAAsBzD,EAAKqB,UAAY,OAC1E,CACD,MAAMwE,EAAgBlK,KAAKiC,MAAMiC,QAAkG,QAAvF6D,EAA+DlD,GAAYX,cAA2B,IAAP6D,EAAgBA,EAAK,IAAM3C,GAA+D,GAErO,IADA3E,OAAOyJ,GAAiB,EAAG,qCACL,IAAlBA,EACFC,cAAQC,KAAM,uGAAuGpK,KAAMA,KAAK8C,IAC1H,IAAIqG,MAAM,iDAIlB,GAAItE,EAAa,CAEf,IAAIL,EAAcU,EAAGN,YACrB,UAAW5D,KAAQ6D,EACjB7E,KAAKqK,aAAarJ,EAAMwD,GACxBA,IAEEU,EAAGmE,6BAEqB,QAAzBG,EAAKnF,EAAKqB,iBAA8B,IAAP8D,IAAsBnF,EAAKqB,UAAY,WAE5E,CAMD,GAAIuE,GAAgBA,EAAa/F,OAAS,EAAG,CAC3C,UAAWlD,KAAQiJ,GACjBlG,OAAU/C,EAAKX,QAASiK,MACxBvG,OAAU/C,EAAKX,QAASkK,MACxBxG,OAAU/C,EAAKX,QAAS2D,KAG1B,UAAWhD,KAAQiJ,EACjBjK,KAAKwK,YAAYxJ,EAEpB,CACF,CACKuI,WAAWb,EAAcC,EAAazD,GAAI,qCAG9C,MAAMb,EAAOa,EAAGb,KACVoG,EAAmBpG,EAAKqG,kBAAqBC,GAASX,EAAKY,MAAQD,OAAO7J,EAC1EkC,GAAOC,OAAW+G,GAClBzD,EAAamC,EAAarI,QAC1BwK,EAAYlC,GAAeA,EAAYtI,QACvCyK,EAAgB/D,OAAOC,OAAOD,OAAOC,OAAO,CAAEhE,OAAM+H,WAAYf,EAAKvC,cAAciB,GAAesC,OAAQhB,EAAKlH,GAAI2H,mBAAkBvI,SAAU8H,EAAK9H,UAAYgB,eAAkB,YAAY,GAAOqD,aACzMsE,aAAaxG,GAAO,CAAE4C,iBAAkB5C,EAAK4C,kBAAoB+C,EAAKrE,WAAazC,QAAW,mBACxFsF,sBAAuBe,OAAWuB,GAC1C,OAAOd,EAAKiB,iBAAiBzC,EAAcE,EAAcC,EAAatE,EAXxB,IAY/C,CACD4G,iBAAiBzC,EAAcE,EAAcC,EAAatE,GAKxD,MAAM6G,EAAa1C,EAAeE,EAAeC,EACjD,OAAIuC,GACFlL,KAAKmL,qBAAqBD,GAErB,CACL1C,eACAC,oBAAoB,EACpBC,eACAC,cACAjD,UAAWrB,EAAKqB,UAEnB,CASD2E,aAAarJ,EAAMsG,GACjB,MAAMrF,EAAQjC,KAAKiC,MACbmJ,EAAgBnJ,EAAM4F,QAAQ7G,GAChCoK,GAAgB,MAClB3K,KAAOO,EAAKH,MAAQb,KAAM,+BAE1BiC,EAAMoJ,OAAOD,EAAe,GAE5BnJ,EAAMoJ,OAAO/D,EAAO,EAAGtG,QAGvBP,MAAQO,EAAKH,IAAK,eAGlBG,EAAKH,IAAMb,KACXiC,EAAMoJ,OAAO/D,EAAO,EAAGtG,GAE1B,CAMDqE,WAAWrE,IACTP,OAvuBwB,IAuuBjBO,EAAKf,OAtuBa,IAsuBoBe,EAAKf,MAAgC,4CAClF,MAAMgC,EAAQjC,KAAKiC,MACbqF,EAAQrF,EAAM4F,QAAQ7G,IAC5BP,OAAO6G,GAAQ,EAAI,kCACfA,GAAS,GACXrF,EAAMoJ,OAAO/D,EAAO,EAEvB,CACDkD,YAAYxJ,GACVA,EAAKR,WACLR,KAAKqF,WAAWrE,EACjB,CAQDmK,qBAAqBD,GAInB,GAAIlL,KAAKgC,UACP,OAEF,MAAMC,EAAQjC,KAAKiC,MACbqJ,EAAkBrJ,EAAM4F,QAAQqD,GACtC,QAASlB,EAAI/H,EAAMiC,OAAS,EAAG8F,GAAK,EAAGA,IAAK,CAC1C,MAAMhJ,EAAOiB,EAAM+H,GASb3J,EAAUW,EAAKX,QACjBA,IACE2J,EAAIsB,MAGNvH,KAAU1D,EAAS2D,KACnBhE,KAAKwK,YAAYxJ,IAEVgJ,EAAIsB,IAGXC,OAAclL,GAAS,GAG5B,CACF,CACDmD,WACE,QAAUxD,KAAKsC,eACZtC,KAAK+B,iBACqB,IAA3B/B,KAAK4B,WAAWsC,QAChBlE,KAAK6B,kBACL7B,KAAKyH,eACR,CACD/D,UACE1D,KAAK8E,IAAI,CAAEY,UAAW,OAAQgF,mBAAmB,GAClD,CACD/G,OAAO6H,GACDxL,KAAK4K,OACP5K,KAAK4K,MAAMa,aAAaD,EAE3B,CACD5H,MAAM8H,EAAgBF,EAAWG,GAC/B,GAAI3L,KAAK4K,MAAO,CACd5K,KAAK6B,kBAAmB,EACxB7B,KAAK4K,MAAMgB,SAAS,KAClB5L,KAAK6B,kBAAmB,GACvB,CAAEgK,iBAAiB,IAEtB,IAAIC,EAAeJ,GAAiB,KAAS,KASxCA,EAKHI,IAAgBC,OAAwB,CAAC,EAAG,GAAI,CAAC,IAAM,KAAO,CAAC,EAAG,GAAI,CAAC,EAAG,GAAIP,GAAW,IAJzFxL,KAAK4K,MAAMoB,OAAO,kCAClBF,IAAgBC,OAAwB,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,IAAM,KAAO,CAAC,EAAG,GAAIP,GAAW,IAK3FxL,KAAK4K,MAAMqB,YAAYP,EAAiB,EAAI,EAAGI,EAAcH,EAC9D,CACF,CACDO,SACE,OAAOC,OAAE,OAAQ,KAClB,CACGrJ,SAAO,OAAOsJ,OAAWpM,KAAQ,CAC1BqM,sBAAa,MAAO,CAC7B/J,aAAgB,CAAC,uBACjBE,KAAQ,CAAC,eACP,GAENnB,EAAIiL,MA9wBW,6GAgxBf,MAoBMC,EAAU,MACd1M,YAAYyB,IACVC,OAAiBvB,KAAMsB,GAIvBtB,KAAKwM,gBAAkB,UACvBxM,KAAKyM,QAAU,IA3BH,EAAC3J,EAAI0J,EAAiB1M,EAAWsE,EAAgBsI,KAC/D,MAAM7L,EA2Bab,KAAK8C,GA3BTC,QAAQ,WACvB,GAAIlC,EACF,GAAwB,YAApB2L,GACF,QAAkB1L,IAAdhB,EACF,OAAOe,EAAIsD,KAAKrE,EAAWsE,EAAgB,CAAE4D,YAAY,EAAMf,iBAAkByF,SAA1E,GAGkB,SAApBF,GACP,QAAkB1L,IAAdhB,EACF,OAAOe,EAAI4B,QAAQ3C,EAAWsE,EAAgB,CAAE4D,YAAY,EAAMf,iBAAkByF,SAA7E,GAGkB,SAApBF,EACP,OAAO3L,EAAIiE,IAAI,CAAEkD,YAAY,EAAMf,iBAAkByF,IAGzD,OAAO5G,QAAQC,SAAQ,EAAhB,EAWI4G,CAAQ3M,EAASA,KAAKwM,gBAAiBxM,KAAKF,UAAWE,KAAKoE,eAAgBpE,KAAK0M,gBAE3F,CACDR,SACE,OAAOC,OAAES,IAAM,CAAEH,QAASzM,KAAKyM,SAChC,CACG3J,SAAO,OAAOsJ,OAAWpM,KAAQ,EAdjB","names":["ViewController","constructor","component","params","this","state","init","container","n","element","attachComponent","delegate","_destroy","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","shallowEqualStringMap","convertToView","page","Nav","hostRef","registerInstance","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getIonMode","config","emit","componentDidLoad","e","f","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","lifecycle","LIFECYCLE_WILL_UNLOAD","destroy","length","push","componentProps","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","u","viewController","find","v","Object","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","t","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","_c","viewsLength","viewControllers","pages","map","filter","convertToViews","removeEnd","i","destroyQueue","finalNumViews","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","getTimeGivenProgression","easing","progressEnd","render","h","getElement","watchers","style","NavLink","routerDirection","onClick","routerAnimation","navLink","Host"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-8e692445.js';\nimport { b as getIonMode, c as config } from './ionic-global-c95cf239.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-e78d1307.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers-3b390e48.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-eab49c64.js';\nimport { a as attachComponent } from './framework-delegate-073a0b65.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-e1ef2243.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return h(Host, { onClick: this.onClick });\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"x_google_ignoreList":[0]}