{"version":3,"file":"9675.1c01da23b415864e.js","mappings":"qNAuCMA,oBAAU,iBAENA,uCAAiDA,gBAAMA,gBAAyBA,uCAAiDA,QAAIA,gBAAMA,wCAC7IA,UAEFA,qBAAU,kBAENA,yCACAA,eACEA,uCACAA,uCACAA,uCACFA,YAGJA,qBAAU,kBAENA,yCACAA,eACEA,uCACAA,uCACFA,YAQJA,qBACEA,+CAKFA,QACAA,qBAAU,kBAENA,yCACAA,eAAI,SAEAA,yCAAkDA,iBAAMA,wBAAqDA,iBAAMA,yCACrHA,QACAA,eACEA,yCAAkDA,iBAAMA,wBAAkDA,iBAAMA,yCAClHA,qBA3CIA,0DAAgFA,0DAA2DA,2DAK3IA,2DAEAA,2DACAA,2DACAA,2DAMAA,2DAEAA,2DACAA,2DAUaA,0DAQbA,2DAGIA,4DAAmHA,4DAGnHA,4DAAgHA,mFAY9HA,oBACEA,6CACFA,QACAA,oBACEA,6CACFA,QACAA,oBACEA,6CACFA,QACAA,oBACEA,+CACFA,QACAA,qBACEA,+CACFA,QACAA,qBACEA,+CACFA,QACAA,qBACEA,+CACFA,eAnBuBA,wDAGAA,wDAGAA,yDAGAA,0DAGAA,0DAGAA,0DAGAA,mFAcjBA,iDAAKA,uEALXA,uBAAwCA,oFAAe,KAACC,QAAa,IAAY,GAC/ED,uBACAA,wBACEA,kBACAA,+BAGFA,iDANUA,oFAEHA,oDACQA,4DAJjBA,kDAAwBA,yBCnG9B,MAAME,EAAiB,CACrB,CACEC,KAAM,GACNC,UCAJ,MAAM,MAAOC,EAuKXC,YAAmBC,oBArKnBC,cAAU,EACVA,aAAS,EACTA,YAAQ,EACRA,SAAM,GAENA,UAAO,CACT,CAAC,sCAA6B,mFAG9B,CAAC,uCAAwC,oHAGzC,CAAC,uCAAwC,gLAIzC,CAAC,yDAA0D,2TAM3D,CAAC,oDAAqD,4bAMtD,CAAC,kDAAmD,ujBASpD,CAAC,mDAAoD,+xBASrD,CAAC,4CAA6C,myDAkB9C,CAAC,uDAAwD,qiBAOzD,CAAC,0EAA2E,mjBAQ5E,CAAC,8CAA+C,6GAGhD,CAAC,wCAAyC,2pBAS1C,CAAC,mEAAoE,20CAmBrE,CAAC,wDAAyD,8yBAW1D,CAAC,yCAA0C,ugCAc3C,CAAC,qDAAsD,+fAOvD,CAAC,+BAAgC,siBAuBoB,CAEnDC,WAAc,+CAzKHJ,GAAQL,sCAARK,EAAQK,gpBFRrBV,sBAAY,kBAAZA,CAAY,mBAGNA,2BACFA,QACAA,4CACAA,2BACIA,qBACJA,YAIJA,uBAAa,eAAbA,CAAa,iBAGQA,uDACfA,uBACAA,sBAAWA,sCAAyCA,UAEtDA,kCAoDAA,uBAAiBA,qDACfA,uBACAA,sBAAW,QAAGA,gCAAuBA,YAEvCA,kCAwBAA,uBAAiBA,mDACfA,uBACAA,sBAAW,QAAGA,gBAAGA,YAEnBA,gCAYFA,iBA9GaA,gEAWCA,8EACIA,yDAEHA,iCAqDDA,6EACIA,uCAEHA,gCAyBDA,4EAGCA,oKE/FJK,CAAb,ODQO,IAAMM,EAAb,MAAM,MAAOA,kDAAqB,0BAArBA,gCAHDC,cAAsBV,GACtBU,QAECD,CAAb,KEKaE,EAAb,MAAM,MAAOA,kDAAc,0BAAdA,gCARTC,KACAC,KACAC,KACAL,EACAM,mBAISJ,CAAb","names":["i0","c","routes","path","component","HelpPage","constructor","translate","this","ngOnInit","selectors","HelpPageRoutingModule","RouterModule","HelpPageModule","CommonModule","FormsModule","IonicModule","TranslateModule"],"sourceRoot":"webpack:///","sources":["./src/app/help/help.page.html","./src/app/help/help-routing.module.ts","./src/app/help/help.page.ts","./src/app/help/help.module.ts"],"sourcesContent":["<!--\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n-->\n\n<ion-header>\n  <ion-toolbar style=\"padding-right:11px;\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title [innerHtml]=\"'help.-page-title'|translate\"></ion-title>\n    <ion-thumbnail slot=\"end\">\n        <ion-img src=\"./assets/topright_icon.png\"></ion-img>\n    </ion-thumbnail>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list lines=\"full\" no-padding no-margin>\n\n    <ion-item button (click)=\"e_short = !e_short\" no-padding color=\"primary\">\n      <ion-icon [name]=\"e_short?'caret-down-outline':'caret-forward-outline'\" no-padding no-margin></ion-icon>\n      <ion-label><b [innerHtml]=\"'help.h1'|translate\"></b></ion-label>\n    </ion-item>\n    <ng-template [ngIf]=\"e_short\">\n      <ion-item>\n        <ion-label text-wrap>\n          <span [innerHtml]=\"'help.p11a'|translate\"></span>&nbsp;<a routerLink=\"/mypolls\"><span [innerHtml]=\"'help.p11b'|translate\"></span></a>&nbsp;<span [innerHtml]=\"'help.p11c'|translate\"></span>\n        </ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap>\n          <span [innerHtml]=\"'help.p12a'|translate\"></span>\n          <ul>\n            <li [innerHtml]=\"'help.p12b'|translate\"></li>\n            <li [innerHtml]=\"'help.p12c'|translate\"></li>\n            <li [innerHtml]=\"'help.p12d'|translate\"></li>\n          </ul>\n        </ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap>\n          <span [innerHtml]=\"'help.p13a'|translate\"></span>\n          <ul>\n            <li [innerHtml]=\"'help.p13b'|translate\"></li>\n            <li [innerHtml]=\"'help.p13c'|translate\"></li>\n          </ul>\n        </ion-label>\n      </ion-item>\n<!--      <ion-item>\n        <ion-label text-wrap>\n          See <b>more information</b> on a poll or option by pressing the <b>dropdown buttons</b> on the right.\n        </ion-label>\n      </ion-item>-->\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p14'|translate\">\n          <!--If you want to <b>freeze</b> the current sorting of options on your screen, \n          use the <b>refresh button</b> in the top-right corner to disable automatic resorting.\n          If that button shows an <b>exclamation mark</b>, the ordering needs a refresh.-->\n        </ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap>\n          <span [innerHtml]=\"'help.p15a'|translate\"></span>\n          <ul>\n            <li><!--TODO: make icons align better vertically:-->\n              <span [innerHtml]=\"'help.p15b1'|translate\"></span>&nbsp;<ion-icon class=\"poll-type\" name=\"trophy\"></ion-icon>&nbsp;<span [innerHtml]=\"'help.p15b2'|translate\"></span> \n            </li>\n            <li>\n              <span [innerHtml]=\"'help.p15c1'|translate\"></span>&nbsp;<ion-icon class=\"poll-type\" name=\"cut\"></ion-icon>&nbsp;<span [innerHtml]=\"'help.p15c2'|translate\"></span> \n            </li>\n          </ul>\n        </ion-label>\n      </ion-item>\n    </ng-template>\n\n    <ion-item button (click)=\"e_long = !e_long\" no-padding color=\"primary\">\n      <ion-icon [name]=\"e_long?'caret-down-outline':'caret-forward-outline'\" no-padding no-margin></ion-icon>\n      <ion-label><b>{{'help.h2'|translate}}</b></ion-label>\n    </ion-item>\n    <ng-template [ngIf]=\"e_long\">\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p21'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p22'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p23'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p24'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p25'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p26'|translate\"></ion-label>\n      </ion-item>\n      <ion-item>\n        <ion-label text-wrap [innerHtml]=\"'help.p27'|translate\"></ion-label>\n      </ion-item>\n    </ng-template>\n\n    <ion-item button (click)=\"e_faq = !e_faq\" no-padding color=\"primary\">\n      <ion-icon [name]=\"e_faq?'caret-down-outline':'caret-forward-outline'\" no-padding no-margin></ion-icon>\n      <ion-label><b>FAQ</b></ion-label>\n    </ion-item>\n    <ng-template [ngIf]=\"e_faq\">\n      <ion-item *ngFor=\"let q of faqs\" button (click)=\"e_q[q[0]] = !(e_q[q[0]] || false)\">\n        <ion-icon [name]=\"e_q[q[0]]?'chevron-down-outline':'chevron-forward-outline'\" no-padding no-margin size=\"small\"></ion-icon>\n        <ion-label button text-wrap>\n          <div [innerHTML]=\"'<b>'+q[0]+'</b>'\"></div>\n          <ng-template [ngIf]=\"e_q[q[0]]\">\n            <div [innerHTML]=\"q[1]\"></div>\n          </ng-template>\n        </ion-label>\n      </ion-item>\n    </ng-template>\n  \n  </ion-list>\n<!--    <li>\n      If you feel a good option is missing, just add it at the bottom of the list!<br/>\n      <small>\n        Options are sorted by descending approve, so your option will move upwards as it gains approve.\n        vodle works best with at least a handful of options.\n      </small><br/>&nbsp;\n    </li>-->\n<!--  \n      <small>\n        A rating of, say, 80 means you would approve this option if less then 80% oppose it\n        (or, equivalently, if more than 20% approve it).\n        If your slider meets the light approve bar to the right, then you approve the option and the slider turns green.\n        A rating of zero implies that you won't ever approve this option.\n      </small><br/>&nbsp;\n  <h3>How to set up a new poll</h3>\n  <ul>\n    <li>...</li>\n  </ul>\n-->\n\n</ion-content>\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HelpPage } from './help.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HelpPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HelpPageRoutingModule {}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.page.html',\n  styleUrls: ['./help.page.scss'],\n})\nexport class HelpPage implements OnInit {\n\n  e_short = true;\n  e_long = false;\n  e_faq = false;\n  e_q = [];\n\n  faqs = [\n[\"How to pronounce ‘vodle’?\", `\nLike ‘yodel’! (not like ‘model’ or ‘noodle’).\n`],\n[\"What does a rating of, say, 37 mean?\", `\nIf you rate an option at 37 you promise to approve that option if less than 37% of all voters disapprove it.\n`],\n[\"What happens if I approve an option?\", `\nIf you approve an option (green slider), you increase the likelihood that it wins (for single-winner polls) \nor the share of the budget it gets (for allocation polls).\n`],\n[\"How does my approval affect the winning probabilities?\", `\nIf a unique option is approved by all voters, it wins for sure.\nOtherwise, one voter is drawn by lot and one of the options this voter approves will win.\nIf you are this voter, your approval will decide which option wins:\namong all options you approve, the one with the largest overall approval will win.\n`],\n[\"How does my approval affect the allocated shares?\", `\nAn option's share is proportional to the number of voters who approve this target and approve no other target with a larger overall approval.\nSo if there are N voters in total, you control a share of 1/N of the total budget.\nIf you approve only one target, this share under your control goes to that target.\nIf you approve several targets, your share goes to the one with the largest overall approval among those targets you approve.\n`],\n[\"Why may the most-approved option still not win?\", `\nIf a unique option is approved by all voters, it will win.\nBut if no option has the approval of all voters, this means there is incomplete consensus.\nTo give all voters the same influence, vodle cannot simply declare the most-approved option the winner.\nInstead, it must follow an approach similar to a green-card lottery then:\none voter is drawn by lot, and an option approved by that voter wins.\nStill, even then the broadest possible consensus is sought: \namong the options approved by the drawn voter, the one with the largest overall approve wins. \n`],\n[\"Why should I accept that chance may play a role?\", `\nvodle uses chance only to make sure everyone has a fair chance of being heard.\nOne can prove mathematically that it is not possible to give all voters the same power without using some amount of chance in some situations.\nYou can make sure that chance does <i>not</i> play a role if you find an option that everyone can approve and give that option at least a rating of 1.\nOn the other hand, chance is an unavoidable ingredient of life. \nEven if a vote tallying rule does not explicitly use chance, the overall decision process always contains chance elements anyway in the real world:\nat what time a decision is sought, what options are on offer, which voter has which information, what the consequences of the options would be \n– all these questions involve some chance element.\n`],\n[\"Why are the ratings not simply summed up?\", `\nSimply summing up all ratings for an option might sound like a good idea at first, but it would not give every voter a fair chance of influencing the result.\nImagine there are two polar options A and B, with A being favoured by 55% of voters and B by 45%,  \nand assume there is a potential consensus option C that all voters consider almost as good as their favourite option. \nThen one would want C to win, and vodle makes this very likely.<br/>\nBut if instead ratings would simply be summed up, \nthen the 55% A-voters could rate A at 100 and rate B and C at 0. \nThen A would wins for sure, no matter what the ratings of the other 45% are.\nSo those 45% would have no influence on the result at all, and the potential consensus option would not have a chance of winning.<br/>\nWith vodle however, the same “noncooperative” ratings would guarantee A only a winning probability of 55% rather than 100%\nsince every group of voters can only control a share of the winning probability that equals their share of voters.\nIf C is a potential consensus, those 55% would prefer getting C for sure rather than getting A with only 55% probability and getting B with 45% probability.\nSo with vodle, the 55% would give C a positive rating, and so would the other 45%.\nThis way, both factions avoid the uncertain lottery outcome A or B and rather make C the sure winner.\nOne can even prove using game theory that such ratings form a very strong form of strategic equilibrium when voters are rational.<br/>\nOne can also prove similarly, that when ratings were simply summed up instead, rational voters would never give a rating other than zero or 100 to any option,\nand a majority would always get their will however slight the majority is, so that method would not be much different from plain majority voting.\n`],\n[\"Why should I rate <i>at least one</i> option at 100?\", `\nA rating of 100 does not mean that you are completely happy with that option!\nIt rather means that this option is the best or least bad <i>among those options on offer</i>.\nIf you give no option a rating of 100, it may happen that your vote is wasted since you end up approving no option at all.\nBy giving at least one option a rating of 100, you make sure that you retain control over a fair share of the overall decision power\nand that the share of winning probability that you control does not go to any option that you rate at zero. \n`],\n[\"Why should I give <i>more than one</i> option a <i>positive</i> rating?\", `\nIf everyone gives just one option a positive rating, the winner will be determined by lot \nand every option wins with a probability equal to its approval (in percent of all voters who did not abstain).\nNo potential consensus option would get a chance.\nThis highly random result can be avoided by giving potential consensus options a positive rating as well.\nBy doing so, you indicate that you would agree to transfer the share of winning probability controlled by you\nfrom your favourite option to the consensus option if other voters do so as well. \n`],\n[\"Which options should get a positive rating?\", `\nA good rule of thumb is to give an option a positive rating if it is “better than average”.\n`],\n['What does \"better than average\" mean?', `\nImagine one voter was drawn by lot and could decide on their own. Letʼs call this the “random dictator lottery”.\nNow for each option, you ask yourself: would I rather have this option for sure than having the random dictator lottery performed?\nIf the answer is yes, this option is “better than average” and should get a positive rating.<br/>\nIf you have no idea about the other votersʼ preferences, \nyou could assume that every option has roughly the same approval among voters.\nAs the poll evolves, you can watch the approval each option gets\nand thus improve your estimate of what the random dictator lottery would bring.\n`],\n['How large should a rating for a \"better-than-average\" option be?', `\nIf you have an idea about the views of the other voters,\nyou should set your rating in the following way.\nFirst, you estimate what percentage of the voters finds this option worse than average.\nLetʼs say you think 37% of voters find the option worse than average.\nThen you add some safety margin (giving something like 40 in this example).\nThis should be your rating.<br/>\n<i>Why?</i> Because if all voters who find the option better than average use the same logic, \nthen vodle will correctly register all of you as approving this option:\nyour rating (40) is then larger than the percentage of voters who disapprove the option,\nand this is the criterion for your approval that vodle uses.<br/>\n<b>And what if I have no idea about who finds an option worse or better than average?</b>\nThen a good rule of thumb is to scale your ratings from 0 to 100 according to your relative preference.\n0 would mean \"just average\" and 100 would mean \"best of the available options\".\nAs the poll evolves, you can watch how the approval for each option grows,\nand you can test how far to the right you have to move your slider before the approval increases.\nIf other voters have already set their ratings based on the above rule of thumb,\nthe light grey approval bar should start moving towards your slider once your rating gets large enough.\n`],\n[\"Why should I not give <i>too many</i> ratings of 100?\", `\nBy giving a compromise option a positive rating smaller than 100, \nyou indicate that you will approve this option only if enough other voters do so as well. \nThis way, you give other voters an incentive to also give that option a positive rating.\nIf you gave the option a rating of 100, other voters could simply rate it at 0.\nThe result could be that your share of the winning probability would be transferred from your favourite option to the compromise option,\nbut the other votersʼ shares would remain with their favourite options. \nThis would be no compromise but would only be to your disadvantage.\nOnly giving a rating properly between 0 and 100 can ensure that you and other voters <i>collectively</i> \ntransfer your shares from your various favourite options to the compromise option.\n`],\n[\"What if no option appeals to everyone?\", `\nIdeally, some option <i>would be</i> considered better than average by all voters if they are honest,\nand in that case a very small positive rating of just 1 would suffice to make this option the sure winner.\nBut in reality, even then there will likely be some small percentage of voters \nwho do not realize that this option would make a good consensus and would rate it at zero instead.\nThis is why you should add some safety margin to your rating, and rather give a rating of, say, 5 or 10, than just 1.<br/>\nIf there really is no option with almost full consensus potential, \nthere might still be one that at least appeal to, say, 80 percent.\nIn that case, these 80% should give it a rating of 100 – 80 = 20, \nplus some safety margin, so maybe a rating of 25.\nThis way, this broad “partial” consensus option wins with a very large probability of 80%,\nand the remaining 20% winning probability remain under the control of the minority 20% \nwho cannot agree to that consensus, which is only fair.\n`],\n[\"What if <i>several</i> options appeal to everyone?\", `\nIn this lucky case, several options will end up being approved by everyone.\nWhenever that happens, we do use their total ratings as a tie-breaker to decide between them.\nSo, if option A is approved by 60% but options B and C are both approved by 100%, \nand if the total ratings are 345 for A, 123 for B, and 234 for C, then C has the largest total rating among those options who have 100% approval, \nso C wins in that case, even though A has a larger total rating (but is not approved by everyone). \n`],\n[\"What does x% agreement mean?\", `\nWe calculate agreement as follows: For each option, we multiply its approval score with its share. Then we sum all these numbers up.\nAn agreement level of 100% means that the total share goes to an option that is approved by all non-abstaining participants.\nFor a poll that selects a single option, the resulting agreement level can be interpreted as follows: When you take a thousand polls each of which had, say, 23% agreement, and look at the approval scores the winning options got, the average approval score will be approximately 23%.\n`],\n/*\n[\"\", `\n`],\n[\"why anonymous?\", `minority protection, vote trading\n`],\n[\"when and how to delegate?\", `trust, better informed, similar preferences\n`],\n[\"why control some ratings yourself when delegating?\", `\n`],\n[\"why not anonymous when delegated?\", `\n`],\n[\"why delegation chains?\", `\n`],\n[\"why sometimes reduce rating again?\", `\n`],\n*/\n];\n\n  constructor(public translate: TranslateService) { }\n\n  ngOnInit() { }\n\n}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { HelpPageRoutingModule } from './help-routing.module';\n\nimport { HelpPage } from './help.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HelpPageRoutingModule,\n    TranslateModule.forChild()\n  ],\n  declarations: [HelpPage]\n})\nexport class HelpPageModule {}\n"],"x_google_ignoreList":[]}