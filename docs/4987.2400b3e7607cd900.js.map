{"version":3,"file":"4987.2400b3e7607cd900.js","mappings":"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","names":["i0","routes","path","component","LoginPage","constructor","router","route","formBuilder","translate","G","this","environment","window","L","entry","params","subscribe","then_url","then","step","info","includes","ready","D","setu","ngOnInit","languageFormGroup","group","language","UntypedFormControl","Validators","emailFormGroup","email","passwordFormGroup","pw","password","S","password_regexp","confirm_password","validators","passwords_match","oldPasswordFormGroup","ionViewWillEnter","page","ionViewDidEnter","default_lang","navigator","slice","get","setValue","langs","onDataReady","setTimeout","el","input_email","input_new_password","input_old_password","setFocus","document","getElementById","focus","ionViewDidLeave","save_state","exit","onDataChange","set_language","c","valid","value","set_email","set_password","fg","set_old_password","submit_language","go_fullscreen_on_mobile","navigate","ask_used_before_no","ask_used_before_yes","submit_email","accept_privacy","login_as_guest","Math","round","random","default_wap","use_guest","login_submitted","blur_password","input_retype_password","submit_new_password","submit_old_password","connected_dismissed","init_notifications","target","decodeURIComponent","trace","t","location","replace","selectors","LoginPageRoutingModule","RouterModule","LoginPageModule","CommonModule","FormsModule","IonicModule","ReactiveFormsModule","TranslateModule"],"sourceRoot":"webpack:///","sources":["./src/app/login/login.page.html","./src/app/login/login-routing.module.ts","./src/app/login/login.page.ts","./src/app/login/login.module.ts"],"sourcesContent":["<!--\n(C) Copyright 2015â€“2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n-->\n\n<!--\nTODO:\n- checkbox \"store password\" with caution\n-->\n\n<ion-header>\n  <ion-toolbar style=\"padding-right:11px;\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title [innerHtml]=\"'login.-page-title'|translate\"></ion-title>\n    <ion-buttons slot=\"end\">\n\n      <!-- OFFLINE SIGN -->\n      <ng-container *ngIf=\"!window.navigator.onLine\">\n        <ion-icon name=\"cloud-offline-outline\" color=\"grey\"\n          style=\"position: relative; bottom: -1px;\">\n        </ion-icon>\n        <ion-icon name=\"alert-outline\" color=\"grey\">\n        </ion-icon>\n      </ng-container> \n\n      <!-- SYNCING SIGN -->\n      <ion-spinner *ngIf=\"G.show_spinner || !window.navigator.onLine\" name=\"crescent\" color=\"grey\"></ion-spinner>\n      <ion-thumbnail *ngIf=\"!(G.show_spinner || !window.navigator.onLine)\">\n        <ion-img src=\"./assets/topright_icon.png\" ></ion-img>\n      </ion-thumbnail>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n<!--\n\nTODO:\n  - hitting enter should submit\n\n- if no conn. info in local db:\n  - apparently user new on this device. ask if has used vodle before\n    - if no: ask for new conn. info, try to connect as public user\n      - if success, look for private user doc. \n        - if exists, notify that conn. info already in use (used vodle before after all?), try connecting as private user and updating user doc.\n          - if success, done\n          - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n        - otherwise, try generating user\n          - if success, try connecting as private user and generating user doc.\n            - if success, done\n            - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n          - if not, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n      - otherwise, notify error, ask to verify conn. info, return to form \n    - if yes: ask for old conn. info or recovery file, ...\n-->\n<ion-content *ngIf=\"ready\">\n  <ion-grid>\n\n    <ng-container *ngIf=\"step=='language'||step=='start'\">\n        <ion-item lines=\"none\">\n          <ion-label class=\"ion-text-center\"><h1 style=\"width:100%;\" [innerHtml]=\"'login.welcome'|translate\"></h1></ion-label>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <div style=\"width:100%;\" class=\"ion-text-center\">\n            <img src=\"./assets/topleft_icon.png\" style=\"width:306px;\"/>\n          </div>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <p><br/><br/></p>\n        </ion-item>\n        <ion-item class=\"item-text-wrap\">\n          <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-language'|translate\"></h1>\n        </ion-item>\n        <form [formGroup]=\"languageFormGroup\">\n          <ion-item>\n            <ion-label position=\"floating\" color=\"primary\">\n              <ion-icon name=\"language-outline\"></ion-icon>&nbsp;\n              <span [innerHtml]=\"'language'|translate\"></span>\n            </ion-label>\n            <ion-select #ionSelects interface=\"popover\" formControlName=\"language\" \n                [cancelText]=\"'cancel'|translate\" [okText]=\"'OK'|translate\" \n                (ionChange)=\"set_language()\">\n              <ion-select-option *ngFor=\"let lang of translate.langs\" [value]=\"lang\" [innerHtml]=\"G.S.language_names[lang]\"></ion-select-option>\n            </ion-select>\n          </ion-item>\n        </form>    \n        <ion-item lines=\"none\">\n          <p><br/></p>\n        </ion-item>\n        <ion-item lines=\"none\">\n          <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!languageFormGroup.valid\" \n              shape=\"round\"\n              (click)=\"submit_language()\">\n            <span [innerHtml]=\"'next'|translate\"></span>\n            &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n          </ion-button>\n        </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='used_before'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-used-before'|translate\"></h1>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button slot=\"end\" size=\"large\" color=\"primary\" shape=\"round\" \n          (click)=\"ask_used_before_yes()\" [innerHtml]=\"'yes'|translate\">\n        </ion-button>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button slot=\"end\" size=\"large\" color=\"primary\" shape=\"round\" \n          (click)=\"ask_used_before_no()\" [innerHtml]=\"'no'|translate\">\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"(step=='fresh_email')||(step=='old_email')\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"(step=='fresh_email'?'login.ask-fresh-email':'login.ask-old-email')|translate\"></h1>\n      </ion-item>\n      <ion-item class=\"item-text-wrap\">\n          <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"(step=='fresh_email'?'login.ask-fresh-email-2':'login.ask-old-email-2')|translate\"></p>\n      </ion-item>\n      <form [formGroup]=\"emailFormGroup\">\n        <ion-grid class=\"ion-no-padding\">\n          <ion-row class=\"ion-no-padding\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'email'|translate\"></ion-label>\n                <ion-input #input_email\n                  formControlName=\"email\" [maxlength]=\"E.max_len.name\"\n                  type=\"text\" inputmode=\"email\" [autofocus]=\"step=='old_email'\"\n                  (ionChange)=\"set_email()\" debounce=\"100\"\n                  (keydown.enter)=\"submit_email()\">\n                </ion-input><!--TODO: add \"required\" once the problem is solved that the privacy link does not work properly when field left empty-->\n              </ion-item>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n        <div class=\"validation-errors\">\n        <ng-container *ngFor=\"let validation of G.S.validation_messages.email\">\n          <div class=\"error-message\" \n              *ngIf=\"emailFormGroup.get('email').hasError(validation.type) \n                      && (emailFormGroup.get('email').dirty || emailFormGroup.get('email').touched)\"\n              [innerHtml]=\"validation.message|translate\">\n          </div>\n        </ng-container>\n        </div>  \n      </form>\n      <ion-item lines=\"none\" class=\"item-text-wrap\">\n        <ion-checkbox slot=\"start\" value=\"false\" [(ngModel)]=\"accept_privacy\"></ion-checkbox>\n        <small><p>\n          <span [innerHtml]=\"'login.consent-privacy-before-privacy'|translate\"></span><a target=\"_blank\" [href]=\"E.privacy_statement_url\" [innerHtml]=\"'login.consent-privacy-privacy'|translate\"></a><span [innerHtml]=\"'login.consent-privacy-after-privacy'|translate\"></span>\n        </p></small>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button type=\"submit\" size=\"larger\" color=\"primary\" slot=\"end\" \n            [disabled]=\"!emailFormGroup.valid || !accept_privacy || emailFormGroup.get('email').value==''\" \n            shape=\"round\"\n            (click)=\"submit_email()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n      <ng-container *ngIf=\"step=='fresh_email'\">\n        <ion-item>\n        </ion-item>\n        <ion-item class=\"item-text-wrap\" lines=\"none\">\n          <small><p style=\"width:100%;\">\n            <span [innerHtml]=\"'login.login-as-guest-head'|translate\"></span><br/>\n            <ion-button type=\"submit\" color=\"primary\" slot=\"start\" \n                [disabled]=\"!accept_privacy\" \n                shape=\"round\"\n                (click)=\"login_as_guest()\">\n              <span [innerHtml]=\"'login.login-as-guest-button'|translate\"></span>\n            </ion-button><br/>\n            <span *ngIf=\"!accept_privacy\"style=\"width:100%;\" [innerHtml]=\"'login.login-as-guest-foot'|translate\"></span>\n          </p></small>\n        </ion-item>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='fresh_password'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-fresh-password'|translate\"></h1>\n      </ion-item>\n      <ion-item class=\"item-text-wrap\">\n        <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-fresh-password-2'|translate\"></p>\n      </ion-item>\n      <form [formGroup]=\"passwordFormGroup\">\n        <div formGroupName=\"pw\">\n          <ion-row class=\"ion-no-padding ion-nowrap\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'password'|translate\"></ion-label>\n                <ion-input #input_new_password\n                  formControlName=\"password\"\n                  clearOnEdit=\"false\" clearInput=\"true\" [maxlength]=\"E.max_len.name\"\n                  [type]=\"showing_password?'text':'password'\" required autofocus=\"true\"\n                  autocomplete=\"off\" autocorrect=\"off\"\n                  (ionChange)=\"set_password()\" debounce=\"100\"\n                  (ionBlur)=\"blur_password()\">\n                </ion-input>\n              </ion-item>\n            </ion-col>\n            <ion-button \n                tabindex=\"-1\" style=\"padding-top: 15px;\" fill=\"clear\" color=\"primary\" \n                (click)=\"showing_password=!showing_password\">\n              <ion-icon [name]=\"showing_password?'eye-off-outline':'eye-outline'\"></ion-icon><!--&nbsp;\n              <span [innerHtml]=\"(showing_password?'hide':'show')|translate\"></span>-->\n            </ion-button>\n          </ion-row>\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of G.S.validation_messages.password\">\n              <div class=\"error-message\" \n                  *ngIf=\"passwordFormGroup.get('pw.password').hasError(validation.type) \n                          && (passwordFormGroup.get('pw.password').dirty || passwordFormGroup.get('pw.password').touched)\"\n                  [innerHtml]=\"validation.message|translate\">\n              </div>\n            </ng-container>\n          </div>\n          <ng-container>\n            <ion-item>\n              <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'retype-password'|translate\"></ion-label>\n              <ion-input \n                formControlName=\"confirm_password\" \n                #input_retype_password  [maxlength]=\"E.max_len.name\"\n                clearOnEdit=\"false\" clearInput=\"true\"\n                [type]=\"showing_password?'text':'password'\" required\n                autocomplete=\"off\" autocorrect=\"off\"\n                (ionChange)=\"set_password()\" debounce=\"100\"\n                (keydown.enter)=\"submit_new_password()\">\n              </ion-input>\n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of G.S.validation_messages.passwords_match\">\n                <div class=\"error-message\" \n                    *ngIf=\"passwordFormGroup.get('pw').hasError('must_match') \n                            && (passwordFormGroup.get('pw.confirm_password').dirty || passwordFormGroup.get('pw.confirm_password').touched)\"\n                    [innerHtml]=\"validation.message|translate\">\n                </div>\n              </ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </form>    \n      <!--\n      <ion-item lines=\"none\" class=\"item-text-wrap\">\n        <ion-checkbox slot=\"start\" value=\"false\" [(ngModel)]=\"save_password\"></ion-checkbox>\n        <ion-label [innerHtml]=\"'login.store-password'|translate\"></ion-label>\n      </ion-item>\n      -->\n      <ion-item lines=\"none\">\n        <p><br/><br/></p>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!passwordFormGroup.get('pw').valid\" \n            shape=\"round\"\n            (click)=\"submit_new_password()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='old_password'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ask-old-password'|translate\"></h1>\n      </ion-item>\n      <form [formGroup]=\"oldPasswordFormGroup\">\n        <div formGroupName=\"pw\">\n          <ion-row class=\"ion-no-padding\">\n            <ion-col class=\"ion-no-padding\">\n              <ion-item>\n                <ion-label position=\"floating\" color=\"primary\" [innerHtml]=\"'password'|translate\"></ion-label>\n                <ion-input #input_old_password\n                  formControlName=\"password\"\n                  clearOnEdit=\"false\" clearInput=\"true\" [maxlength]=\"E.max_len.name\"\n                  [type]=\"showing_password?'text':'password'\" required autofocus=\"true\"\n                  autocomplete=\"off\" autocorrect=\"off\"\n                  (ionChange)=\"set_old_password()\" debounce=\"100\"\n                  (keydown.enter)=\"submit_old_password()\">\n                </ion-input>\n              </ion-item>\n            </ion-col>\n            <ion-button \n                tabindex=\"-1\" style=\"padding-top: 15px;\" fill=\"clear\" color=\"primary\" \n                (click)=\"showing_password=!showing_password\">\n              <ion-icon [name]=\"showing_password?'eye-off-outline':'eye-outline'\"></ion-icon>&nbsp;\n              <span [innerHtml]=\"(showing_password?'hide':'show')|translate\"></span>\n            </ion-button>\n          </ion-row>\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of G.S.validation_messages.password\">\n              <div class=\"error-message\" \n                  *ngIf=\"oldPasswordFormGroup.get('pw.password').hasError(validation.type) \n                          && (oldPasswordFormGroup.get('pw.password').dirty || oldPasswordFormGroup.get('pw.password').touched)\"\n                  [innerHtml]=\"validation.message|translate\">\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </form>    \n      <!--\n      <ion-item lines=\"none\" class=\"item-text-wrap\">\n        <ion-checkbox slot=\"start\" value=\"false\" [(ngModel)]=\"save_password\"></ion-checkbox>\n        <ion-label [innerHtml]=\"'login.store-password'|translate\"></ion-label>\n      </ion-item>\n      -->\n      <ion-item lines=\"none\">\n        <p><br/><br/></p>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-button size=\"larger\" color=\"primary\" slot=\"end\" [disabled]=\"!oldPasswordFormGroup.valid\" \n            shape=\"round\"\n            (click)=\"submit_old_password()\">\n          <span [innerHtml]=\"'next'|translate\"></span>\n          &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n        </ion-button>\n      </ion-item>\n    </ng-container>\n\n    <ng-container *ngIf=\"step=='connected'\">\n      <ion-item class=\"item-text-wrap\" lines=\"none\">\n        <ion-col>\n          <h1 class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ready-to-start'|translate\"></h1>\n          <p class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ready-to-start-detail'|translate\"></p>\n          <p *ngIf=\"G.S.use_guest\" class=\"ion-text-center\" style=\"width:100%;\" [innerHtml]=\"'login.ready-to-start-guest'|translate:{email:G.S.email,password:G.S.password}\"></p>\n        </ion-col>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <p><br/><br/><br/></p>\n      </ion-item>\n      <form>\n        <ion-item lines=\"none\">\n          <!-- TODO: make this button (and similar buttons on other pages) respond to hitting \"enter\" -->\n          <ion-button size=\"larger\" color=\"primary\" slot=\"end\"\n              shape=\"round\" type=\"submit\" id=\"dismiss_button\" \n              (click)=\"connected_dismissed()\">\n            <span [innerHtml]=\"'start'|translate\"></span>\n            &nbsp;<ion-icon name=\"arrow-forward-outline\"></ion-icon>\n          </ion-button>\n        </ion-item>\n      </form>\n      <ion-item *ngIf=\"terms_expanded\">\n      </ion-item>\n    </ng-container>\n\n  </ion-grid>\n</ion-content>\n","/*\n(C) Copyright 2015â€“2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","/*\n(C) Copyright 2015â€“2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { Validators, UntypedFormBuilder, UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonButton, IonInput } from '@ionic/angular';\n\nimport { GlobalService } from \"../global.service\";\nimport { environment } from 'src/environments/environment';\n\n/*\n- if no conn. info in local db:\n  - apparently user new on this device. ask if has used vodle before\n    - if no: ask for new conn. info, try to connect as public user\n      - if success, look for private user doc. \n        - if exists, notify that conn. info already in use (used vodle before after all?), try connecting as private user and updating user doc.\n          - if success, done\n          - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n        - otherwise, try generating user\n          - if success, try connecting as private user and generating user doc.\n            - if success, done\n            - otherwise, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n          - if not, notify error, ask to verify username and password or contact server admin to correct permissions, return to form\n      - otherwise, notify error, ask to verify conn. info, return to form \n    - if yes: ask for old conn. info or recovery file, ...\n*/\n\n// PAGE:\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  E = environment;\n  window = window;\n  \n  // ATTRIBUTES:\n\n  languageFormGroup: UntypedFormGroup;\n  emailFormGroup: UntypedFormGroup;\n  passwordFormGroup: UntypedFormGroup;\n  oldPasswordFormGroup: UntypedFormGroup;\n\n  step: string;\n\n  showing_password: boolean;\n  advanced_expanded: boolean;\n  terms_expanded = false;\n  accept_privacy = false;\n  save_password = false;\n  \n  @ViewChild('input_email', { static: false }) input_email: IonInput;\n  @ViewChild('input_new_password', { static: false }) input_new_password: IonInput;\n  @ViewChild('input_retype_password', { static: false }) input_retype_password: IonInput;\n  @ViewChild('input_old_password', { static: false }) input_old_password: IonInput;\n  @ViewChild('dismiss_button', { static: false }) dismiss_button: IonButton;\n\n  // LIFECYCLE:\n\n  ready = false;  \n  then_url: string;\n\n  constructor(      \n      private router: Router,\n      public route: ActivatedRoute,\n      public formBuilder: UntypedFormBuilder,\n      public translate: TranslateService,\n      public G: GlobalService) { \n    this.G.L.entry(\"LoginPage.constructor\");\n    this.route.params.subscribe(params => { \n      this.then_url = params['then'];\n      const step = this.step = params['step'] || 'start';\n      this.G.L.info(\"LoginPage going to step\", step, this.then_url);\n      if (['start','language','used_before',\n           'fresh_email','old_email','fresh_password','old_password',\n           'connected'].includes(step)) {\n        this.ready = true;  // here we do not need to wait for DataService since we need no data. \n      }\n      if (step == 'connected') {\n        // store privacy consent in database:\n        this.G.D.setu('consent', 'Yes, I have read the data protection declaration and terms of use. I consent to the processing of my data on user devices and database servers in the described manner, in order to participate in polls. I agree that some of my data will be transmitted to other participants in pseudonymized form. I am aware that my right to have my data deleted is hence constrained insofar as these copies may not be deleted on all user devices. I can revoke this consent by e-mail to privacy@vodle.it.');\n      }\n\n    });\n  }\n\n  ngOnInit() {\n    this.G.L.entry(\"LoginPage.ngOnInit\");\n    this.languageFormGroup = this.formBuilder.group({\n      language: new UntypedFormControl('', Validators.required),\n    });\n    this.emailFormGroup = this.formBuilder.group({\n      email: new UntypedFormControl('', Validators.compose([\n//        Validators.required,  // TODO: uncomment once the problem is solved that the privacy link does not work properly when field left empty\n        Validators.email\n      ])),\n    });\n    this.passwordFormGroup = this.formBuilder.group({\n      pw: this.formBuilder.group({\n        password: new UntypedFormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(8),\n          Validators.pattern(this.G.S.password_regexp)\n        ])),\n        confirm_password: new UntypedFormControl('', Validators.required),\n      }, {\n        validators: [this.G.S.passwords_match]\n      }),\n    });\n    this.oldPasswordFormGroup = this.formBuilder.group({\n      pw: this.formBuilder.group({\n        password: new UntypedFormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(8),\n          Validators.pattern(this.G.S.password_regexp)\n        ])),\n      }),\n    });\n  }\n  \n  ionViewWillEnter() {\n    this.G.L.entry(\"LoginPage.ionViewWillEnter\");\n    this.G.D.page = this;\n  }\n\n  ionViewDidEnter() {\n    this.G.L.entry(\"LoginPage.ionViewDidEnter\");\n    const default_lang = navigator.language.slice(0,2);\n    this.languageFormGroup.get('language').setValue(\n      this.G.S.language||((this.translate.langs.includes(default_lang))?default_lang:''));\n    // browser might have prefilled fields, so check this:\n    /*\n    this.set_language();\n    this.set_email();\n    this.set_password();\n    this.set_old_password();\n    */\n    if (this.G.D.ready && !this.ready) this.onDataReady();\n    setTimeout(() => {\n      const el = this.input_email||this.input_new_password||this.input_old_password;\n      if (el) {\n        if (this.step!='fresh_email') el.setFocus();\n      } else {\n        const el = document.getElementById(\"dismiss_button\");\n        if (el) {\n          el.focus();\n        }\n      }\n    }, 300);\n  }\n\n  onDataReady() {\n    // called when DataService initialization was slower than view initialization\n    this.G.L.entry(\"LoginPage.onDataReady\");\n    this.ready = true;\n  }\n\n  ionViewDidLeave() {\n    this.G.L.entry(\"LoginPage.ionViewDidLeave\");\n    this.G.D.save_state();\n    this.G.L.exit(\"LoginPage.ionViewDidLeave\");\n  }\n\n  // OTHER HOOKS:\n  \n  // for DataService:\n\n  onDataChange() {\n    // called whenever data stored in database has changed\n    this.G.L.entry(\"LoginPage.onDataChange\");\n  }\n\n  // for form actions:\n\n  set_language() {\n    let c = this.languageFormGroup.get('language');\n    if (c.valid) this.G.S.language = c.value;\n  }\n\n  set_email() {\n    let c = this.emailFormGroup.get('email');\n    if (c.valid) this.G.S.email = c.value; \n  }\n\n  set_password() {\n    let fg = this.passwordFormGroup.get('pw');\n    if (fg.valid) this.G.S.password = fg.get('password').value; \n  }\n\n  set_old_password() {\n    let fg = this.oldPasswordFormGroup.get('pw');\n    if (fg.valid) this.G.S.password = fg.get('password').value; \n  }\n\n  submit_language() {\n    this.set_language();\n    if (this.languageFormGroup.valid) {\n      this.G.go_fullscreen_on_mobile();\n      this.router.navigate(['/login/used_before/'+this.then_url]);  \n    }\n  }\n\n  ask_used_before_no() {\n    this.G.go_fullscreen_on_mobile();\n    this.router.navigate(['/login/fresh_email/'+this.then_url]);\n  }\n\n  ask_used_before_yes() {\n    this.G.go_fullscreen_on_mobile();\n    this.router.navigate(['/login/old_email/'+this.then_url]);\n  }\n\n  submit_email() {\n    this.set_email();\n    if (this.emailFormGroup.get('email').valid && this.accept_privacy) {\n      if (this.step == 'fresh_email') {\n        this.router.navigate(['/login/fresh_password/'+this.then_url]);\n      } else {\n        this.router.navigate(['/login/old_password/'+this.then_url]);\n      }\n    }\n  }\n\n  login_as_guest() {\n    this.G.S.password = \"Guest\" + Math.round(Math.random()*1000000);\n    this.G.S.email = this.G.S.password + \"@vodle.it\";\n    this.G.S.default_wap = 10;\n    this.G.S.use_guest = true;\n    this.G.D.login_submitted();\n  }\n\n  blur_password() {\n    setTimeout(() => {\n      this.input_retype_password.setFocus();\n    }, 100);\n  }\n\n  submit_new_password() {\n    this.set_password();\n    // TODO: test connection to vodle central. if fails, ask for different server or correct password?\n    if (this.passwordFormGroup.get('pw').valid) {\n      this.G.S.default_wap = 10;\n      this.G.D.login_submitted();\n    }\n  }\n\n  submit_old_password() {\n    this.set_old_password();\n    // TODO: test connection to vodle central. if fails, ask for different server or correct password!\n    if (this.oldPasswordFormGroup.get('pw').valid) {\n      this.G.D.login_submitted();\n    }\n  }\n\n  connected_dismissed() {\n    this.G.D.init_notifications(true);\n    const target = \"./#/\"+decodeURIComponent(((!!this.then_url) && !this.then_url.includes('logout')) ? this.then_url : \"\");\n    this.G.L.trace(\"LoginPage redirecting to\", this.then_url, target);\n    if (target != \"\") {\n      // DIRTY FIX to make sure data is loaded properly:\n      window.location.replace(target);\n    } else {\n      // in principle, we would rather want to do this instead:\n      this.router.navigate([target]);\n    }\n  }\n\n}\n","/*\n(C) Copyright 2015â€“2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    LoginPageRoutingModule,\n    TranslateModule.forChild()\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n"],"x_google_ignoreList":[]}