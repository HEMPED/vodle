{"version":3,"file":"main.c09556b86ed8f60b.js","mappings":"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8V,UAAU50B,YAAzB,CAEH,CAiCM,IAAM60B,EAAb,MAAM,MAAOA,kDAAS,0BAATA,EAASC,WAFNzC,kCAXD,CACP,CAAE0C,QAASC,KAAoBC,SAAUC,MACzC,CAAEH,QAASI,KAAkBF,SAAUG,MACvCvW,IACA,CACIwW,KAAM,CAACC,MACPC,OAAO,EACPR,QAASS,MACTC,WAAYC,IAEnBC,SAzBGC,KACAC,KACAC,eACAC,eACAxB,EACAyB,KACAC,aAAwB,CACpBC,gBAAiB,KACjBC,OAAQ,CACJpB,QAASqB,KACTX,WAAaY,EACbhB,KAAM,CAACiB,YAiBVzB,CAAb,KCtDI70B,iBACFu2B,WAGFC,OAAyBC,gBAAgB5B,GACtC5wB,MAAMmB,GAAO7D,QAAQC,IAAI4D,GAD5B,gBC7BA,OACA,8BACA,GACA,KACA,IAEA,+BACA,KACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,2BACA,KACA,MAEA,8BACA,KACA,KACA,MAEA,2BACA,KACA,MAEA,+BACA,KACA,KACA,MAEA,2BACA,KACA,MAEA,yBACA,KACA,MAEA,2BACA,KACA,MAEA,uBACA,KACA,MAEA,wBACA,KACA,MAEA,kCACA,KACA,KACA,MAEA,6BACA,KACA,KACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,sBACA,IACA,KAEA,oCACA,KACA,KACA,MAEA,wBACA,KACA,MAEA,gCACA,KACA,KACA,MAEA,yBACA,KACA,KACA,MAEA,0BACA,KACA,KACA,MAEA,yBACA,IACA,KACA,KAEA,wBACA,KACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,yCACA,KACA,KACA,MAEA,kCACA,KACA,MAEA,0BACA,KACA,KACA,MAEA,+BACA,KACA,MAEA,0BACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,8BACA,IACA,KACA,MAEA,4BACA,KACA,KACA,MAEA,gCACA,KACA,MAEA,0BACA,KACA,MAEA,4BACA,KACA,KACA,MAEA,4BACA,KACA,KACA,MAEA,2BACA,KACA,MAEA,0BACA,IACA,KAEA,0BACA,KACA,KACA,MAEA,6BACA,KACA,MAEA,4BACA,KACA,KACA,MAEA,wBACA,IACA,KACA,KAEA,uBACA,KACA,MAEA,2BACA,KACA,MAEA,wBACA,KACA,KACA,MAEA,yBACA,KACA,KACA,MAEA,iCACA,KACA,OAGA,cACA,aACA,mCACA,8CACA,gCACAsxB,IAIA,kBACA,iDACAzD,KAEA,CACA0D,0BACAA,SACAC","names":["CryptoES","user_doc_id_prefix","poll_doc_id_prefix","pid","local_only_user_keys","keys_triggering_data_move","poll_keystarts_in_user_db","user_keys_unencrypted","poll_keystarts_requiring_due","voter_subkeystarts_requiring_due","textEncoder","TextEncoder","value","password","toString","temp","what","blake2s","BLAKE2s","environment","update","encode","hexDigest","state_attributes","DataService","constructor","router","loadingController","alertCtrl","translate","storage","document","this","pids","_pids","ready","_ready","loading","_loading","ionViewWillLeave","save_state","ngOnDestroy","console","log","G","L","entry","state","a","exit","set","init","show_loading","user_cache","Set","_pid_oids","poll_caches","tally_caches","own_ratings_map_caches","outgoing_dids_caches","incoming_dids_caches","delegation_agreements_caches","direct_delegation_map_caches","inv_direct_delegation_map_caches","indirect_delegation_map_caches","inv_indirect_delegation_map_caches","effective_delegation_map_caches","inv_effective_delegation_map_caches","proxy_ratings_map_caches","max_proxy_ratings_map_caches","argmax_proxy_ratings_map_caches","effective_ratings_map_caches","news_keys","create","get","then","debug","undefined","trace","warn","restored_user_cache","restored_poll_caches","JSON","stringify","catch","error","finally","init_databases","init_notifications","test_sodium","bind","local_only_user_DB","PouchDB","auto_compaction","local_synced_user_db","uninitialized_pids","local_poll_dbs","remote_poll_dbs","poll_db_sync_handlers","after_local_only_user_cache_is_filled","allDocs","include_docs","process_local_only_user_docs","err","result","row","rows","doc","key","_id","used_lang","use","documentElement","lang","email","info","hide_loading","url","includes","current_url","encodeURIComponent","navigate","local_language","email_and_password_exist","init_poll_data","local_user_docs2cache","has_user_db_credentials","connect_to_remote_user_db","success","remove_spinning_reason","page","then_url","initializing_polls","check_whether_poll_or_option","local_docs2cache_finished","S","compute_db_credentials","getu","dummy","initializing_poll","doc2user_cache","user_password","user_db_private_username","get_email_and_pw_hash","promise","Promise","resolve","reject","get_remote_connection","db","remote_user_db","start_user_sync","now","Date","setu","getUTCFullYear","String","getUTCMonth","padStart","get_local_poll_db","need_poll_db_replication","ensure_local_poll_data","add","ensure_poll_cache","lpdb","local_poll_docs2cache","delete","size","local_changes","doc2poll_cache","get_user_doc_selector","email_and_pw_hash","$gte","$lt","get_poll_doc_selector","$or","connect_to_remote_poll_db","wait_for_replication","poll_db_private_username","getp","replicate","from","retry","batch_size","selector","on","change","handle_poll_db_change","pending","start_poll_sync","after_changes","onDataReady","wait_for_user_db","wait_for_poll_db","change_poll_state","p","new_state","prefix","get_poll_key_prefix","old_state","_setp_in_polldb","due","toISOString","ukey","Object","entries","startsWith","substring","length","pos","indexOf","subkey","slice","delu","poll_has_db_credentials","replicate_once","msg","get_remote_poll_state_doc","login_submitted","add_spinning_reason","language","server_url","user_vodle_password","actual_db_username","actual_db_user_password","conn_as_user_vodle","get_couchdb","conn_as_actual_user","test_remote_connection","put","name","type","roles","comment","response","username","auth","skipSetup","conn","private_username","private_password","user_db_sync_handler","sync","live","style","seq_interval","revs","handle_user_db_change","P","polls","_state","window","syncing","stop_poll_sync","D","cancel","old_values","k","move_user_data","store_user_data","delete_user_data","pid_is_draft","setp","keyend","oid","_setp_in_userdb","delp","endsWith","delete_poll_data","getv","vid","get_voter_key_prefix","pkey","setv","_setv_in_userdb","setv_in_polldb","delv","get_example_docs","startkey","endkey","inclusive_end","limit","keystart","store_poll_data","subkeystart","e","loadingElement","spinner","dismiss","fix_url","deleted","handle_deleted_user_doc","direction","docs","_deleted","last_seq","user_last_seq","onDataChange","tally","pending_changes","handle_deleted_poll_doc","keyfromvid","did","Del","process_deleted_request_from_db","update_own_rating","due_str","deletion_date","getTime","destroy","Poll","oids","Option","ratings_have_changed","after_incoming_changes","cache","value_changed","cyphertext","decrypt","parse","has","r","poll_doc_prefix","voter_doc_prefix","doc_due","Number","parseInt","process_request_from_db","process_signed_response_from_db","store_all_userdata","store_all_polldata","dict","dict_key","enforce","consent","setTimeout","user_pw","enc_value","encrypt","old_value","add_due","poll_pw","o","vid_prefix","is_test","remove","pw","myhash","clear_all_local","clear","delete_all","status","decline","revoke_delegation","set_my_own_rating","delete_remote","res","bulkDocs","push","id","_rev","rev","prompt","LocalNotifications","display","t","header","instant","message","buttons","text","role","handler","present","can_notify","format_date","date","toLocaleDateString","currentLang","weekday","year","month","day","hour","minute","hash","generate_id","email_is_valid","toLowerCase","match","Sodium","keypair","generate_sign_keypair","signed","sign","private","open_signed","public","keypair2","result2","publicKey","privateKey","private_key","signed_message","public_key","str2rand","str","len","seedstr","repeat","seedbytes","randombytes","i0","DOCUMENT","factory","SettingsService","de","en","es","ko","pl","nn","passwords_match","db_from_pid","db_custom_server_url","db_custom_password","db_server_url","db_password","theme","default_wap","get_notify_of","cls","set_notify_of","control","confirm_password","errors","must_match","DelegationService","generate_did","prepare_delegation","request","option_spec","agreement","client_vid","myvid","accepted_oids","active_oids","get_delegation_link","privkey","link","after_request_was_sent","set_private_key","get_my_outgoing_dids_cache","set_my_request","get_delegation_agreements_cache","have_acted","get_potential_effective_delegate","get_agreement","delegate_vid","update_my_delegation","activate","get_request","ospec","splice","acache","del_delegation","dcache","get_incoming_request_status","dirdelmap","effdelmap","inveffdelmap","two_way","cycle","weight_exceeded","effdel_vid","thisinveffdelmap","Map","E","g","store_incoming_request","update_incoming_request_status","old_status","accept","signed_response","sign_response","set_my_signed_response","get_private_key","get_delegate_nickname","set_delegate_nickname","item","i","update_agreement","get_signed_response","response_signed_incorrectly","pair","add_delegation","N","class","auto_dismiss","title","nickname","u","body","response2string","NewsService","generate_nid","data","news","notifications","filter","good","entrykey","GlobalService","loggingService","http","getLogger","addEventListener","onBeforeUnload","onbeforeunload","onunhandledrejection","event","reason","onerror","source","lineNumber","colno","stack","ionViewDidLeave","open_url_in_new_tab","dirty_url","copy_link_to_clipboard","createElement","href","target","appendChild","click","removeChild","navigator","clipboard","writeText","map2str","map","reduce","go_fullscreen_on_mobile","test","userAgent","elem","requestFullscreen","spinning_reasons","show_spinner","PollService","running_polls","closed_polls","draft_polls","generate_pid","unused_pids","pop","generate_oid","unused_oids","generate_password","generate_vid","update_ref_date","ref_date","update_tally","poll_ratings_map","this_ratings_map","n","_pid","T","tally_all","set_timeouts","has_results","end","start_date","end_if_past_due","allow_voting","now_ms","due_ms","time_left_ms","started","started_ms","time_to_notify_ms","closing_soon_fraction","b","notify_closing_soon","due_string","keys","_options","creator","have_seen","have_seen_results","has_been_notified_of_end","final_rand","parseFloat","winner","null","draft","running","desc","due_type","due_custom","_add_option","own_ratings_map","proxy_ratings_map","direct_delegation_map","inv_direct_delegation_map","indirect_delegation_map","inv_indirect_delegation_map","effective_delegation_map","inv_effective_delegation_map","options","remove_option","n_options","get_my_own_rating","ratings_map","store","get_my_proxy_rating","get_my_effective_rating","effective_ratings_map","remaining_time_fraction","t0","t1","t2","is_closing_soon","am_abstaining","votes_map","myvote","my_n_rated_positive","n_positive","my_n_approved","n_approved","approvals_map","have_delegated","set_db_credentials","set_due","setSeconds","dayofweek","getDay","getHours","due_as_ms","setHours","init_password","init_myvid","_own_ratings_map","_direct_delegation_map","_inv_direct_delegation_map","_indirect_delegation_map","_inv_indirect_delegation_map","_effective_delegation_map","_inv_effective_delegation_map","_proxy_ratings_map","max_proxy_ratings_map","_max_proxy_ratings_map","argmax_proxy_ratings_map","_argmax_proxy_ratings_map","_effective_ratings_map","agreement_level","approval_scores_map","n_not_abstaining","expected_approval_score","shares_map","Math","max","dir_d_map","eff_d_map","new_eff_d_vid","inv_dir_d_map","ind_d_map","ind_ds_of_delegate","inv_ind_d_map","inv_eff_d_map","inv_ind_ds_of_delegate","inv_eff_ds_of_client","ind_ds_of_client","ind_ds_of_vid","vid2","new_proxy_rating","cycle_len","includes_me","all_vids_set","my_cycle_len","update_proxy_rating","inv_eff_ds_of_new_eff_d","old_d_vid","old_eff_d_of_client","old_ind_ds_of_client","inv_ind_ds_of_client","inv_eff_ds_of_old_eff_d_of_client","is_on_cycle","former_cycle","cycle_vid","cycle_pos","get_n_indirect_option_clients","get_n_indirect_clients","clients","effective_ratings_ascending_map","thresholds_map","total_effective_ratings_map","scores_map","oids_descending","n_votes_map","total_effective_rating","effective_rating","score_factor","effective_ratings_ascending","update_ratings_ascending","update_threshold_and_approvals","approval_score","_dummy","update_approval_score","update_score","update_ordering","update_vote","update_shares","show_stats","rs_map","vid2s","proxy_rs_map","l","n_changed","old_max_r","old_argmax_r_set","eff_rating_changes_map","max_r","argmax_r_set","oid2","r2","m","update_proxy_rating_phase2","my_shares_map","my_votes_map","my_approval_scores_map","my_thresholds_map","f","old_effective_ratings_ascending","values","sort","n1","n2","index","concat","total_rating","others_approvals_changed","vids_approvals_changed","svg_needs_update","threshold","threshold_changed","oid_others_approvals_changed","oid_vids_approvals_changed","approval","oid_svg_needs_update","ordering_changed","votes_changed","shares_changed","eff_rs_map","eff_rs_asc_non0","Array","eff_rs_asc","fill","threshold_factor","offset","rating","pct_less_than_r","approvals_changed","approval_map","x","tie_breaker","oidsdesc","oid1","sc1","sc2","vote","vote_changed","total_n_votes","share","past_due","make_final_rand","make_winner","notify_of_end","cumshare","base","total","rand","poll","_oid","LEAVE_THIS_AS_THE_FIRST_ENTRY","production","imprint_url","privacy_statement_url","privacy_statement_headline","logging","logLevels","loggerName","logLevel","show_debug_info","data_service","central_db_server_url","central_db_password","allow_other_servers","hash_n_bytes","pid_length","pwd_length","oid_length","vid_length","did_length","nid_length","delegation","enabled","max_weight","db_put_retry_delay_ms","default_lang","github_url","magic_link_base_url","support_vodle_url","tallying","verify_updates","closing","grace_period_1_ms","grace_period_2_ms","grace_period_3_ms","max_len","max_duration_days","delete_after_days","LEAVE_THIS_AS_THE_LAST_ENTRY","AppComponent","icon","addLangs","setDefaultLang","preferred_lang","langs","selectors","routes","path","redirectTo","pathMatch","loadChildren","c","AboutPageModule","DelrespondPageModule","DraftpollPageModule","DraftpollKebapPageModule","HelpPageModule","InvitetoPageModule","JoinpollPageModule","MypollsPageModule","PollPageModule","SettingsPageModule","PreviewpollPageModule","LoginPageModule","ConfigureServerPageModule","LogoutPageModule","DelegationDialogPageModule","AddoptionDialogPageModule","ExplainApprovalPageModule","PrivacyPageModule","ImprintPageModule","DeleteAllPageModule","AssistPageModule","AppRoutingModule","RouterModule","preloadingStrategy","PreloadAllModules","TranslateHttpLoader","configure","AppModule","bootstrap","provide","RouteReuseStrategy","useClass","IonicRouteStrategy","LocationStrategy","HashLocationStrategy","deps","LoggingService","multi","APP_INITIALIZER","useFactory","configureLogging","imports","LoggingServiceModule","BrowserModule","IonicModule","IonicStorageModule","HttpClientModule","TranslateModule","defaultLanguage","loader","TranslateLoader","createTranslateLoader","HttpClient","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","Y","v","$"],"sourceRoot":"webpack:///","sources":["./src/app/data.service.ts","./src/app/settings.service.ts","./src/app/delegation.service.ts","./src/app/news.service.ts","./src/app/global.service.ts","./src/app/poll.service.ts","./src/environments/environment.prod.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app-routing.module.ts","./src/app/app.module.ts","./src/main.ts","./node_modules/@ionic/core/dist/esm/ lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object"],"sourcesContent":["/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\n/*\nTODO:\n- encrypt ALL data, also email address, in local storage and pouchdbs except password, but allow for backwards compat.\n- only store password when checked\n- store emailandpasswordhash for performance\n*/\n\nimport { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LoadingController, AlertController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage-angular';\nimport { DOCUMENT } from '@angular/common';\n\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\nimport { environment } from '../environments/environment';\nimport { GlobalService } from './global.service';\nimport { Poll, Option } from \"./poll.service\";\n\nimport * as PouchDB from 'pouchdb/dist/pouchdb';\n\nimport BLAKE2s from 'blake2s-js'; // TODO: replace by sodium later?\n\nimport CryptoES from 'crypto-es';\nconst iv = CryptoES.enc.Hex.parse(\"101112131415161718191a1b1c1d1e1f\"); // this needs to be some arbitrary but GLOBALLY CONSTANT value\n\n\nimport * as Sodium from 'libsodium-wrappers';\n\n\n/** DATA STORAGE DESIGN\n * \n * \n * REDUNDANCY\n * \n * Most data is stored in three places simultaneously, which are continuously synchronized:\n * - a session-specific local temporal cache \n * - a device-specific local persistent PouchDB\n * - a set of documents with contiguous doc-ids in some remote CouchDB\n * \n *   \n * SEPARATION BETWEEN USER, POLL, AND VOTER DATA\n * \n * The data is divided into several portions:\n * - \"user data\" is data that is not poll-specific, such as overall settings.\n * - \"poll data\" is data that is poll-specific but not voter-specific, such as poll titel and options\n * - \"voter data\" is data that is poll- and voter-specific, such as ratings and delegations\n * \n * User data is stored in a single user cache+PouchDB+CouchDB. A few user data items are stored in the cache only.\n * \n * Poll and voter data is stored in a poll-specific cache+PouchDB+CouchDB, \n * i.e. for each poll there is a separate cache+PouchDB+CouchDB.\n * \n * \n * FLAT KEY-VALUE DATA MODEL\n * \n * All data is stored as simple key-value pairs.\n * \n * Keys are strings that can be hierarchically structures by dots ('.') as separators, \n * such as 'language' or 'poll.78934865986.db_server_url'.\n * Keys of voter data start with 'voter.' followed by the vid (voter id) and a paragraph sign (\"§\"), \n * such as 'voter.968235§option.235896.rating'. Otherwise the colon does not appear in keys.\n * \n * In the local caches, there is one entry per key, and they key is used without any further prefix.\n * \n * \n * MAPPING KEYS TO DOCUMENTS\n * \n * In the local PouchDBs and remote CouchDBs, there is one document per key that has the following structure:\n * - user data documents: { _id: \"~vodle.user.UUU§KEY\", value: XXX }\n * - poll data documents: { _id: \"~vodle.poll.PPP§KEY\", value: YYY }\n * - voter data documents: { _id: \"~vodle.poll.PPP.voter.VVV§REST_OF_KEY\", value: YYY }\n * \n * In this, UUU is the hash of the user's email address plus \"§\" plus their password,\n * PPP is a poll id, and VVV is a voter id.\n * KEY the full key, REST_OF_KEY the key without the part \"voter.ZZZ§\".\n * XXX is a value encrypted with the user's password, and YYY is a value encrypted with the poll password. \n * In this way, no-one can infer the actual owner of a document \n * and no unauthorized person can read the actual values.\n * Note that voter documents are encrypted with the poll password rather than the voter's own password\n * so that all voters in the poll can read all other voters' ratings and delegations. \n * \n * \n * MAPPING DOCUMENTS TO DATABASE USERS\n * \n * The part of the document _id between '~' and \"§\" is the database username that is used to \n * create or update the document: 'vodle.user.UUU', 'vodle.poll.PPP', and 'vodle.poll.PPP.voter.VVV'.\n * The database users 'vodle.user.UUU' and 'vodle.poll.PPP.voter.VVV' have the user's password \n * as their password, while the database user 'vodle.poll.PPP' has the poll password as its password.\n * Other database users only have read access to the document, but are only able to make \n * sense of its contents if they have the correct password used for encrypting the value.\n * In this way, no unauthorized person can modify any value.\n * \n * \n * REMOTE COUCHDB CONFIGURATION\n * \n * Each used remote CouchDB is identified by the URL of a CouchDB server (!) \n * (rather than the URL of a database contained in that server!).\n * The CouchDB server must provide:\n * - a user database named '_users' (which is the standard name for user databases)\n * - a database named 'vodle' that will contain the data\n * - a user named 'vodle' that has write access to both (!) these databases.\n * \n * The user 'vodle' will be used by the vodle app to automatically create the other database users\n * ('vodle.user.UUU', 'vodle.poll.PPP', and 'vodle.poll.PPP.voter.VVV')\n * when a user logs in the first time, changes their password, creates a new poll, \n * or starts participating in a poll as a voter.\n * This way the database administrator only needs to be involved when setting up the database initially,\n * but not later on to create users.\n * \n * Although the database user 'vodle' can create users, it cannot delete or modify users or read their passwords.\n * Also, neither the database user 'vodle' or 'vodle.poll.PPP' can change their own password.\n * This way, no-one can delete or overtake the database users 'vodle.user.UUU' or 'vodle.poll.PPP.voter.VVV'\n * of any other person or prevent others from accessing their personal, poll, or voter data.\n * \n */\n\n/** TODO:\n- ignore vids that have not provided a valid signature document\n- if voter keys are individualized (not at first), ignore vids that use a signature some other vid uses as well\n- at poll creation, write a pubkey document for each valid voter key, giving each key a random key id\n- a valid signature document has _id ~vodle.voter.<vid>§signature_<key id> and value signed(key id)\n*/\n\n\nconst user_doc_id_prefix = \"~vodle.user.\", poll_doc_id_prefix = \"~vodle.poll.\";\n\nfunction get_poll_key_prefix(pid:string) {\n  return 'poll.' + pid + '.';\n}\n\n// sudo docker run -e COUCHDB_USER=admin -e COUCHDB_PASSWORD=password -p 5984:5984 -d --name test-couchdb couchdb\n\n// some user data keys are only stored locally and not synced to a remote CouchDB:\nconst local_only_user_keys = ['local_language', 'email', 'password', 'db', 'db_from_pid', 'db_other_server_url', 'db_custom_password', 'db_server_url', 'db_password'];\n// some of these trigger a move from one remote user dvb to another when changed:\nconst keys_triggering_data_move = ['email', 'password', 'db', 'db_from_pid', 'db_from_pid_server_url', 'db_from_pid_password', 'db_other_server_url','db_custom_password'];\n\n// some poll and voter data keys are stored in the user db rather than in the poll db:\nconst poll_keystarts_in_user_db = [\n  'creator', \n  'db', 'db_from_pid', 'db_other_server_url', 'db_custom_password', 'db_server_url', 'db_password', \n  'password', 'myvid', \n  'del_private_key', 'del_nickname', 'del_from', \n  'have_seen', 'have_acted', 'has_been_notified_of_end', 'has_results', 'have_seen_results',\n  'poll_page',\n  'simulated_ratings',\n  'final_rand', 'winner'\n];\n\nconst user_keys_unencrypted = ['consent', 'last_access'];\n\nconst poll_keystarts_requiring_due = ['state', 'option'];\nconst voter_subkeystarts_requiring_due = ['rating', 'del_request', 'del_response']; \n\n// ENCRYPTION:\n\nconst textEncoder = new TextEncoder();\n\nfunction encrypt_deterministically(value, password:string) {\n  const aesEncryptor = CryptoES.algo.AES.createEncryptor(CryptoES.enc.Utf8.parse(password), { iv: iv });\n  const result = aesEncryptor.process(''+value).toString()+aesEncryptor.finalize().toString(); \n  return result;\n}\n\nfunction encrypt(value, password:string): string {\n  try {\n    const result = CryptoES.AES.encrypt(''+value, password).toString(); \n    return result;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction decrypt(value:string, password:string): string {\n  try {\n    const temp = CryptoES.AES.decrypt(value, password);\n    // FIXME: sometimes we get a malformed UTF-8 error on toString: \n    const result = temp.toString(CryptoES.enc.Utf8);\n    return result;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction myhash(what): string {\n  // we use Blake2s since it is fast and more reliable than MD5\n  const blake2s = new BLAKE2s(environment.data_service.hash_n_bytes); // 16? 32?\n  blake2s.update(textEncoder.encode(what.toString())); \n  return blake2s.hexDigest();\n}\n\n// TYPES:\n\nexport type del_option_spec_t = {type: \"+\" | \"-\", oids: Array<string>};\nexport type del_request_t = {option_spec: del_option_spec_t, public_key: string};\nexport type del_response_t = {option_spec: del_option_spec_t};\nexport type del_signed_response_t = string;\nexport type del_agreement_t = { // by pid, did\n  client_vid?: string,\n  delegate_vid?: string,\n  status?: \"pending\" | \"agreed\" | \"declined\" | \"revoked\",\n  accepted_oids?: Set<string>, // oids accepted for delegation by delegate\n  active_oids?: Set<string> // among those, oids currently activated for delegation by client\n};\nexport type news_t = {\n  key: string,\n  class: string,\n  pid?: string,\n  title: string,\n  body?: string,\n  auto_dismiss: boolean  // whether this is automatically dismissed when seen\n}\n\n// TODO: add pid_t, vid_t, oid_t, did_t to prevent confusion! \n\n// SERVICE:\n\n// attributes of DataService to be stored in storage:\nconst state_attributes = [\n  \"user_cache\", \n  \"_pids\", \n  \"_pid_oids\", \n  \"poll_caches\", \n  \"own_ratings_map_caches\", \n  \"proxy_ratings_map_caches\",\n  \"effective_ratings_map_caches\",\n  \"max_proxy_ratings_map_caches\",\n  \"argmax_proxy_ratings_map_caches\",\n  \"outgoing_dids_caches\",\n  \"incoming_dids_caches\",\n  \"delegation_agreements_caches\",\n  \"direct_delegation_map_caches\",\n  \"inv_direct_delegation_map_caches\",\n  \"indirect_delegation_map_caches\",\n  \"inv_indirect_delegation_map_caches\",\n  \"effective_delegation_map_caches\",\n  \"inv_effective_delegation_map_caches\",\n  \"tally_caches\",\n  \"news_keys\"\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService implements OnDestroy {\n\n  private G: GlobalService;\n  \n  private restored_user_cache = false;\n  private restored_poll_caches = false;\n\n  // current page, used for notifying of changes method:\n  page: any;\n\n  private loadingElement: HTMLIonLoadingElement;\n\n  can_notify = false;\n\n  // DATA:\n\n  user_cache: {}; // temporary storage of user data\n  private local_only_user_DB: PouchDB.Database; // persistent storage of local-only user data\n  private local_synced_user_db: PouchDB.Database; // persistent local copy of synced user data\n\n  private remote_user_db: PouchDB.Database; // persistent remote copy of synced user data\n  private user_db_sync_handler;\n\n  private _pids: Set<string>; // list of pids known to the user\n  get pids() { return this._pids; }\n  private _pid_oids: Record<string, Set<string>>;\n\n  private poll_caches: Record<string, {}>; // temporary storage of poll data\n  private local_poll_dbs: Record<string, PouchDB.Database>; // persistent local copies of this user's part of the poll data\n\n  private remote_poll_dbs: Record<string, PouchDB.Database>; // persistent remote copies of complete poll data\n  private poll_db_sync_handlers: Record<string, any>;\n\n  // Caches with redundant information, not stored in database:\n\n  // ratings by pid, oid, vid\n  own_ratings_map_caches: Record<string, Map<string, Map<string, number>>>; // redundant storage of ratings data, not stored in database\n  proxy_ratings_map_caches: Record<string, Map<string, Map<string, number>>>; // redundant storage of proxy ratings data, not stored in database\n  effective_ratings_map_caches: Record<string, Map<string, Map<string, number>>>; // redundant storage of effective ratings data, not stored in database\n\n  // (arg)max (over oids) proxy rating by pid, vid:\n  max_proxy_ratings_map_caches: Record<string, Map<string, number>>; // redundant storage of max proxy ratings data, not stored in database \n  argmax_proxy_ratings_map_caches: Record<string, Map<string, Set<string>>>; // redundant storage of oids having max proxy ratings data, not stored in database \n\n  outgoing_dids_caches: Record<string, Map<string, string>>; // did of delegation requests this voter issues, by pid, oid\n  incoming_dids_caches: Record<string, Map<string, [string, string, string]>>; // [from, url, status] of received delegation request links by pid, did \n\n  delegation_agreements_caches: Record<string, Map<string, del_agreement_t>>; // by pid, did\n\n  direct_delegation_map_caches: Record<string, Map<string, Map<string, string>>>; // redundant storage of direct delegation data, not stored in database\n  inv_direct_delegation_map_caches: Record<string, Map<string, Map<string, Set<string>>>>; // redundant storage of inverse direct delegation data, not stored in database\n  indirect_delegation_map_caches: Record<string, Map<string, Map<string, Set<string>>>>; // redundant storage of indirect delegation data, not stored in database\n  inv_indirect_delegation_map_caches: Record<string, Map<string, Map<string, Set<string>>>>; // redundant storage of inverse indirect delegation data, not stored in database\n  effective_delegation_map_caches: Record<string, Map<string, Map<string, string>>>; // redundant storage of effective delegation data, not stored in database\n  inv_effective_delegation_map_caches: Record<string, Map<string, Map<string, Set<string>>>>; // redundant storage of inverse effective delegation data, not stored in database\n\n  tally_caches: Record<string, {}>; // temporary storage of tally data, not stored in database\n\n  news_keys: Set<string>;\n\n  // LYFECYCLE:\n\n  private uninitialized_pids: Set<string>; // temporary set of pids currently initializing \n\n  private _ready: boolean = false;\n  get ready() { return this._ready; }\n\n  private _loading: boolean = false;\n  get loading() { return this._loading; }\n\n  private need_poll_db_replication: Record<string, boolean> = {};\n\n  constructor(\n      private router: Router,\n      public loadingController: LoadingController,\n      public alertCtrl: AlertController,\n      public translate: TranslateService,\n      public storage: Storage,\n      @Inject(DOCUMENT) private document: Document\n      ) { \n  }\n\n  ionViewWillLeave() {\n    this.save_state();\n  }\n\n  ngOnDestroy() {\n    console.log(\"DataService.ngOnDestroy entry\");\n    this.save_state();\n    console.log(\"DataService.ngOnDestroy exit\");\n  }\n\n  save_state(): Promise<any> {\n    this.G.L.entry(\"DataService.save_state\");\n/*\n    this.G.L.trace(\"DataService.save_state _pids\", [...this._pids]);\n    this.G.L.trace(\"DataService.save_state _pid_oids\", JSON.stringify(this._pid_oids));\n    for (const pid in this._pid_oids) {\n      this.G.L.trace(\"DataService.save_state _pid_oids\", pid, [...this._pid_oids[pid]]);\n    }\n*/\n    const state = {};\n    for (const a of state_attributes) {\n      state[a] = this[a];\n    }\n    this.G.L.exit(\"DataService.save_state\");\n    if (!this.storage) {\n      return null;\n    }\n    return this.storage.set('state', state)\n  }\n\n  // INITIALIZATION\n\n  /** Initialization process overview\n      -------------------------------\n\n    TODO: update this overview comment to the actual process and to renamed method names!\n\n  init()\n  `–– try restoring caches from storage \n      init_databases()\n      `– asynchronously: \n        process_local_only_user_docs()\n        |– if necessary, first redirect to email and password prompt on login page \n        `– email_and_password_exist()\n            |\n            |– asynchronously: \n            |  local_user_docs2cache()\n            |  |– doc2user_cache() for each doc\n            |  |  `– for each new poll id:\n            |  |     asynchronously:\n            |  |     start_poll_initialization()\n            |  |     `– local_poll_docs2cache()\n            |  |        `– doc2user_cache() for each doc\n            |  |\n            |  |– once all user docs are processed:\n            |  |  for each new poll id:\n            |  |  connect_to_remote_poll_db()\n            |  |  |– get_remote_connection()\n            |  |  `– start_poll_sync()\n            |  |     `– handle_poll_db_change() whenever local or remote db has changed\n            |  |  \n            |  `– once all polls are initialized:\n            |     local_docs2cache_finished() \n            |     |– after_changes()\n            |     `– notify page that we are ready via <page>.onDataReady()\n            |\n            `– meanwhile: \n              |– if necessary, first redirect to db credentials prompt on login page \n              `– connect_to_remote_user_db()\n                  |– get_remote_connection()\n                  `– start_user_sync()\n                    `– handle_user_db_change() whenever local or remote db has changed\n  */\n\n  init(G: GlobalService) {\n    // called by GlobalService\n    G.L.entry(\"DataService.init\");\n    this.G = G;\n    // if necessary, show a loading animation:\n    this.show_loading();\n    // now start the complicated and partially asynchronous data initialization procedure (see overview in comment below):\n    // initialize caches that only live during current session:\n    this.user_cache = {};\n    this._pids = new Set();\n    this._pid_oids = {};\n    this.poll_caches = {};\n    this.tally_caches = {};\n    this.own_ratings_map_caches = {};\n    this.outgoing_dids_caches = {};\n    this.incoming_dids_caches = {};\n    this.delegation_agreements_caches = {};\n    this.direct_delegation_map_caches = {};\n    this.inv_direct_delegation_map_caches = {};\n    this.indirect_delegation_map_caches = {};\n    this.inv_indirect_delegation_map_caches = {};\n    this.effective_delegation_map_caches = {};\n    this.inv_effective_delegation_map_caches = {};\n    this.proxy_ratings_map_caches = {};\n    this.max_proxy_ratings_map_caches = {};\n    this.argmax_proxy_ratings_map_caches = {};\n    this.effective_ratings_map_caches = {};\n    this.news_keys = new Set();\n    // make sure storage exists:\n    this.storage.create();\n    // restore state from storage:\n    this.storage.get('state')\n    .then((state) => {\n      if (!!state) {\n        G.L.debug('DataService got state from storage');\n        for (const a of state_attributes) {\n          if ((a in state) && (state[a] != undefined)) {\n            this[a] = state[a];\n            G.L.trace(\"DataService restored attribute\", a, \"from storage\");\n          } else {\n            G.L.warn(\"DataService couldn't find attribute\", a, \"in storage\");\n          }\n        }\n        if ('user_cache' in state) {\n          this.restored_user_cache = true;\n        }\n        if (('_pids' in state) && ('poll_caches' in state)) {\n          this.restored_poll_caches = true;\n        }\n        this.G.L.trace(\"DataService.init _pids\", JSON.stringify(this._pids));\n        this.G.L.trace(\"DataService.init _pid_oids\", JSON.stringify(this._pid_oids));\n        for (const pid in this._pid_oids) {\n          this.G.L.trace(\"DataService.init _pid_oids\", pid, [...this._pid_oids[pid]]);\n        }  \n      } else {\n        G.L.warn('DataService could not get state from storage (empty)', state);\n      }\n    }).catch((error) => {\n      G.L.warn('DataService could not get state from storage:', error);\n    }).finally(() => {\n      this.init_databases();\n    });\n    this.init_notifications(false);\n\n    // test sodium:\n    this.test_sodium.bind(this)();\n\n    G.L.exit(\"DataService.init\");\n  }\n  \n  // User data initialization:\n\n  private init_databases() {\n    this.G.L.entry(\"DataService.init_databases\");\n\n    // access locally stored data and get some statistics about it:\n    this.local_only_user_DB = new PouchDB('local_only_user', {auto_compaction: true});\n\n    /* deactivated for performance:\n    this.local_only_user_DB.info()\n    .then(doc => { \n\n      this.G.L.debug(\"DataService local_only_user_DB info\", doc);\n\n    }).catch(err => {\n\n      this.G.L.error(\"DataService local_only_user_DB error\", err);\n\n    });\n    */\n\n    this.local_synced_user_db = new PouchDB('local_synced_user', {auto_compaction: true});\n\n    /* deactivated for performance:\n    this.local_synced_user_db.info()\n    .then(doc => { \n\n      this.G.L.debug(\"DataService local_synced_user_DB info\", doc);\n\n    }).catch(err => {\n\n      this.G.L.error(\"DataService local_synced_user_DB error\", err);\n\n    });\n    */\n\n    this.uninitialized_pids = new Set();\n    this.local_poll_dbs = {};\n    this.remote_poll_dbs = {};\n    this.poll_db_sync_handlers = {};\n\n    if (this.restored_user_cache) {\n      // user_cache was restored from storage.\n\n      this.after_local_only_user_cache_is_filled();\n\n    } else {\n      // try restoring from local PouchDB:\n\n      this.user_cache = {};\n      // ASYNC:\n      // Now start filling the temporary session cache with the persistent local data and syncing with remote data.\n      // Because of PouchDB, this must be done asynchronously.\n      // First, we fetch all local-only docs:\n      this.local_only_user_DB.allDocs({\n        include_docs: true\n      }).then(\n\n        // process them:\n        this.process_local_only_user_docs.bind(this)\n\n      ).catch(err => {\n\n        this.G.L.error(err);\n\n      });\n    }\n\n    this.G.L.exit(\"DataService.init_databases\");\n  }\n\n  private process_local_only_user_docs(result) {\n    this.G.L.entry(\"DataService.process_local_only_user_docs\");\n    // copy data from local-only docs to cache:\n    for (const row of result.rows) {\n      const doc = row.doc, key = doc['_id'], value = doc['value'];\n      this.user_cache[key] = value;\n      this.G.L.trace(\"DataService.process_local_only_user_docs filled user cache with key\", key, \"and value\", value);\n      if (key=='local_language') {\n        // adjust app language:\n        const used_lang = (value||'')!=''?value:environment.default_lang;\n        this.translate.use(used_lang);\n        this.document.documentElement.lang = used_lang; \n      }\n    }\n    this.after_local_only_user_cache_is_filled();\n    this.G.L.exit(\"DataService.process_local_only_user_docs\");\n  }\n\n  private after_local_only_user_cache_is_filled() {\n    this.G.L.entry(\"DataService.after_user_cache_is_filled\");\n    // check if email and password are set:\n    if ((this.user_cache['email']||'')=='' || (this.user_cache['password']||'')=='') {\n      this.G.L.info(\"DataService found empty email or password, redirecting to login page.\");\n      this.hide_loading();\n      if (!this.router.url.includes('/login')) {\n        const current_url = encodeURIComponent(this.router.url);\n        this.router.navigate([(this.user_cache['local_language']||'')==''?'/login/start/'+current_url:'/login/used_before/'+current_url]);\n      }\n    } else {\n      this.email_and_password_exist();\n    }\n    this.G.L.exit(\"DataService.after_user_cache_is_filled\");\n  }\n\n  private email_and_password_exist() {\n    this.G.L.entry(\"DataService.email_and_password_exist: email\", \n      this.user_cache['email'], \", password\", this.user_cache['password']);\n\n    if (this.restored_user_cache) {\n      // user_cache was restored from storage.\n\n      this.init_poll_data();\n\n    } else {\n      // try restoring from local PouchDB:\n\n      // ASYNC:\n      // while remote synchronisation is happening (potentially slow, to be started below), \n      // already fetch all current local versions of synced docs:\n      this.local_synced_user_db.allDocs({\n        include_docs:true\n      }).then(result => {\n\n        this.local_user_docs2cache.bind(this)(result);\n\n      }).catch(err => {\n\n        this.G.L.error(\"DataService could not read local_synced_user_DB\", err);\n\n      });\n    }\n\n    // check if db credentials are set:\n    if (this.has_user_db_credentials()) {\n\n      // ASYNC:\n      // connect to remote and start sync:\n      this.connect_to_remote_user_db()\n      .then(success => {\n\n        if (this.router.url.includes('/login')) {\n          this.G.remove_spinning_reason(\"login\");\n          this.router.navigate(['/login/connected/' + ((!!this.page) ? this.page.then_url || '' : '')]);\n        } \n\n      }).catch(err => {\n\n        this.G.L.warn(\"DataService could not connect to remote user db\", err);\n\n      });\n\n    } else {\n      this.G.L.warn(\"DataService found insufficient db credentials, redirecting to login page.\");\n      this.router.navigate(['/login/db_credentials/missing']);\n      // TODO: make that page\n    }\n    this.G.L.exit(\"DataService.email_and_password_exist\"); \n  }\n\n  private init_poll_data() {\n    // called when user_cache could be restored from storage and email and password exist.\n    // checks for existence of all poll caches.\n    if (!this.restored_poll_caches) {\n      let initializing_polls = false;\n      // TODO: go through user cache for pids\n      for (const key in this.user_cache) {\n        if (this.check_whether_poll_or_option(key, this.user_cache[key])) {\n          initializing_polls = true;\n        }\n      }\n    }    \n    this.local_docs2cache_finished();\n  }\n\n  private has_user_db_credentials() {\n    // return whether poll db credentials are nonempty:\n    this.G.S.compute_db_credentials();\n    return this.getu('db_server_url')!='' && this.getu('db_password')!=''; // && !!this.email_and_pw_hash();\n  }\n\n  private local_user_docs2cache(result) {\n    // called whenever a connection to a remote user db was established\n    this.G.L.entry(\"DataService.local_user_docs2cache\");\n    // decrypt and process all synced docs:\n    let initializing_polls = false;\n    for (const row of result.rows) {\n      const [dummy, initializing_poll] = this.doc2user_cache(row.doc);\n      initializing_polls = initializing_polls || initializing_poll;\n    }\n    if (!initializing_polls) {\n      this.local_docs2cache_finished();\n    } // else that will only be called after poll initialization has finished.\n    this.G.L.exit(\"DataService.local_user_docs2cache\");\n  }\n\n  private connect_to_remote_user_db() {\n    // called at initialization and whenever db credentials were changed\n    this.G.L.entry(\"DataService.connect_to_remote_user_db\");\n    const user_password = this.user_cache['password'];\n    const user_db_private_username = \"vodle.user.\" + this.get_email_and_pw_hash();\n\n    const promise = new Promise((resolve, reject) => {\n\n      // ASYNC:\n      this.get_remote_connection(\n        this.getu('db_server_url'), this.getu('db_password'),\n        user_db_private_username, user_password\n      ).then(db => { \n\n        this.remote_user_db = db;\n        // start synchronisation asynchronously:\n        this.start_user_sync();\n\n        // store login month:\n        const now = new Date();\n        this.setu('last_access', ''+now.getUTCFullYear()+'/'+String(now.getUTCMonth()+1).padStart(2, '0'));\n\n        // RESOLVE:\n        resolve(true);\n\n      }).catch(err => {\n\n        this.G.L.warn(\"DataService.connect_to_remote_user_db failed, redirecting to login page\", err);\n        // TODO: if no network, notify and try again when network available. if wrong url or password, ask again for credentials. if wrong permissions, notify to contact db admin. also set 'ready' to false?\n        this.router.navigate(['/login/db_credentials/failed']);\n        // TODO: make that page\n\n        // REJECT:\n        reject(err);\n\n      });\n\n    });\n\n    this.G.L.exit(\"DataService.connect_to_remote_user_db\");\n    return promise;\n  }\n\n  // Poll data initialization:\n\n  private get_local_poll_db(pid:string) {\n    if (!(pid in this.local_poll_dbs)) {\n      this.local_poll_dbs[pid] = new PouchDB('local_poll_'+pid, {auto_compaction: true});\n      this.G.L.info(\"DataService.get_local_poll_db new poll db\", pid, this.local_poll_dbs[pid]);\n      this.need_poll_db_replication[pid] = true;\n    } \n    return this.local_poll_dbs[pid];\n  }\n\n  private ensure_local_poll_data(pid:string) {\n    // start fetching poll data from local poll db:\n    this.G.L.entry(\"DataService.ensure_local_poll_data\", pid);\n    this._ready = false;\n    this.uninitialized_pids.add(pid);\n    this.ensure_poll_cache(pid);\n    const lpdb = this.get_local_poll_db(pid);\n\n    if (\"state\" in this.poll_caches[pid]) {\n      this.G.L.trace(\"DataService.ensure_local_poll_data nothing to do\", pid);\n      // poll cache was restored from storage.\n      this._pids.add(pid);\n\n    } else {\n      // this poll's cache was not reconstructed properly from storage, so get it from local PouchDB:\n\n      // ASYNC:\n      // fetch all docs from local poll db:\n      lpdb.allDocs({\n        include_docs: true\n      }).then(result => {\n\n        this.local_poll_docs2cache.bind(this)(pid, result)\n\n      }).catch(err => {\n\n        this.G.L.error(\"DataService.ensure_local_poll_data could not fetch all docs\", pid, err);\n\n      }).finally(() => {\n\n        this.uninitialized_pids.delete(pid);\n        this.G.L.trace(\"DataService.ensure_local_poll_data no. of still uninitialized pids:\", this.uninitialized_pids.size);\n        if (this.uninitialized_pids.size == 0) {\n          this.local_docs2cache_finished();\n        }  \n\n      });\n    }\n    this.G.L.exit(\"DataService.ensure_local_poll_data\", pid);\n  }\n\n  private local_poll_docs2cache(pid: string, result) {\n    this.G.L.entry(\"DataService.local_poll_docs2cache\", pid);\n    // decrypt and process all synced docs:\n    let local_changes = false;\n    for (const row of result.rows) {\n      local_changes = local_changes || this.doc2poll_cache(pid, row.doc);\n    }\n    this._pids.add(pid);\n    if (local_changes) {\n      this.save_state();\n    }\n    this.G.L.exit(\"DataService.local_poll_docs2cache\", pid);\n  }\n\n  get_user_doc_selector(email_and_pw_hash: string): any {\n    return { \n      \"_id\": {\n        \"$gte\": user_doc_id_prefix + email_and_pw_hash + \"§\",\n        \"$lt\": user_doc_id_prefix + email_and_pw_hash + '¨'\n      }\n    }\n  }\n\n  get_poll_doc_selector(pid: string): any {\n    return { \n      \"$or\": [\n        {\n          \"_id\": {\n            \"$gte\": poll_doc_id_prefix + pid + \"§\",\n            \"$lt\": poll_doc_id_prefix + pid + '¨'\n          }\n        },\n        {\n          \"_id\": {\n            \"$gte\": poll_doc_id_prefix + pid + '.voter.',\n            \"$lt\": poll_doc_id_prefix + pid + '.voter/'\n          }\n        }\n      ]\n    }\n  }\n\n  connect_to_remote_poll_db(pid: string, wait_for_replication=false): Promise<any> {\n    // called at poll initialization or when joining a poll\n    this.G.L.entry(\"DataService.connect_to_remote_poll_db\", pid, wait_for_replication);\n    // In order to be able to write our own voter docs, we connect as a voter dbuser (not as a poll dbuser!),\n    // who has the same password as the overall user:\n    const poll_db_private_username = \"vodle.poll.\" + pid + \".voter.\" + this.getp(pid, 'myvid');\n    var promise: Promise<any>\n\n    if (wait_for_replication) {\n\n      // connect, replicate one, wait for it to finish, then start continuous sync and return:\n\n      promise = new Promise((resolve, reject) => {\n\n        // ASYNC:\n        this.get_remote_connection(\n          this.getp(pid, 'db_server_url'), this.getp(pid, 'db_password'),\n          poll_db_private_username, this.G.S.password\n        ).then(db => { \n  \n          this.remote_poll_dbs[pid] = db;\n  \n          // replicate once and wait for it to finish:\n        \n          this.G.L.trace(\"DataService.connect_to_remote_poll_db about to start one-time replication\", pid);\n          // see here for possible performance improving options: https://pouchdb.com/api.html#replication\n          this.get_local_poll_db(pid).replicate.from(this.remote_poll_dbs[pid], {\n              retry: true,\n              batch_size: 1000, // see https://docs.couchdb.org/en/stable/api/database/changes.html?highlight=_changes\n              include_docs: true,\n              selector: this.get_poll_doc_selector(pid)\n          })/* on('complete') is never called, so we cannot do it this way but must check for 0 pending inside 'change' (see below):\n          .on('complete', function () {\n\n            this.G.L.trace(\"DataService.connect_to_remote_poll_db completed one-time replication\", pid);\n\n            this.need_poll_db_replication[pid] = false;\n\n            // now start synchronisation asynchronously:\n            this.start_poll_sync.bind(this)(pid);\n    \n            // RESOLVE:\n            resolve(true);\n\n          })*/\n          .on('change', change => {\n\n            this.G.L.trace(\"DataService.connect_to_remote_poll_db one-time replication received change\", change);\n\n            // process incoming docs:\n            this.handle_poll_db_change.bind(this)(pid, change, false);\n\n            if (change.pending == 0) {\n              // replication completed\n\n              this.G.L.trace(\"DataService.connect_to_remote_poll_db completed one-time replication\", pid, this.poll_caches[pid]['state']);\n\n              this.need_poll_db_replication[pid] = false;\n\n              if (this.poll_caches[pid]['state'] == 'closed') {\n                this.G.L.trace(\"DataService.connect_to_remote_poll_db no further syncing of closed poll\", pid);\n              } else {\n                // now start synchronisation asynchronously:\n                this.start_poll_sync.bind(this)(pid);\n              }\n      \n              // RESOLVE:\n              resolve(true);  \n            }\n\n          }).on('error', function (err) {\n\n            this.G.L.warn(\"DataService.connect_to_remote_poll_db failed\", pid, err);\n  \n            // REJECT:\n            reject(err);\n  \n          });\n          this.G.L.trace(\"DataService.connect_to_remote_poll_db started one-time replication\", pid);\n  \n        }).catch(err => {\n  \n          this.G.L.warn(\"DataService.connect_to_remote_poll_db failed\", pid, err);\n  \n          // REJECT:\n          reject(err);\n  \n        });\n  \n      });\n\n    } else {\n\n      // connect, start continuous sync and return:\n\n      promise = new Promise((resolve, reject) => {\n\n        // ASYNC:\n        this.get_remote_connection(\n          this.getp(pid, 'db_server_url'), this.getp(pid, 'db_password'),\n          poll_db_private_username, this.G.S.password\n        ).then(db => { \n  \n          this.remote_poll_dbs[pid] = db;\n  \n          if (this.poll_caches[pid]['state'] == 'closed') {\n            this.G.L.trace(\"DataService.connect_to_remote_poll_db no more syncing of closed poll\", pid);\n          } else {\n            // start synchronisation asynchronously:\n            this.start_poll_sync(pid);\n          }\n\n          // RESOLVE:\n          resolve(true);\n  \n        }).catch(err => {\n  \n          this.G.L.warn(\"DataService.connect_to_remote_poll_db failed\", pid, err);\n  \n          // REJECT:\n          reject(err);\n  \n        });\n  \n      });\n  \n    }\n\n    this.G.L.exit(\"DataService.connect_to_remote_poll_db\", pid);\n    return promise;\n  }\n\n  // End of initialization:\n\n  private local_docs2cache_finished() {\n    // called whenever content of local docs has fully been copied to cache\n    this.G.L.entry(\"DataService.local_user_docs2cache_finished\");\n    this.after_changes();\n    // mark as ready, dismiss loading animation, and notify page:\n    this.G.L.info(\"DataService READY\");\n    this._ready = true;\n    this.hide_loading();\n    if (this.page && this.page.onDataReady) this.page.onDataReady();\n    this.G.L.exit(\"DataService.local_user_docs2cache_finished\");\n  }\n\n  // HOOKS FOR OTHER SERVICES:\n\n  wait_for_user_db(): Promise<any> {\n    // TODO: is there a better way for doing this?\n    return this.local_synced_user_db.info();\n  }\n\n  wait_for_poll_db(pid: string): Promise<any> {\n    // TODO: is there a better way for doing this?\n    if (pid in this.local_poll_dbs) {\n      return this.local_poll_dbs[pid].info();\n    } else {\n      return new Promise<any>((resolve, reject) => {resolve(true)});\n    }\n  }\n\n  change_poll_state(p: Poll, new_state: string) {\n    this._pids.add(p.pid);\n\n    // called by PollService when changing state\n    const pid = p.pid, prefix = get_poll_key_prefix(pid);\n    this.G.L.entry(\"DataService.change_poll_state\", pid, new_state);\n    const old_state = this.user_cache[prefix + 'state'];\n\n    if (old_state == 'draft') {\n\n      this.G.L.debug(\"DataService.change_poll_state old state was draft, so moving data from user db to poll db and then starting sync\", pid, new_state);\n\n      // first store due in polldb so that it can be used for the other items:\n      this._setp_in_polldb(pid, 'due', p.due.toISOString());\n      // now wait for poll db before continuing:\n      this.wait_for_poll_db(pid).finally(() => {\n        // move data from local user db to poll db.\n        for (const [ukey, value] of Object.entries(this.user_cache)) {\n          if (ukey.startsWith(prefix)) {\n            // used db entry belongs to this poll.\n            const key = ukey.substring(prefix.length),\n                  pos = (key+'.').indexOf('.'),\n                  subkey = (key+'.').slice(0, pos);\n            if ((key != 'state') && (key != 'due') && !poll_keystarts_in_user_db.includes(subkey)) {\n              if (this._setp_in_polldb(pid, key, value as string)) {\n                this.delu(ukey);\n              } else {\n                this.G.L.warn(\"DataService.change_poll_state couldn't move\", pid, ukey, key);\n              }\n            }\n          }\n        }\n        // finally, start synching with remote poll db:\n        // check if db credentials are set:\n        if (this.poll_has_db_credentials(pid)) {\n          this.G.L.trace(\"DataService.change_poll_state found remote poll db credentials\");\n          // connect to remote and start sync:\n          this.connect_to_remote_poll_db(pid).catch(err => {\n            this.G.L.warn(\"DataService.change_poll_state couldn't start remote poll db syncing for\", pid, err);\n            // TODO\n          });\n        } else {\n          this.G.L.warn(\"DataService.change_poll_state couldn't find remote poll db credential for\", pid);\n          // TODO\n        }\n      });\n    }\n\n    if (new_state != 'draft' && new_state != 'closing') {\n      // only \"running\" and \"closed\" are stored in poll db.\n      this._setp_in_polldb(pid, 'state', new_state); \n    }\n    this.setu(prefix + 'state', new_state);\n    this.G.L.exit(\"DataService.change_poll_state\");\n  }\n\n  replicate_once(pid: string): Promise<boolean> {\n    this.G.L.entry(\"DataService.replicate_once\", pid);\n    return new Promise<boolean>((resolve, reject) => {\n\n      // see here for possible performance improving options: https://pouchdb.com/api.html#replication\n      this.get_local_poll_db(pid).replicate.from(this.remote_poll_dbs[pid], {\n//          since: this.poll_caches[pid]['last_seq'] || 0,\n          retry: true,\n          batch_size: 1000, // see https://docs.couchdb.org/en/stable/api/database/changes.html?highlight=_changes\n          include_docs: true,\n          selector: this.get_poll_doc_selector(pid)\n      }).on('complete', msg => {\n\n        this.G.L.trace(\"DataService.replicate_once completed\", pid, msg);\n\n        this.need_poll_db_replication[pid] = false;\n\n        // RESOLVE:\n        resolve(true);  \n\n      }).on('change', change => {\n\n        this.G.L.trace(\"DataService.replicate_once received change\", change);\n\n        // process incoming docs:\n        this.handle_poll_db_change.bind(this)(pid, change, false);\n\n        if (change.pending == 0) {\n          // replication completed\n\n          this.G.L.trace(\"DataService.replicate_once completed\", pid);\n\n          this.need_poll_db_replication[pid] = false;\n\n          // RESOLVE:\n          resolve(true);  \n        }\n\n      }).on('error', function (err) {\n\n        this.G.L.warn(\"DataService.replicate_once failed\", pid, err);\n\n        // REJECT:\n        reject(err);\n\n      });\n      this.G.L.trace(\"DataService.replicate_once started one-time replication\", pid);\n    });\n  }\n\n  get_remote_poll_state_doc(pid: string): Promise<any> {\n    const _id = poll_doc_id_prefix + pid + \"§state\";\n    return this.remote_poll_dbs[pid].get(_id);\n  }\n\n  // HOOKS FOR PAGES:\n\n  login_submitted() {\n    // called by login page when all necessary login information was submitted on the login page\n    this.G.L.entry(\"DataService.login_submitted\");\n    this.show_loading();\n    if ((this.user_cache['db']||'')=='') {\n      this.G.S.db = 'central';\n    }\n    this.G.add_spinning_reason(\"login\");\n    const language = this.G.S.language,\n          email = this.G.S.email,\n          password = this.G.S.password;\n    this.G.S.language = this.G.S.email = this.G.S.password = \"\";\n    this.G.S.language = language;\n    this.G.S.email = email;\n    this.G.S.password = password;\n    this.email_and_password_exist();\n  }\n\n  // REMOTE CONNECTION METHODS:\n\n  private get_remote_connection(server_url:string, user_vodle_password:string,\n                                actual_db_username:string, actual_db_user_password:string\n                                ): Promise<PouchDB> {\n    // TODO: check network reachability!\n    /* \n    Get a remote connection to a couchdb for storing user, poll, or voter data.\n    For this, first connect as public user 'vodle', \n    check whether private user exist as db user,\n    if necessary, generate it in the db, then connect again as this user,\n    finally try creating/updating a timestamp file.\n    */ \n    this.G.L.entry(\"DataService.get_remote_connection\", server_url, user_vodle_password, actual_db_username, actual_db_user_password);\n    // since all this may take some time,\n    // make clear we are working:\n    this.show_loading();\n\n    // Then return a promise to start the process:\n    const promise = new Promise((resolve, reject) => {\n\n      // first connect to database \"_users\" with public credentials:\n      const conn_as_user_vodle = this.get_couchdb(server_url+\"/_users\", \"vodle\", user_vodle_password);\n\n      // ASYNC:\n      // try to get info to see if credentials are valid:\n      this.G.L.debug(\"DataService.get_remote_connection trying to get info for \"+server_url+\"/_users as user vodle\");\n      conn_as_user_vodle.info()\n      .then(doc => { \n\n        this.G.L.debug(\"DataService logged into \"+server_url+\"/_users as user 'vodle'. Info:\", doc);\n\n        // then connect to database \"vodle\" with private credentials:\n        const conn_as_actual_user = this.get_couchdb(server_url+\"/vodle\", actual_db_username, actual_db_user_password);\n\n        // ASYNC:\n        // try to get info to see if credentials are valid:\n        this.G.L.debug(\"DataService.get_remote_connection trying to get info for \"+server_url+\"/vodle as actual user \"+actual_db_username);\n        conn_as_actual_user.info()\n        .then(doc => { \n\n          this.G.L.debug(\"DataService logged into \"+server_url+\" as actual user. Info:\", doc);\n\n          // ASYNC:\n          this.test_remote_connection(conn_as_actual_user, actual_db_username, actual_db_user_password)\n          .then(success => {\n\n            // RESOLVE:\n            resolve(conn_as_actual_user);\n\n          }).catch(err => {\n\n            // Since we could log in but not write, the db must be configured wrong:\n            this.G.L.error(\"DataService.get_remote_connection could not write in database \"+server_url+\"/vodle as user \"+actual_db_username+ \". Please contact the database server admin!\", err);\n\n            // REJECT:\n            reject([\"write failed\", err]);\n\n          }) \n\n        }).catch(err => {\n\n          this.G.L.debug(\"DataService.get_remote_connection could not log into \"+server_url+\"/vodle as actual user:\", err);\n          this.G.L.info(\"DataService.get_remote_connection: logging in for the first time as this user? Trying to register user \"+actual_db_username+\" in database.\");\n\n          // ASYNC:\n          // try to generate new user:\n          conn_as_user_vodle.put({ \n            _id: \"org.couchdb.user:\"+actual_db_username,\n            name: actual_db_username, \n            password: actual_db_user_password,\n            type: \"user\",\n            roles: [],\n            comment: \"user generated by vodle\"\n          }).then(response => {\n\n            this.G.L.debug(\"DataService.get_remote_connection generated user \"+actual_db_username);\n\n            // connect again with private credentials:\n            const conn_as_actual_user = this.get_couchdb(server_url+\"/vodle\", actual_db_username, actual_db_user_password);\n            this.G.L.debug(\"DataService.get_remote_connection trying to get info for \"+server_url+\"/vodle as actual user \"+actual_db_username);\n\n            // ASYNC:\n            // try to get info to see if credentials are valid:\n            conn_as_actual_user.info()\n            .then(doc => { \n\n              this.G.L.debug(\"DataService.get_remote_connection logged into \"+server_url+\" as new actual user \"+actual_db_username+\". Info:\", doc);\n\n              // ASYNC:\n              this.test_remote_connection(conn_as_actual_user, actual_db_username, actual_db_user_password)\n              .then(success => {\n\n                this.G.L.trace(\"DataService.get_remote_connection has write access as \"+actual_db_username+\". All looks fine.\");\n\n                // RESOLVE:\n                resolve(conn_as_actual_user);\n\n              }).catch(err => {\n\n                // Since we could log in but not write, the db must be configured wrong, so notify user of this:\n                this.G.L.error(\"DataService could not write in database \"+server_url+\"/vodle as new user \"+actual_db_username+ \". Please contact the database server admin!\", err);\n\n                // REJECT:\n                reject([\"write failed\", err]);\n\n              }) \n\n            }).catch(err => {\n\n              this.G.L.debug(\"DataService.get_remote_connection could not log into \"+server_url+\"/vodle as newly generated user:\", err);\n              reject([\"private login failed\", err]);\n\n            });\n          \n          }).catch(err => {\n\n            this.G.L.error(\"DataService.get_remote_connection could not generate user \"+actual_db_username, err);\n\n            // REJECT:\n            reject([\"generate user failed\", err]);\n\n          });\n\n        });\n\n      }).catch(err => {\n\n        this.G.L.error(\"DataService.get_remote_connection could not log into \"+server_url+\"/_users as user 'vodle':\", err);\n\n        // REJECT:\n        reject([\"public login failed\", err]);\n\n      });\n\n    });\n\n    this.G.L.exit(\"DataService.get_remote_connection\");\n    return promise;\n  }\n\n  private get_couchdb(url:string, username:string, password:string) {\n    return new PouchDB(url, {\n      auth: {username: username, password: password},\n      skipSetup: true\n    });\n    // TODO: prevent Browser popup on 401?\n  }\n\n  private test_remote_connection(conn:PouchDB, private_username:string, private_password:string): Promise<boolean> {\n    // FIXME: sometimes this gives an\n    // ERROR Error: Uncaught (in promise): {\"status\": 409, \"name\": \"conflict\", \"message\": \"Document update conflict\"}\n    return new Promise((resolve, reject) => {\n\n      // testing is currently deactivated to speed up performance, \n      // so we simply:\n      resolve(true);\n\n      /*\n      // try creating or updating a timestamp document\n      const _id = \"~\"+private_username+\"§timestamp\", value = encrypt((new Date()).toISOString(), private_password);\n\n      // ASYNC:\n      conn.get(_id)\n      .then(doc => {\n\n        // doc exists, try updating with current time:\n        doc.value = value;\n        conn.put(doc)\n        .then(response => {\n\n          resolve(true);\n\n        }).catch(err => {\n\n          reject(err);\n\n        });\n\n      }).catch(err => {\n\n        // try generating new doc:\n        conn.put({_id:_id, value:value})\n        .then(response => {\n\n          resolve(true);\n\n        }).catch(err => {\n\n          reject(err);\n\n        });\n\n      });\n      */\n    });\n  }\n\n  // SYNCHRONISATION:\n\n  private start_user_sync(): boolean {\n    // try starting user data local <--> remote syncing:\n    this.G.L.entry(\"DataService.start_user_sync\");\n    var result: boolean;\n\n    if (this.remote_user_db) { \n      const email_and_pw_hash = this.get_email_and_pw_hash();\n      this.G.L.info(\"DataService starting user data sync\");\n\n      // ASYNC:\n      this.user_db_sync_handler = this.local_synced_user_db.sync(this.remote_user_db, {\n        // see options here: https://pouchdb.com/api.html#replication\n        live: true,\n        retry: true,\n        batch_size: 1000, // see https://docs.couchdb.org/en/stable/api/database/changes.html?highlight=_changes\n        // TODO: if the following works, also use it for poll dbs: \n        style: \"main_only\", // apparently not used\n        seq_interval: 1000, // \"  // apparently not used\n        revs: false,\n        // (until here)\n        include_docs: true,\n        selector: this.get_user_doc_selector(email_and_pw_hash)\n      }).on('change', this.handle_user_db_change.bind(this)\n      ).on('paused', () => {\n        // replication was paused\n        this.G.L.info(\"DataService pausing user data sync\");\n      }).on('active', () => {\n        // replication was resumed\n        this.G.L.info(\"DataService resuming user data sync\");\n      }).on('denied', err => {\n        // a document failed to replicate (e.g. due to permissions)\n        this.G.L.error(\"DataService user data sync denied\", err);\n      }).on('complete', info => {\n        // handle complete\n        this.G.L.info(\"DataService completed user data sync\", info);\n      }).on('error', err => {\n        // totally unhandled error (shouldn't happen)\n        this.G.L.error(\"DataService error at user data sync\", err);\n      });\n\n      result =  true;\n\n    } else {\n\n      result = false;\n\n    }\n    this.G.L.exit(\"DataService.start_user_sync\", result);\n    return result;\n  }\n\n  private start_poll_sync(pid:string): boolean {\n    // try starting poll data local <--> remote syncing:\n    this.G.L.entry(\"DataService.start_poll_sync\", pid);\n    var result: boolean;\n\n    if (this.remote_poll_dbs[pid]) { \n      this.G.L.info(\"DataService starting poll data sync\", pid);\n\n      // ASYNC:\n      this.poll_db_sync_handlers[pid] = this.get_local_poll_db(pid).sync(this.remote_poll_dbs[pid], {\n        live: true,\n        retry: true,\n        batch_size: 1000, // see https://docs.couchdb.org/en/stable/api/database/changes.html?highlight=_changes\n        include_docs: true,\n        selector: this.get_poll_doc_selector(pid)\n      }).on('change', change => {\n        this.handle_poll_db_change.bind(this)(pid, change);\n      }).on('paused', info => {\n        // replication was paused, usually because of a lost connection\n        this.G.L.info(\"DataService pausing poll data sync\", pid, this.G.P.polls[pid]._state);\n        const _ = window.navigator.onLine;\n        this.G.P.polls[pid].syncing = false;\n        this.G.remove_spinning_reason(pid);\n      }).on('active', info => {\n        // replication was resumed\n        this.G.L.info(\"DataService resuming poll data syncing\", pid, info);\n        const _ = window.navigator.onLine;\n        this.G.P.polls[pid].syncing = true;\n        this.G.add_spinning_reason(pid);\n      }).on('denied', err => {\n        // a document failed to replicate (e.g. due to permissions)\n        this.G.L.error(\"DataService poll data sync denied\", pid, err);\n      }).on('complete', info => {\n        // handle complete\n        this.G.L.info(\"DataService completed poll data sync\", pid, info);\n        const _ = window.navigator.onLine;\n        this.G.P.polls[pid].syncing = false;\n      }).on('error', err => {\n        // totally unhandled error (shouldn't happen)\n        this.G.L.error(\"DataService error at poll data sync\", pid, err);\n      });\n\n      result =  true;\n\n    } else {\n\n      result = false;\n\n    }\n    this.G.L.exit(\"DataService.start_poll_sync\", pid, result);\n    return result;\n  }\n\n  stop_poll_sync(pid: string) {\n    if (pid in this.G.D.poll_db_sync_handlers && !!this.G.D.poll_db_sync_handlers[pid]) {\n      this.G.D.poll_db_sync_handlers[pid].cancel();\n    }\n  }\n\n  // PUBLIC DATA ACCESS METHODS:\n\n  getu(key:string): string {\n    // get user data item\n    let value = this.user_cache[key] || '';\n    if (!value && key=='language') {\n      value = this.getu('local_language');\n    }\n    return value;\n  }\n\n  setu(key:string, value:string): boolean {\n    if (this.getu(key) == value) {\n      return true;\n    }\n    // set user data item\n    value = value || '';\n    if (key=='language') {\n      this.setu('local_language', value);\n    } else if (key=='local_language') {\n        const used_lang = value!=''?value:environment.default_lang;\n        this.translate.use(used_lang);\n        this.document.documentElement.lang = used_lang; \n    }\n    const old_values = {};\n    if (keys_triggering_data_move.includes(key)) {\n      // remember old credentials:\n      for (const k of keys_triggering_data_move) {\n        old_values[k] = this.user_cache[k];\n      }\n    }\n    this.user_cache[key] = value;\n    this.G.L.trace(\"DataService.setu\", key, value);\n    if (keys_triggering_data_move.includes(key)) {\n      this.move_user_data(old_values);\n    }\n    return this.store_user_data(key, this.user_cache, key);\n  }\n\n  delu(key:string) {\n    // delete a user data item\n    if (!(key in this.user_cache)) {\n      this.G.L.trace(\"DataService.delu cannot delete unknown key\", key);\n      return;\n    }\n    delete this.user_cache[key];\n    this.delete_user_data(key);\n  }\n\n  private pid_is_draft(pid): boolean {\n    return this.user_cache[get_poll_key_prefix(pid) + 'state'] == 'draft';\n  } \n\n  getp(pid:string, key:string): string {\n    // get poll data item\n    let value = null;\n    const pos = (key+'.').indexOf('.'),\n          subkey = (key+'.').slice(0, pos);\n    if (this.pid_is_draft(pid) || poll_keystarts_in_user_db.includes(subkey)) {\n      // draft polls' data is stored in user's database:\n      const ukey = get_poll_key_prefix(pid) + key;\n      value = this.user_cache[ukey] || '';\n    } else {\n      // other polls' data is stored in poll's own database:\n      this.ensure_poll_cache(pid);\n      value = this.poll_caches[pid][key] || '';\n    }\n    return value;\n  }\n\n  setp(pid:string, key:string, value:string): boolean {\n    // set poll data item\n    // register pid, oid if necessary:\n    this._pids.add(pid);\n    if (this.getp(pid, key) == value) {\n      return true;\n    }\n    if (key.startsWith('option.')) {\n      this.G.L.trace(\"DataService.setp option key\", pid, key, value);\n      if (!(pid in this._pid_oids)) {\n        this._pid_oids[pid] = new Set();\n      }\n      const keyend = key.slice('option.'.length), oid = keyend.slice(0, keyend.indexOf('.'));\n      this._pid_oids[pid].add(oid);\n      this.G.L.trace(\"DataService.setp option pid oid\", pid, oid, this._pid_oids[pid].size, [...this._pid_oids[pid]]);\n    }\n    // decide where to store data:\n    const pos = (key+'.').indexOf('.'),\n          subkey = (key+'.').slice(0, pos);\n    if (this.pid_is_draft(pid) || poll_keystarts_in_user_db.includes(subkey)) {\n      return this._setp_in_userdb(pid, key, value);\n    } else if (key.startsWith('option.')) {\n      if (!(key in this.poll_caches[pid])) {\n        return this._setp_in_polldb(pid, key, value);\n      } else {\n        this.G.L.error(\"DataService.setp change option attempted for existing entry\", pid, key, value);\n      }\n    } else {\n      this.G.L.error(\"DataService.setp non-local attempted for non-draft poll\", pid, key, value);\n    }\n  }\n\n  delp(pid:string, key:string) {\n    // delete a poll data item\n    // deregister pid, oid if necessary:\n    if (key == \"title\") {\n      this._pids.delete(pid);\n      delete this._pid_oids[pid];\n    }\n    if (key.startsWith('option.') && key.endsWith('name') && (pid in this._pid_oids)) {\n      this.G.L.trace(\"DataService.delp option key\", pid, key);\n      const keyend = key.slice('option.'.length), oid = keyend.slice(0, keyend.indexOf('.'));\n      this._pid_oids[pid].delete(oid);\n      this.G.L.trace(\"DataService.delp option pid oid\", pid, oid, this._pid_oids[pid].size, [...this._pid_oids[pid]]);\n    }\n    const pos = (key+'.').indexOf('.'),\n          subkey = (key+'.').slice(0, pos);\n    if (this.pid_is_draft(pid) || poll_keystarts_in_user_db.includes(subkey)) {\n      // construct key for user db:\n      const ukey = get_poll_key_prefix(pid) + key;\n      this.delu(ukey);\n    } else {\n      if (!(pid in this.poll_caches) || !(key in this.poll_caches[pid])) {\n        this.G.L.trace(\"DataService.delp cannot delete unknown combination\", pid, key);\n        return;\n      }\n      delete this.poll_caches[pid][key];\n      this.delete_poll_data(pid, key);\n    }      \n  }\n\n  getv(pid: string, key: string, vid?: string): string {\n    // get own voter data item\n    let value = null;\n    if (this.pid_is_draft(pid)) {\n      // draft polls' data is stored in user's database.\n      // construct key for user db:\n      const ukey = get_poll_key_prefix(pid) + this.get_voter_key_prefix(pid, vid) + key;\n      value = this.user_cache[ukey] || '';\n    } else {\n      // other polls' data is stored in poll's own database.\n      // construct key for poll db:\n      const pkey = this.get_voter_key_prefix(pid, vid) + key;\n//      this.G.L.trace(\"getv\", pid, key, vid, pkey)\n      this.ensure_poll_cache(pid);\n      value = this.poll_caches[pid][pkey] || '';\n    }\n    return value;\n  }\n\n  setv(pid: string, key: string, value: string): boolean {\n    /** Set a voter data item.\n     * If necessary, mark the database entry with poll's due date\n     * to allow couchdb validating that due date is not passed.\n     */\n    if (this.getv(pid, key) == value) {\n      return true;\n    }\n    // set voter data item\n    if (this.pid_is_draft(pid)) {\n      return this._setv_in_userdb(pid, key, value);\n    } else {\n      return this.setv_in_polldb(pid, key, value);\n    }\n  }\n\n  delv(pid: string, key: string) {\n    // delete a voter data item\n    if (this.pid_is_draft(pid)) {\n      const ukey = get_poll_key_prefix(pid) + this.get_voter_key_prefix(pid) + key;\n      delete this.user_cache[ukey];\n      this.delete_user_data(ukey);  \n    } else {\n      const pkey = this.get_voter_key_prefix(pid) + key;\n      this.ensure_poll_cache(pid);\n      delete this.poll_caches[pid][pkey];\n      this.delete_poll_data(pid, pkey); \n    }\n  }\n\n  // TODO: delv!\n\n  get_example_docs(): Promise<any> {\n    const promise = this.remote_user_db.allDocs({\n      include_docs: true,\n      startkey: 'examples§',\n      endkey: 'examplet',\n      inclusive_end: false,\n      limit: 50\n    });\n    return promise;\n  }\n\n  // OTHER METHODS:\n\n  private _setp_in_userdb(pid: string, key: string, value: string): boolean {\n    // set poll data item in user db:\n    value = value || '';\n    // construct key for user db:\n    const ukey = get_poll_key_prefix(pid) + key;\n    this.G.L.trace(\"DataService._setp_in_userdb\", pid, key, value);\n    this.user_cache[ukey] = value;\n    return this.store_user_data(ukey, this.user_cache, ukey);\n  }\n\n  private _setp_in_polldb(pid: string, key: string, value: string): boolean {\n    /** Set poll data item in poll db.\n     * If necessary, mark the database entry with poll's due date\n     * to allow couchdb validating that due date is not passed.\n     */ \n     value = value || '';\n    this.ensure_poll_cache(pid);\n    this.G.L.trace(\"DataService._setp_in_polldb\", pid, key, value);\n    this.poll_caches[pid][key] = value;\n    const keystart = key.slice(0, (key+'.').indexOf('.'));\n    return this.store_poll_data(pid, key, this.poll_caches[pid], key, \n                                poll_keystarts_requiring_due.includes(keystart));\n  }\n\n  private _setv_in_userdb(pid: string, key: string, value: string): boolean {\n    // set voter data item in user db:\n    value = value || '';\n    // construct key for user db:\n    const ukey = get_poll_key_prefix(pid) + this.get_voter_key_prefix(pid) + key;\n    this.G.L.trace(\"DataService._setv_in_userdb\", pid, key, value);\n    this.user_cache[ukey] = value;\n    return this.store_user_data(ukey, this.user_cache, ukey);\n  }\n\n  setv_in_polldb(pid: string, key: string, value: string, vid?: string): boolean {\n    /** Set voter data item in poll db.\n     * If necessary, mark the database entry with poll's due date\n     * to allow couchdb validating that due date is not passed.\n     */ \n    value = value || '';\n    // construct key for poll db:\n    const pkey = this.get_voter_key_prefix(pid, vid) + key;\n    this.ensure_poll_cache(pid);\n    this.G.L.trace(\"DataService.setv_in_polldb\", pid, key, value);\n    this.poll_caches[pid][pkey] = value;\n    const subkeystart = key.slice(0, (key+'.').indexOf('.'));\n    return this.store_poll_data(pid, pkey, this.poll_caches[pid], pkey, \n                                voter_subkeystarts_requiring_due.includes(subkeystart));\n  }\n\n  private async show_loading() {\n    this.G.L.entry(\"DataService.show_loading\");\n    this._loading = true;\n    // start showing a loading animation which will be dismissed when initialization is finished\n    this.loadingElement = await this.loadingController.create({\n      spinner: 'crescent'\n    });\n    // since the previous operation might take some time,\n    // only actually present the animation if data is not yet ready:\n    if (this._loading && !this._ready) {\n      // FIXME: why is the loadingElement not always dismissed?\n      // await this.loadingElement.present();     \n    }\n    if (!this._loading) this.hide_loading();\n    this.G.L.exit(\"DataService.show_loading\");\n  }\n  private hide_loading() {\n    if (this.loadingElement) this.loadingElement.dismiss();\n    this._loading = false;\n  }\n  \n  fix_url(url:string): string {\n    // make sure urls start with http:// or https://\n    if (!url) return null;\n    return (url.startsWith(\"http://\")||url.startsWith(\"https://\")) ? url : \"http://\" + url;\n  }\n\n  // DBs --> caches:\n\n  private handle_user_db_change(change) {\n    // called by PouchDB sync and replicate\n//    change = JSON.parse(JSON.stringify(change));\n    this.G.L.entry(\"DataService.handle_user_db_change\");\n    let local_changes = false;\n    if (change.deleted){\n      local_changes = this.handle_deleted_user_doc(change.doc);\n    } else if (!change.direction || change.direction == 'pull') {\n      // sometimes the actual change doc is one level deeper:\n      if (change.change) {\n        change = change.change;\n      }\n      for (const doc of change.docs) {\n        if (doc._deleted) {\n          local_changes = this.handle_deleted_user_doc(doc);\n        } else {\n          var dummy;\n          [local_changes, dummy] = this.doc2user_cache(doc);\n        }\n      }\n      if (change.last_seq) {\n        // store last_seq in local storage as reference point for next session's \"since\" value:\n        this.user_cache['user_last_seq'] = change.last_seq;\n        this.G.L.trace(\"DataService.handle_user_db_change stored last_seq\", change.last_seq);\n      }\n    }\n    if (local_changes) {\n      this.after_changes();\n      if (this.page.onDataChange) this.page.onDataChange();\n    }\n    this.G.L.exit(\"DataService.handle_user_db_change\");\n  }\n\n  pending_changes = 0; // used for debugging\n\n  private handle_poll_db_change(pid, change, tally=true) {\n    // called by PouchDB sync and replicate\n    this.G.L.entry(\"DataService.handle_poll_db_change\", pid, this.pending_changes, change);\n    let local_changes = false;\n    if (change.deleted){\n      this.G.L.trace(\"DataService.handle_poll_db_change handling deleted\");\n      local_changes = this.handle_deleted_poll_doc(pid, change.doc);\n    } else if (!change.direction || change.direction == 'pull') {\n      this.G.L.trace(\"DataService.handle_poll_db_change handling incoming\");\n      if (change.change) {\n        change = change.change;\n      }\n      this.G.L.trace(\"DataService.handle_poll_db_change n_docs, change:\", change.docs.length, change);\n      for (const doc of change.docs) {\n        if (doc._deleted) {\n          this.G.L.trace(\"DataService.handle_poll_db_change doc was deleted\", doc);\n          local_changes = this.handle_deleted_poll_doc(pid, doc);\n        } else {\n          this.G.L.trace(\"DataService.handle_poll_db_change doc was updated/new\", doc);\n          this.pending_changes += 1;\n          local_changes = this.doc2poll_cache(pid, doc);\n          this.pending_changes -= 1;\n        }\n      }\n      if (change.last_seq) {\n        // store last_seq in local storage as reference point for next session's \"since\" value:\n        this.poll_caches[pid]['last_seq'] = change.last_seq;\n        this.G.L.trace(\"DataService.handle_poll_db_change stored last_seq\", change.last_seq);\n      }\n    }\n    if (local_changes) {\n      this.after_changes(tally);\n      if (this.page.onDataChange) {\n        this.page.onDataChange();\n      }\n    }\n    this.G.L.exit(\"DataService.handle_poll_db_change\", pid, this.pending_changes);\n  }\n\n  private handle_deleted_user_doc(doc): boolean {\n    const _id = doc._id;\n    if (_id.includes(\"§\")) {\n      const key = _id.slice(_id.indexOf(\"§\") + 1);\n      if (key in this.user_cache) {\n        this.G.L.trace(\"DataService.handle_user_db_change deleting\", key);\n        delete this.user_cache[key];\n        return true;    \n      }  \n    }\n    return false;\n  }\n\n  private handle_deleted_poll_doc(pid: string, doc): boolean {\n    this.G.L.entry(\"DataService.handle_deleted_poll_doc\", pid, doc);\n    if (!(pid in this.poll_caches)) {\n      return false;\n    }\n    const _id = doc._id;\n    if (_id.includes(pid)) {\n      const key = _id.slice(_id.indexOf(pid) + pid.length + 1);\n      if (key.includes('.del_request.')) {\n        const keyfromvid = key.slice('voter.'.length),\n              vid = keyfromvid.slice(0, keyfromvid.indexOf(\"§\")),\n              subkey = keyfromvid.slice(vid.length + 1);\n        const did = subkey.slice(\"del_request.\".length);\n        this.G.Del.process_deleted_request_from_db(pid, did, vid);\n      } else if (key.includes('.rating.')) {\n        const keyfromvid = key.slice('voter.'.length),\n              vid = keyfromvid.slice(0, keyfromvid.indexOf(\"§\")),\n              subkey = keyfromvid.slice(vid.length + 1);\n        const oid = subkey.slice(\"rating.\".length);\n        this.G.P.update_own_rating(pid, vid, oid, 0, false);\n      }  \n      if (key in this.poll_caches[pid]) {\n        this.G.L.trace(\"DataService.handle_poll_db_change deleting\", key);\n        delete this.poll_caches[pid][key];\n        return true;    \n      }  \n    }\n    return false;\n  }\n\n  private after_changes(tally=true) {\n    this.G.L.entry(\"DataService.after_changes\");\n    const lang = this.getu('language'),\n          used_lang = lang!=''?lang:environment.default_lang;\n    this.translate.use(used_lang);\n    this.document.documentElement.lang = used_lang; \n\n    // process all known pids and, if necessary, generate Poll objects and connect to remote poll dbs,\n    // or if due is long over, delete:\n    for (const pid of new Set(this._pids)) {\n      this.G.L.info(\"DataService.after_changes processing poll\", pid);\n      // get due:\n      const due_str = this.G.D.getp(pid, 'due'),\n            deletion_date = (due_str == '') ? null : \n              new Date((new Date(due_str)).getTime() + environment.polls.delete_after_days*24*60*60*1000);\n      if (!!deletion_date && (new Date()) >= deletion_date) {\n        // poll data shall be deleted locally\n        this.G.L.debug(\"DataService.after_changes deleting old poll data\", pid, due_str);\n        this.stop_poll_sync(pid);\n        const lpdb = this.get_local_poll_db(pid);\n        if (!!lpdb) {\n          lpdb.destroy();\n        }\n        delete this.local_poll_dbs[pid];\n        if (pid in this.remote_poll_dbs) {\n          delete this.remote_poll_dbs[pid];\n        }\n        if (pid in this._pid_oids) {\n          delete this._pid_oids[pid];\n        }\n        for (const key of poll_keystarts_in_user_db) {\n          this.delp(pid, key);\n        }\n        this._pids.delete(pid);\n      } else {\n        // poll data shall not be deleted.\n        if (!(pid in this.G.P.polls)) {\n          // poll object does not exist yet, so create it:\n          this.G.L.debug(\"DataService.after_changes creating poll object\", pid);\n          const p = new Poll(this.G, pid);\n        }\n        if (!this.pid_is_draft(pid) && !(pid in this.remote_poll_dbs)) {\n          // try syncing with remote db:\n          // check if db credentials are set:\n          if (this.poll_has_db_credentials(pid)) {\n            this.G.L.trace(\"DataService.after_changes found remote poll db credentials\");\n  \n            // ASYNC:\n            // connect to remote and start sync:\n            this.connect_to_remote_poll_db(pid, this.need_poll_db_replication[pid] || false)\n            .catch(err => {\n  \n              this.G.L.warn(\"DataService.after_changes couldn't start poll db syncing\", pid, err);\n              // TODO: react somehow?\n  \n            });\n  \n          } else {\n  \n            this.G.L.warn(\"DataService.after_changes couldn't find remote poll db credentials\", pid);\n            // TODO: react somehow?\n  \n          }\n        }  \n      }\n    }\n\n    // process all known oids and, if necessary, generate Option objects:\n    for (const pid in this._pid_oids) {\n      const oids = this._pid_oids[pid];\n      for (const oid of oids) {\n        if (pid in this.G.P.polls) {\n          const p = this.G.P.polls[pid];\n          if (!p.oids.includes(oid)) {\n            // option object does not exist yet, so create it:\n            this.G.L.trace(\"DataService.after_changes creating Option object\", oid);\n            const o = new Option(this.G, p, oid);\n          }  \n        } else {\n          this.G.L.error(\"DataService.after_changes found an option for an unknown poll\", pid, oid);\n        }\n      }\n    }\n\n    // notifty all running polls that they might need to tally:\n    for (const [pid, p] of Object.entries(this.G.P.polls)) {\n      this.G.L.trace(\"DataService.after_changes telling poll to tally\", pid);\n      p.ratings_have_changed = true;\n      p.after_incoming_changes(tally);\n    }\n\n    this.save_state();\n    this.G.L.exit(\"DataService.after_changes\");\n  }\n\n  private poll_has_db_credentials(pid:string) {\n    // return whether poll db credentials are nonempty:\n    return this.getp(pid, 'db_server_url')!='' && this.getp(pid, 'db_password')!='' && this.getp(pid, 'myvid')!='';\n  }\n\n  private ensure_poll_cache(pid:string) {\n    let cache = this.poll_caches[pid];\n    if (!cache) {\n      cache = this.poll_caches[pid] = {};\n    }\n    return cache;\n  }\n\n  private doc2user_cache(doc): [boolean, boolean] {\n    // populate user cache with key, value from doc\n    const _id = doc._id, prefix = user_doc_id_prefix + this.get_email_and_pw_hash() + \"§\";\n    if (_id.includes('§timestamp') || _id === '_design/vodle') {\n      return [false, false];\n    }\n\n    if (_id.startsWith(prefix)) {\n\n      const key = _id.slice(prefix.length, _id.length);\n      let value_changed = false, initializing_poll = false;\n      const cyphertext = doc['value'];\n      this.G.L.trace(\"DataService.doc2user_cache cyphertext is\", cyphertext);\n\n      if (cyphertext) {\n\n        // extract value and store in cache if changed:\n        const value = user_keys_unencrypted.includes(key) ? cyphertext : decrypt(cyphertext, this.user_cache['password']);\n        if (this.user_cache[key] != value) {\n          this.user_cache[key] = value;\n          value_changed = true;\n\n          if (key.startsWith(\"news.\")) {\n            this.G.L.trace(\"DataService.doc2user_cache news\", key);\n            this.news_keys.add(key);\n          } else if (key.startsWith(\"del_incoming.\")) {\n            this.G.L.trace(\"DataService.doc2user_cache incoming did\", key);\n            this.incoming_dids_caches[key.slice(\"del_incoming.\".length)] = JSON.parse(value); \n          }\n\n        }\n        this.G.L.trace(\"DataService.doc2user_cache key, value\", key, value);\n\n        if (this.check_whether_poll_or_option(key, value)) {\n          initializing_poll = true;\n        }\n\n      } else {\n\n        this.G.L.debug(\"DataService.doc2user_cache got corrupt doc\", JSON.stringify(doc));\n\n      }\n\n      // RETURN whether the value actually changed.\n      return [value_changed, initializing_poll];\n\n    } else {\n\n      this.G.L.error(\"DataService.doc2user_cache got corrupt doc _id\", _id);\n      // RETURN:\n      return [false, false];\n\n    }\n  }\n\n  private check_whether_poll_or_option(key:string, value:string): boolean {\n    let initializing_poll = false;\n\n    if (key.startsWith('poll.') && key.endsWith('.state')) {\n\n      // it's a poll's state entry, so check whether we know this poll:\n      const pid = key.slice('poll.'.length, key.indexOf('.state')), state = value;\n      if (!this._pids.has(pid)) {\n        this.G.L.trace(\"DataService.check_whether_poll_or_option found new poll\", pid);\n        if (state == 'draft') {\n          this._pids.add(pid);\n        } else {\n          this.ensure_local_poll_data(pid);\n          initializing_poll = true;\n        }\n      }\n\n    } else if (key.startsWith('poll.') && key.includes('.option.') && key.endsWith('.name')) {\n\n      // it's an option's oid entry, so check whether we know this option:\n      const pid = key.slice('poll.'.length, key.indexOf('.option.')), \n          oid = key.slice(key.indexOf('.option.') + '.option.'.length, key.indexOf('.name'));\n      if (!(pid in this._pid_oids)) {\n        this._pid_oids[pid] = new Set();\n      }\n      if (!this._pid_oids[pid].has(oid)) {\n        this.G.L.trace(\"DataService found new option\", pid, oid);\n        this._pid_oids[pid].add(oid);\n        if (pid in this.G.P.polls) {\n          const o = new Option(this.G, this.G.P.polls[pid], oid);              \n        }\n      }\n\n    }\n    return initializing_poll;\n  }\n\n  private doc2poll_cache(pid: string, doc): boolean {\n    /** Copy data from an incoming JSON doc to a poll cache. */\n\n    this.G.L.entry(\"DataService.doc2poll_cache\", pid, doc._id);\n\n    const _id = doc._id;\n    if (_id.includes('§timestamp') || _id === '_design/vodle') {\n      return false;\n    }\n\n    const poll_doc_prefix = poll_doc_id_prefix + pid + \"§\",\n          voter_doc_prefix = poll_doc_id_prefix + pid + '.',\n          cache = this.ensure_poll_cache(pid);\n    var key, value_changed;\n\n    // check if doc contains a claimed due date:\n    const doc_due = doc['due'];\n    if (doc_due) {\n      // check if it is correct:\n      if (!!cache['due'] && !(doc_due == cache['due'])) {\n        this.G.L.warn(\"DataService.doc2poll_cache received doc with wrong due\", doc, this.poll_caches[pid]['due']);\n\n        // RETURN:\n        return false;\n      }\n    }\n    value_changed = false;\n    const cyphertext = doc['value'];\n    this.G.L.trace(\"DataService.doc2poll_cache cyphertext is\", cyphertext);\n\n    if (cyphertext) {\n\n      // extract value:\n      const value = _id.endsWith('§due') ? cyphertext : decrypt(cyphertext, this.user_cache[get_poll_key_prefix(pid) + 'password']);\n\n      // extract key depending on doc type:\n      if (_id.startsWith(poll_doc_prefix)) {\n\n        // it's a non-voter poll doc.\n        key = _id.slice(poll_doc_prefix.length, _id.length);\n\n        // check if doc should contain a claimed due data for validation:\n        const keystart = key.slice(0, (key+'.').indexOf('.'));\n        if (poll_keystarts_requiring_due.includes(keystart) && !doc_due) {\n          this.G.L.warn(\"DataService.doc2poll_cache received doc missing necessary due date\", doc);\n\n          // RETURN:\n          return false;  \n        }\n\n        if (key == 'state') {\n          // also set state in user db:\n          this.setu(get_poll_key_prefix(pid) + 'state', value);\n          if (pid in this.G.P.polls) {\n            // also update poll's internal state cache:\n            this.G.P.polls[pid]._state = value;\n          }\n        }\n\n        if (key.startsWith('option.') && key.endsWith('.name')) {\n\n          // it's an option's oid entry, so check whether we know this option:\n          const keyend = key.slice('option.'.length), \n              oid = keyend.slice(0, keyend.indexOf('.'));\n          if (!(pid in this._pid_oids)) {\n            this._pid_oids[pid] = new Set();\n          }\n          if (!this._pid_oids[pid].has(oid)) {\n            this.G.L.trace(\"DataService.doc2poll_cache found new option\", pid, oid);\n            this._pid_oids[pid].add(oid);\n            if (pid in this.G.P.polls) {\n              const o = new Option(this.G, this.G.P.polls[pid], oid);              \n            }\n          }\n\n        }\n\n        // store in cache if changed:\n        if (cache[key] != value) {\n          cache[key] = value;\n          value_changed = true;\n        }  \n\n      } else if (_id.startsWith(voter_doc_prefix)) {\n\n        // it's a voter doc.\n        key = _id.slice(voter_doc_prefix.length, _id.length);\n\n        const keyfromvid = key.slice('voter.'.length),\n              vid = keyfromvid.slice(0, keyfromvid.indexOf(\"§\")),\n              subkey = keyfromvid.slice(vid.length + 1);\n\n        // check if doc should contain a claimed due data for validation:\n        const subkeystart = subkey.slice(0, (subkey+'.').indexOf('.'));\n        if (voter_subkeystarts_requiring_due.includes(subkeystart) && !doc_due) {\n          this.G.L.warn(\"DataService.doc2poll_cache received doc missing necessary due date\", doc);\n\n          // RETURN:\n          return false;  \n        }\n\n        this.G.L.trace(\"DataService.doc2poll_cache voter data item\", pid, vid, subkey, value);\n\n        // if changed, store in cache and postprocess:\n        if (cache[key] != value) {\n          cache[key] = value;\n          value_changed = true;\n\n          if (subkey.startsWith(\"rating.\")) {\n            const oid = subkey.slice(\"rating.\".length), r = Number.parseInt(value);\n            this.G.P.update_own_rating(pid, vid, oid, r, false);\n          } else if (subkey.startsWith(\"del_request.\")) {\n            const did = subkey.slice(\"del_request.\".length);\n            this.G.Del.process_request_from_db(pid, did, vid);\n          } else if (subkey.startsWith(\"del_response.\")) {\n            const did = subkey.slice(\"del_response.\".length);\n            this.G.Del.process_signed_response_from_db(pid, did, vid);\n          }\n        }  \n\n      } else {\n\n        // it's neither.\n        this.G.L.error(\"DataService.doc2poll_cache got corrupt doc _id\", pid, _id);\n        this.G.L.exit(\"DataService.doc2poll_cache false\");\n\n        // RETURN:\n        return false;\n\n      }\n      this.G.L.trace(\"DataService.doc2poll_cache key, value\", pid, key, value);\n\n    } else {\n\n      this.G.L.warn(\"DataService.doc2poll_cache got corrupt doc\", pid, JSON.stringify(doc));\n\n    }\n\n    // returns whether the value actually changed.\n    this.G.L.exit(\"DataService.doc2poll_cache value_changed\", pid, value_changed);\n\n    // RETURN:\n    return value_changed;\n  }\n\n  // caches --> DBs:\n\n  private store_all_userdata() {\n    // stores user_cache in suitable DBs. \n    for (const [ukey, value] of Object.entries(this.user_cache)) {\n      this.store_user_data(ukey, this.user_cache, ukey);\n    }\n  }\n\n  private store_all_polldata(pid:string) {\n    // stores poll_cache[pid] in suitable DBs. \n    for (const [key, value] of Object.entries(this.poll_caches[pid])) {\n      this.store_poll_data(pid, key, this.poll_caches[pid], key);\n    }\n  }\n\n  private store_user_data(key:string, dict, dict_key:string, enforce=false): boolean {\n    // stores key and value = dict[dict_key] in user database. \n    this.G.L.trace(\"DataService.store_user_data\", key, dict[dict_key]);\n    var doc;\n\n    if (!this.G.S.consent) return false;\n\n    if (local_only_user_keys.includes(key)) {\n\n      // ASYNC:\n      // simply use key as doc id and don't encrypt:\n      this.local_only_user_DB.get(key)\n      .then(doc => {\n        // key existed in db, so update:\n\n        const value = dict[dict_key];\n        if (enforce || doc.value != value) {\n          doc.value = value;\n          this.local_only_user_DB.put(doc)\n          .then(() => {\n            this.G.L.trace(\"DataService.store_user_data local-only update\", key, value);\n          })\n          .catch(err => {\n            this.G.L.warn(\"DataService.store_user_data couldn't local-only update, will try again soon\", key, value, doc, err);\n            window.setTimeout(this.store_user_data.bind(this), environment.db_put_retry_delay_ms, key, dict, dict_key, enforce=true);\n          });\n        } else {\n          this.G.L.trace(\"DataService.store_user_data local-only no need to update\", key, value);\n        }\n\n      }).catch(err => {\n\n        // key did not exist in db, so add:\n        const value = dict[dict_key];\n        doc = {_id: key, value: value};\n        this.local_only_user_DB.put(doc)\n        .then(response => {\n          this.G.L.trace(\"DataService.store_user_data local-only new\", key, value);\n        })\n        .catch(err => {\n          this.G.L.warn(\"DataService.store_user_data couldn't local-only new\", key, value, doc, err);\n          this.local_only_user_DB.get(key)\n          .then(doc => {\n            this.G.L.warn(\"DataService.store_user_data will try again soon\", key, value, doc, err);\n            window.setTimeout(this.store_user_data.bind(this), environment.db_put_retry_delay_ms, key, dict, dict_key, enforce=true);\n          });\n        });\n\n      });\n\n    } else {\n\n      // store encrypted with suitable owner prefix in doc id:\n      const email_and_pw_hash = this.get_email_and_pw_hash();\n      if (!email_and_pw_hash) {\n        this.G.L.warn(\"DataService.store_user_data couldn't set \"+key+\" since email or password are missing!\");\n\n        // RETURN:\n        return false;\n      }\n      const _id = user_doc_id_prefix + email_and_pw_hash + \"§\" + key, \n          user_pw = this.user_cache['password'];\n\n      // ASYNC:\n      this.local_synced_user_db.get(_id)\n      .then(doc => {\n\n        // key existed in db, so update:\n        const value = dict[dict_key], \n              enc_value = user_keys_unencrypted.includes(key) ? value : encrypt(value, user_pw),\n              old_value = user_keys_unencrypted.includes(key) ? doc.value : decrypt(doc.value, user_pw);\n        if (old_value != value) {\n          doc.value = enc_value;\n          this.local_synced_user_db.put(doc)\n          .then(response => {\n            this.G.L.trace(\"DataService.store_user_data synced update\", key, value);\n          })\n          .catch(err => {\n            this.G.L.warn(\"DataService.store_user_data couldn't synced update, will try again soon\", key, value, err);\n            window.setTimeout(this.store_user_data.bind(this), environment.db_put_retry_delay_ms, key, dict, dict_key);\n          });\n        } else {\n          this.G.L.trace(\"DataService.store_user_data synced no need to update\", key, value, old_value);\n        }\n\n      }).catch(err => {\n\n        // key did not exist in db, so add:\n        const value = dict[dict_key], \n              enc_value = user_keys_unencrypted.includes(key) ? value : encrypt(value, user_pw);\n        doc = {\n          '_id': _id, \n          'value': enc_value,\n        };\n        this.local_synced_user_db.put(doc)\n        .then(response => {\n          this.G.L.trace(\"DataService.store_user_data synced new\", key, value);\n        })\n        .catch(err => {\n          this.G.L.warn(\"DataService.store_user_data couldn't synced new, will try again soon\", key, value, err);\n          window.setTimeout(this.store_user_data.bind(this), environment.db_put_retry_delay_ms, key, dict, dict_key);\n        });  \n\n      });\n    }\n\n    // RETURN:\n    return true;\n  }\n\n  private store_poll_data(pid:string, key:string, dict, dict_key:string, add_due=false, enforce=false): boolean {\n    // stores key and value in poll database. \n    this.G.L.trace(\"DataService.store_poll_data\", pid, key, dict[dict_key]);\n    var doc;\n\n    if (!this.G.S.consent) return false;\n\n    // see what type of entry it is:\n    if (key.indexOf(\"§\") == -1) {\n\n      // it's a non-voter data item.\n\n      // store encrypted and with correct prefix:\n      const _id = poll_doc_id_prefix + pid + \"§\" + key,\n            poll_pw = this.user_cache[get_poll_key_prefix(pid) + 'password'];\n      if ((poll_pw=='') || (!poll_pw)) {\n        this.G.L.warn(\"DataService.store_poll_data couldn't set \"+key+\" in local_poll_DB since poll password is missing!\");\n\n        // RETURN:\n        return false;\n      }\n      const db = this.get_local_poll_db(pid);\n\n      // ASYNC:\n      db.get(_id)\n      .then(doc => {\n\n        // key existed in poll db, check whether update is allowed.\n        const value = dict[dict_key];\n        const enc_value = encrypt(value, poll_pw);\n        if ((key != 'due') && (key != 'state') && (decrypt(doc.value, poll_pw) != value)) {\n          // this is not allowed for poll docs!\n          this.G.L.error(\"DataService.store_poll_data tried changing an existing poll data item\", pid, key, value);\n        } else if ((key == 'due') && (doc.due != value)) {\n          // this is not allowed for poll docs!\n          this.G.L.error(\"DataService.store_poll_data tried changing due time\", pid, key, value);\n        } // TODO: also check state change against due time!\n\n        // now update:\n        if (enforce || decrypt(doc['value'], poll_pw) != value) {\n          // only due value is stored unencrypted:\n          doc['value'] = (key == 'due') ? value : enc_value;\n          if (add_due) {\n            doc['due'] = this.poll_caches[pid]['due'];\n          }\n          db.put(doc)\n          .then(response => {\n            this.G.L.trace(\"DataService.store_poll_data update\", pid, key, value, doc);\n          })\n          .catch(err => {\n            this.G.L.warn(\"DataService.store_poll_data couldn't update\", pid, key, value, doc, err);\n          });\n        } else {\n          this.G.L.trace(\"DataService.store_poll_data no need to update\", pid, key, value);\n        }\n        \n      }).catch(err => {\n\n        doc = {\n          '_id': _id,\n        };\n        const value = dict[dict_key];\n        const enc_value = encrypt(value, poll_pw);\n        doc['value'] = (key == 'due') ? value : enc_value;\n        if (add_due) {\n          doc['due'] = this.poll_caches[pid]['due'];\n        }\n        db.put(doc)\n        .then(response => {\n          this.G.L.trace(\"DataService.store_poll_data new\", pid, key, value, doc);\n        })\n        .catch(err => {\n          this.G.L.warn(\"DataService.store_poll_data couldn't new\", pid, key, value, doc, err);\n          // if doc exists, try again:\n          db.get(_id)\n          .then(doc => {\n            window.setTimeout(this.store_poll_data.bind(this), environment.db_put_retry_delay_ms, pid, key, dict, dict_key, add_due, true);\n            this.G.L.trace(\"DataService.store_poll_data scheduled new try\", pid, key, value, doc, err);\n          });\n        });  \n      });\n\n      // RETURN:\n      return true;\n\n    } else {\n\n      // it's a voter data item.\n\n      // check which voter's data this is:\n      const vid_prefix = key.slice(0, key.indexOf(\"§\")),\n            vid = this.user_cache[get_poll_key_prefix(pid) + 'myvid'];\n      if (vid_prefix != 'voter.' + vid && this.poll_caches[pid]['is_test']!='true') {\n          // it is not allowed to alter other voters' data!\n          this.G.L.error(\"DataService.store_poll_data tried changing another voter's data item\", pid, key);\n\n          // RETURN: \n          return false;\n      }\n\n      const _id = poll_doc_id_prefix + pid + '.' + key,\n          poll_pw = this.user_cache[get_poll_key_prefix(pid) + 'password'];\n      if ((poll_pw=='')||(!poll_pw) || (vid=='')||(!vid)) {\n        this.G.L.warn(\"DataService.store_poll_data couldn't set voter data \"+key+\" in local_poll_DB since poll password is missing!\");\n\n        // RETURN:\n        return false;\n      }\n\n      // ASYNC:\n      // try storing encrypted and with proper prefix:\n      const value = dict[dict_key];\n      const enc_value = encrypt(value, poll_pw);\n      const db = this.get_local_poll_db(pid);\n      db.get(_id)\n      .then(doc => {\n\n        // key existed in db, so update:\n        if (enforce || decrypt(doc.value, poll_pw) != value) {\n          doc['value'] = enc_value;\n          if (add_due) {\n            doc['due'] = this.poll_caches[pid]['due'];\n          }\n          db.put(doc)\n          .then(response => {\n            this.G.L.trace(\"DataService.store_poll_data update\", pid, key, value);\n          })\n          .catch(err => {\n            this.G.L.warn(\"DataService.store_poll_data couldn't update voter doc, will try again soon\", pid, key, value, doc, err);\n            window.setTimeout(this.store_poll_data.bind(this), environment.db_put_retry_delay_ms, pid, key, dict, dict_key, add_due, true);\n          });\n        } else {\n          this.G.L.trace(\"DataService.store_poll_data no need to update\", pid, key, value);\n        }\n\n      }).catch(err => {\n\n        // key did not exist in db, so add:\n        const value = dict[dict_key];\n        const enc_value = encrypt(value, poll_pw);\n          doc = {\n          '_id': _id,\n          'value': enc_value,\n        };\n        if (add_due) {\n          doc['due'] = this.poll_caches[pid]['due'];\n        }\n        db.put(doc)\n        .then(response => {\n          this.G.L.trace(\"DataService.store_poll_data new\", pid, key, value);\n        })\n        .catch(err => {\n          this.G.L.warn(\"DataService.store_poll_data couldn't new\", pid, key, value, doc, err);\n          // if doc exists, try again:\n          db.get(_id)\n          .then(doc => {\n            this.G.L.info(\"DataService.store_poll_data will try again soon\", pid, key, value, doc, err);\n            window.setTimeout(this.store_poll_data.bind(this), environment.db_put_retry_delay_ms, pid, key, dict, dict_key, add_due, true);\n          });\n        });  \n\n      });\n\n      // RETURN:\n      return true;\n    }\n  }\n\n  private delete_user_data(key:string): boolean {\n    // deletes a key from the user database. \n    this.G.L.trace(\"DataService.delete_user_data\", key);\n    var db, _id;\n\n    if (local_only_user_keys.includes(key)) {\n      db = this.local_only_user_DB;\n      // simply use key as doc id:\n      _id = key;\n    } else {\n      db = this.local_synced_user_db;\n      // compose id:\n      const email_and_pw_hash = this.get_email_and_pw_hash();\n      if (!email_and_pw_hash) {\n        this.G.L.warn(\"DataService.delete_user_data couldn't delete \"+key+\" since email or password are missing!\");\n\n        // RETURN:\n        return false;\n      }\n      _id = user_doc_id_prefix + email_and_pw_hash + \"§\" + key;\n    }\n\n    // ASYNC:\n    db.get(_id)\n    .then(doc => {\n      // key existed in db, so delete:\n\n      db.remove(doc)\n      .then(() => {\n        this.G.L.trace(\"DataService.delete_user_data delete\", key);\n      })\n      .catch(err => {\n        this.G.L.warn(\"DataService.delete_user_data couldn't delete, will try again soon\", key, doc, err);\n        window.setTimeout(this.delete_user_data.bind(this), environment.db_put_retry_delay_ms, key);\n      });\n\n    }).catch(err => {\n\n      // key did not exist in db:\n      this.G.L.trace(\"DataService.delete_user_data no need to delete nonexistent key\", key, err);\n\n    });\n\n    // RETURN:\n    return true;\n  }\n\n  private delete_poll_data(pid:string, key:string): boolean {\n    // deletes a key from a poll database. \n    this.G.L.trace(\"DataService.delete_poll_data\", pid, key);\n\n    const poll_pw = this.user_cache[get_poll_key_prefix(pid) + 'password'];\n    var _id;\n\n    // see what type of entry it is:\n    if (key.indexOf(\"§\") == -1) {\n\n      // it's a non-voter data item.\n\n      // use correct prefix:\n      _id = poll_doc_id_prefix + pid + \"§\" + key;\n      if ((poll_pw=='')||(!poll_pw)) {\n        this.G.L.warn(\"DataService.delete_poll_data couldn't delete \"+key+\" from local_poll_DB since poll password or voter id are missing!\");\n\n        // RETURN:\n        return false;\n      }\n\n    } else {\n\n      // it's a voter data item.\n\n      // check which voter's data this is:\n      const vid_prefix = key.slice(0, key.indexOf(\"§\")),\n          vid = this.user_cache[get_poll_key_prefix(pid) + 'myvid'];\n      if (vid_prefix != 'voter.' + vid) {\n          // it is not allowed to alter other voters' data!\n          this.G.L.error(\"DataService.delete_poll_data tried deleting another voter's data item\", key);\n\n          // RETURN: \n          return false;\n      }\n\n      _id = poll_doc_id_prefix + pid + '.' + key;\n      if ((poll_pw=='')||(!poll_pw) || (vid=='')||(!vid)) {\n        this.G.L.warn(\"DataService.delete_poll_data couldn't delete \"+key+\" from local_poll_DB since poll password or voter id are missing!\");\n\n        // RETURN:\n        return false;\n      }\n    }\n\n    const db = this.get_local_poll_db(pid);\n\n    // ASYNC:\n    db.get(_id)\n    .then(doc => {\n      // key existed in db, so delete:\n\n      db.remove(doc)\n      .then(() => {\n        this.G.L.trace(\"DataService.delete_poll_data local-only delete\", pid, key);\n      })\n      .catch(err => {\n        this.G.L.warn(\"DataService.delete_poll_data couldn't delete, will try again soon\", pid, key, doc, err);\n        window.setTimeout(this.delete_poll_data.bind(this), environment.db_put_retry_delay_ms, pid, key);\n      });\n\n    }).catch(err => {\n\n      // key did not exist in db:\n      this.G.L.warn(\"DataService.delete_poll_data no need to delete nonexistent key\", pid, key, err);\n\n    });\n\n    // RETURN:\n    return true;\n\n  }\n\n  private get_email_and_pw_hash(): string {\n    const email = this.user_cache['email'], pw = this.user_cache['password'];\n    if ((email=='')||(!email) || (pw=='')||(!pw)) { return null; }\n    const hash = myhash(email + \"§\" + pw);\n//    this.G.L.trace(\"email_and_pw_hash:\", email, pw, hash);\n    return hash;\n  }\n\n\n  // DBs --> DBs:\n\n  private move_user_data(old_values) {\n    this.G.L.entry(\"DataService.move_user_data\");\n    // TODO!\n  }\n\n  // OTHER:\n\n  clear_all_local(): Promise<any> {\n    // called at logout.\n    this.G.L.entry(\"DataService.clear_all_local\");\n    // TODO: disable user interaction\n    this._ready = false;\n    return new Promise((resolve, reject) => {\n      // stop all syncs:\n      this.G.L.info(\"Stopping database synchronisation...\");\n      if (!!this.user_db_sync_handler) {\n        this.user_db_sync_handler.cancel();\n      }\n      for (const pid in this.poll_db_sync_handlers) {\n        this.stop_poll_sync(pid);\n      }\n      // TODO: wait for all syncs to finish\n      // delete all local dbs:\n      this.G.L.info(\"Deleting local databases...\");\n      this.local_synced_user_db.destroy()\n      .then(() => {\n        this.local_only_user_DB.destroy()\n        .then(() => {\n          for (let pid in this.local_poll_dbs) {\n            if (!!this.local_poll_dbs[pid]) {\n              this.local_poll_dbs[pid].destroy();\n            }\n          }\n          // delete ionic local storage:\n          this.G.L.info(\"Deleting local storage...\");\n          if (!this.storage) {\n              // DONE. \n              resolve(true);\n          } else {\n            this.storage.clear()\n            .then(() => {\n              this.storage = null;\n              this.G.L.info(\"...done!\");\n              // DONE. \n              resolve(true);\n            }).catch(reject);  \n          }\n        }).catch(reject);\n      }).catch(reject);\n    });\n  }\n\n  delete_all(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      // decline all not yet declined delegation requests:\n      for (const [pid, cache] of Object.entries(this.G.D.incoming_dids_caches)) {\n        if (cache) {\n          for (const [did, [from, url, status]] of cache) {\n            if (!status[0].startsWith('declined')) {\n              this.G.L.trace(\"DataService.delete_all declining request\", did);\n              this.G.Del.decline(pid, did);\n            }\n          }\n        }\n      }\n      // withdraw all own delegation requests:\n      for (const [pid, cache] of Object.entries(this.G.D.outgoing_dids_caches)) {\n        if (cache) {\n          for (const [oid, did] of cache) {\n            if (did) {\n              this.G.L.trace(\"DataService.delete_all revoking request\", did);\n              this.G.Del.revoke_delegation(pid, did, oid);\n            }\n          }\n        }\n      }\n      // set all waps to zero:\n      for (const [pid, p] of Object.entries(this.G.P.polls)) {\n        this.G.L.trace(\"DataService.delete_all setting zero waps for\", pid);\n        for (const oid of p.oids) {\n          p.set_my_own_rating(oid, 0, true);\n        }\n      }\n      // stop syncing:\n      if (!!this.user_db_sync_handler) {\n        this.user_db_sync_handler.cancel();\n      }\n      // delete all in remote_user_db:\n      this.delete_remote()\n      .then(() => {\n        // do same as when logging out:\n        this.clear_all_local()\n        .catch(reject);\n      })\n      .catch(reject);\n    });\n  }\n\n  delete_remote(): Promise<any> {\n    const email_and_pw_hash = this.get_email_and_pw_hash();\n    return new Promise((resolve, reject) => {\n      this.remote_user_db.allDocs({\n        include_docs: false,\n        startkey: user_doc_id_prefix + email_and_pw_hash + \"§\",\n        endkey: user_doc_id_prefix + email_and_pw_hash + '¨',\n        inclusive_end: false\n      }).then(res => {\n        const bulkDocs = [];\n        for (const row of res.rows) {\n          bulkDocs.push({_id: row.id, _rev: row.value.rev, _deleted: true})\n        }\n        this.G.L.trace(\"DataService.delete_remote trying to delete\", bulkDocs);\n        this.remote_user_db.bulkDocs(bulkDocs)\n        .then(res => {\n          this.G.L.trace(\"DataService.delete_remote succeeded\", res);\n          resolve(true);\n        })\n        .catch(err => {\n          this.G.L.error(\"DataService.delete_remote failed\", err);\n          reject(err);\n        });\n      })\n      .catch(reject);\n    })\n  }\n\n  init_notifications(prompt:boolean) {\n    LocalNotifications.requestPermissions().then(async res => {\n      const state = res['display'];\n      if (state.startsWith('prompt') && prompt) {\n        const dialog = await this.alertCtrl.create({ \n          header: this.translate.instant('data.notifications-permission-header'), \n          message: this.translate.instant('data.notifications-permission-intro'), \n          buttons: [\n            { \n              text: this.translate.instant('no'), \n              role: 'cancel',\n              handler: () => { \n                this.G.L.trace('DataService.init_notifications user No');\n              } \n            },\n            { \n              text: this.translate.instant('yes'),\n              role: 'ok', \n              handler: () => {\n                this.G.L.trace('DataService.init_notifications user Yes');\n                this.init_notifications(prompt=false);\n              } \n            } \n          ] \n        }); \n        await dialog.present(); \n      } else if (state=='granted') {\n        this.G.L.info(\"DataService.init_notifications granted\");\n        this.can_notify = true;\n      } else {\n        this.G.L.info(\"DataService.init_notifications denied:\", res);        \n        this.can_notify = false;\n      }\n    }).catch(err => {\n      console.warn(\"DataService.init_notifications failed:\", err);\n    });\n    // TODO: test this!\n  }\n\n  get_voter_key_prefix(pid: string, vid?: string): string {\n    return 'voter.' + (vid ? vid : this.getp(pid, 'myvid')) + \"§\";\n  }\n  \n  format_date(date: Date): string {\n    return date ? date.toLocaleDateString(this.translate.currentLang, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }) : '';\n  }\n\n  hash(what): string {\n    return myhash(what);\n  }\n\n  generate_id(length:number): string {\n    // generates a random string of requested length\n    return CryptoES.lib.WordArray.random(length/2).toString();\n  }\n\n  email_is_valid(email: string): boolean {\n    return !!String(email)\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  }\n\n  async test_sodium() {\n    this.G.L.entry(\"DataService.test_sodium waiting for sodium\");\n    await Sodium.ready;\n    this.G.L.trace(\"DataService.test_sodium ready\");\n  \n    // Initialize with random bytes:\n    let message = \"This is just an example string.\";\n  \n    /*\n    let key = Sodium.randombytes_buf(32);\n    let nonce = Sodium.randombytes_buf(24);\n\n    // Encrypt:\n    let encrypted = Sodium.crypto_secretbox_easy(message, nonce, key);\n    this.G.L.trace(\"DataService encrypted\", encrypted);\n  \n    // Decrypt:\n    let decrypted = Sodium.to_string(Sodium.crypto_secretbox_open_easy(encrypted, nonce, key));\n    this.G.L.trace(\"DataService decrypted\", decrypted);    \n    */\n\n    const keypair = this.generate_sign_keypair();\n    this.G.L.trace(\"DataService.test_sodium keypair\", keypair);\n\n    const signed = this.sign(message, keypair.private);\n    this.G.L.trace(\"DataService.test_sodium signed\", signed);\n\n    const result = this.open_signed(signed, keypair.public); \n    this.G.L.trace(\"DataService.test_sodium opened\", result);\n/*\n    const encrypted = this.pgp_encrypt(message, keypair.public);\n    this.G.L.trace(\"DataService.test_sodium encrypted\", encrypted);\n\n    const decrypted = this.pgp_decrypt(encrypted, keypair.private); \n    this.G.L.trace(\"DataService.test_sodium decrypted\", decrypted);\n*/\n    const keypair2 = this.generate_sign_keypair();\n    const result2 = this.open_signed(signed, keypair2.public); \n    if (result2) {\n      this.G.L.error(\"DataService.test_sodium should not have been able to open signed msg with wrong key!\", keypair.public, keypair2.public, result2);  \n    } else {\n      this.G.L.trace(\"DataService.test_sodium correctly refused wrong key\");  \n    }\n    this.G.L.exit(\"DataService.test_sodium\");\n  }\n\n  // SIGNING:\n\n  generate_sign_keypair() {\n    try {\n      const keypair = Sodium.crypto_sign_keypair();\n      return {\n        public: Sodium.to_hex(keypair.publicKey), \n        private: Sodium.to_hex(keypair.privateKey)\n      };\n    } catch {\n      return undefined;\n    }\n  }\n\n  sign(message: string, private_key: string) {\n    try {\n      return Sodium.to_hex(Sodium.crypto_sign(message, Sodium.from_hex(private_key)));\n    } catch {\n      return undefined;\n    }\n  }\n\n  open_signed(signed_message: string, public_key: string) {\n    try {\n      return Sodium.to_string(Sodium.crypto_sign_open(Sodium.from_hex(signed_message), Sodium.from_hex(public_key)));\n    } catch {\n      return undefined;\n    }\n  }\n\n  // PGP ENCRYPTION:\n/*\n  // TODO: make this work!\n\n  pgp_encrypt(message: string, public_key: string) {\n    try {\n      const nonce = Sodium.randombytes_buf(Sodium.crypto_box_NONCEBYTES);\n      this.G.L.trace('sodium nonce, message, pubkey:', nonce, message, public_key);\n      this.G.L.trace('sodium hex:', Sodium.crypto_box_easy(message, nonce, Sodium.from_hex(public_key)));\n      return Sodium.to_hex(Sodium.crypto_box_easy(message, Sodium.from_hex(public_key)));\n    } catch {\n      return undefined;\n    }\n  }\n\n  pgp_decrypt(message: string, private_key: string) {\n    try {\n      return Sodium.to_string(Sodium.crypto_box_open_easy(Sodium.from_hex(message), Sodium.from_hex(private_key)));\n    } catch {\n      return undefined;\n    }\n  }\n*/\n  // OTHER METHODS:\n\n  str2rand(str: string): number {\n    const len = str.length,\n          seedstr = (len >= Sodium.crypto_box_SEEDBYTES) \n                      ? str.slice(str.length - Sodium.crypto_box_SEEDBYTES)\n                      : \"_\".repeat(Sodium.crypto_box_SEEDBYTES - len) + str,\n          seedbytes = Sodium.from_string(seedstr),\n          randombytes =  Sodium.randombytes_buf_deterministic(4, seedbytes),\n          rand = (((randombytes[0]/256 + randombytes[1])/256 + randombytes[2])/256 + randombytes[3])/256;\n    return rand;\n  }\n\n}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Injectable } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\n\nimport { environment } from '../environments/environment';\nimport { GlobalService } from './global.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n\n  notification_classes = [\n    'delegation_accepted',\n    'delegation_declined',\n    'new_option',\n    'poll_closing_soon',\n    'poll_closed'\n  ];\n\n  private G: GlobalService;\n\n  use_guest = false;\n\n  constructor() { }\n\n  init(G:GlobalService) { \n    this.G = G; \n  }\n\n  // properties:\n\n  public get consent(): boolean { return this.G.D.getu('consent') != \"0\"; }\n  public set consent(value: boolean) { this.G.D.setu('consent', value ? \"1\": \"0\"); }\n\n  public get email(): string { return this.G.D.getu('email'); }\n  public set email(value: string) { this.G.D.setu('email', value); }\n\n  public get password(): string { return this.G.D.getu('password'); }\n  public set password(value: string) { this.G.D.setu('password', value); }\n\n  public get db(): string { return this.G.D.getu('db'); }\n  public set db(value: string) { \n    this.G.D.setu('db', value); \n    this.compute_db_credentials();\n  }\n\n  public get db_from_pid(): string { return this.G.D.getu('db_from_pid'); }\n  public set db_from_pid(value: string) { \n    this.G.D.setu('db_from_pid', value); \n    this.compute_db_credentials();\n  }\n\n  public get db_custom_server_url(): string { return this.G.D.getu('db_custom_server_url'); }\n  public set db_custom_server_url(value: string) { \n    this.G.D.setu('db_custom_server_url', value); \n    this.compute_db_credentials();\n  }\n\n  public get db_custom_password(): string { return this.G.D.getu('db_custom_password'); }\n  public set db_custom_password(value: string) { \n    this.G.D.setu('db_custom_password', value); \n    this.compute_db_credentials();\n  }\n\n  public get db_server_url(): string { return this.G.D.getu('db_server_url'); }\n  private set db_server_url(value: string) { \n    // will be set automatically \n    this.G.D.setu('db_server_url', value); \n  }\n\n  public get db_password(): string { return this.G.D.getu('db_password'); }\n  private set db_password(value: string) { \n    // will be set automatically \n    this.G.D.setu('db_password', value); \n  }\n\n  public get language(): string { return this.G.D.getu('language'); }\n  public set language(value: string) { this.G.D.setu('language', value); }\n\n  public get theme(): string { return this.G.D.getu('theme'); }\n  public set theme(value: string) { this.G.D.setu('theme', value); }\n\n  public get default_wap(): number { return Number.parseInt(this.G.D.getu('default_wap')||'0'); }\n  public set default_wap(value: number) { this.G.D.setu('default_wap', value.toString()); }\n\n  get_notify_of(cls: string): boolean { return this.G.D.getu('notify_of_'+cls) != \"0\"; } // by default, all notifications are on\n  set_notify_of(cls: string, value: boolean) { this.G.D.setu('notify_of_'+cls, value ? \"1\": \"0\"); }\n\n  closing_soon_fraction = 1/7; // TODO: turn into settings option\n\n  // other data:\n  \n//  public password_regexp = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$';\n  public password_regexp = '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*';\n\n  public passwords_match(control: AbstractControl): ValidationErrors | null {\n    // password validation function to be used in forms\n    if (control) {\n      const password = control.get('password');\n      const confirm_password = control.get('confirm_password');\n      if (password.errors) {\n        return (password.errors);\n      }\n      if (confirm_password.value !== password.value) {\n        return ({must_match: true});\n      }\n    }\n    return null;\n  }\n  \n  // OTHER METHODS:\n\n  public compute_db_credentials() {\n    // set db credentials according to this.db... settings:\n    var url;\n    if (this.db=='central') {\n      url = environment.data_service.central_db_server_url; \n      this.db_password = environment.data_service.central_db_password;\n    } else if (this.db=='poll') {\n      url = this.G.P.polls[this.db_from_pid].db_server_url;\n      this.db_password = this.G.P.polls[this.db_from_pid].db_password;\n    } else if (this.db=='other') {\n      url = this.db_custom_server_url;\n      this.db_password = this.db_custom_password;\n    }\n    this.db_server_url = this.G.D.fix_url(url);\n  }\n\n  // OTHER CONSTANTS:\n\n  language_names = { // TODO: keep in \"phonetically alphabetical\" order\n    de: 'Deutsch',\n    en: 'English',\n    es: 'Español',\n//    fr: 'Français',\n//    hi: 'हिन्दी',\n    ko: '한국어',\n    pl: 'Polski',\n//    fi: 'Suomi',\n//    zh: '中文'\n    nn: '[JSON file keys]'\n  };\n\n  validation_messages = {\n    email: [\n      { type: 'required', message: 'validation.email-required' },\n      { type: 'email', message: 'validation.email-valid' }\n    ],\n    password: [\n      { type: 'required', message: 'validation.password-required' },\n      { type: 'minlength', message: 'validation.password-length' },\n      { type: 'pattern', message: 'validation.password-pattern' }\n    ],\n    passwords_match: [\n      { message: 'validation.passwords-match' }\n    ],\n  };\n\n}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\n/*\n\nCAUTION: At the moment, delegation is disabled due to a difficult bug!\n\nBUG: Delegation cycles are not always prevented and can lead to inconsistent results.\n\nPROPOSED SOLUTION: Allow cycles. When a cycle exists, the effective wap is the maximum of the waps assigned by the members of the cycle. \n\nTo implement this, the simple map effective_delegation_map will point to an arbitrary member of the cycle in case of a cycle. \n\n*/\n\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { environment } from '../environments/environment';\nimport { GlobalService } from './global.service';\nimport { del_request_t, del_signed_response_t, del_response_t, del_option_spec_t, del_agreement_t } from './data.service';\nimport { Poll } from './poll.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DelegationService {\n\n  private G: GlobalService;\n\n  constructor(\n    public translate: TranslateService\n  ) { }\n\n\n  /**\n   * Flow:\n   * \n   * v1 sends v2 link with pid, did, from, privkey\n   * v1 stores v1.del_request.did = {ospec1, pubkey}\n   * v2 stores v2.del_response.did = privkey-signed {ospec2}\n   * v1,v2 may update ospec1, ospec2 at any time\n   *\n   * ospec = (\"+\" | \"-\", [oid,...,oid])  \n   * \n   */\n\n  init(G:GlobalService) { \n    // called by GlobalService\n    G.L.entry(\"DelegationService.init\");\n    this.G = G; \n  }\n\n  // REQUESTING A DELEGATION:\n\n  generate_did(): string {\n    // generates a delegation id\n    return this.G.D.generate_id(environment.data_service.did_length);\n  }\n\n  prepare_delegation(pid: string): [Poll, string, del_request_t, string, del_agreement_t] {\n    /** Generate did, key pair, and cache entries; store request data item in poll DB; compose and return link */\n    this.G.L.entry(\"DelegationService.prepare_delegation\", pid);\n    const p = this.G.P.polls[pid],\n          did = this.generate_did(),\n          keypair = this.G.D.generate_sign_keypair(),\n          request = {\n            option_spec: { type: \"-\", oids: [] }, // initially, we request delegation for all options\n            public_key: keypair.public\n          } as del_request_t,\n          agreement = {\n            client_vid: p.myvid,\n            status: \"pending\",\n            accepted_oids: new Set(),\n            active_oids: new Set()\n          } as del_agreement_t;\n    this.G.L.exit(\"DelegationService.prepare_delegation\");\n    return [p, did, request, keypair.private, agreement];\n  }\n\n  get_delegation_link(pid: string, did: string, from: string, privkey: string): string {\n    /** generate magic link to be sent to delegate */\n    const link = environment.magic_link_base_url + \"delrespond/\" + pid + \"/\" + did + \"/\" + encodeURIComponent(from) + \"/\" + privkey;\n    this.G.L.debug(\"DelegationService.get_delegation_link\", link);\n    return link;\n  }\n\n  after_request_was_sent(pid: string, did: string, request: del_request_t, private_key: string, agreement: del_agreement_t) {\n    // store request and private key in poll db:\n    this.set_private_key(pid, did, private_key);\n    this.get_my_outgoing_dids_cache(pid).set(\"*\", did);\n    this.set_my_request(pid, did, request);\n    // store redundant data only in cache:\n    this.get_delegation_agreements_cache(pid).set(did, agreement);\n    this.G.P.polls[pid].have_acted = true;\n    this.G.D.save_state();\n  }\n\n  get_potential_effective_delegate(pid: string, oid: string): string {\n    /** get the vid of the potential effective delegate when delegation was activated\n     * while it actually isn't.\n     */\n    let did = this.get_my_outgoing_dids_cache(pid).get(oid);\n    if (!did) {\n      did = this.get_my_outgoing_dids_cache(pid).get(\"*\");\n    }\n    if (!did) { return null; }\n    const a = this.get_agreement(pid, did);\n    if (!a || !a.delegate_vid) { return null; }\n    return a.delegate_vid;\n  }\n\n  update_my_delegation(pid: string, oid: string, activate: boolean) {\n    /** Called when voter toggles an option's delegation switch.\n     * (De)activate an option's delegation */\n    const p = this.G.P.polls[pid];\n    let did = this.get_my_outgoing_dids_cache(pid).get(oid);\n    if (!did) {\n      did = this.get_my_outgoing_dids_cache(pid).get(\"*\");\n    }\n    if (!did) {\n      this.G.L.error(\"DelegationService.update_my_delegation without existing did\", pid, oid, activate);\n    } else {\n      this.G.L.trace(\"DelegationService.update_my_delegation\", pid, oid, did);\n      const a = this.get_delegation_agreements_cache(pid).get(did);\n      if ((a.client_vid != p.myvid) \n          || (a.status != \"agreed\") \n          || !a.accepted_oids.has(oid)) {\n        this.G.L.error(\"DelegationService.update_my_delegation without agreed delegation from me\", pid, oid, activate, did);\n      } else if (activate) {\n        if (a.active_oids.has(oid)) {\n          this.G.L.warn(\"DelegationService.update_my_delegation oid already active\", pid, oid, did);\n        } \n        if (true) {\n          // activate\n          a.accepted_oids.add(oid);\n          // update request data and store it in db:\n          const request = this.get_request(pid, did);\n          const ospec = request.option_spec;\n          if (ospec.type == \"+\") {\n            if(!ospec.oids.includes(oid)) {\n              ospec.oids.push(oid);\n            }\n          } else {\n            ospec.oids.splice(ospec.oids.indexOf(oid), 1);\n          }\n          this.set_my_request(pid, did, request);\n        }\n      } else {\n        if (!a.active_oids.has(oid)) {\n          this.G.L.warn(\"DelegationService.update_my_delegation oid not active\", pid, oid, did);\n        } else {\n          // deactivate\n          a.accepted_oids.delete(oid);\n          // update request data and store it in db:\n          const request = this.get_request(pid, did);\n          const ospec = request.option_spec;\n          if (ospec.type == \"-\") {\n            if(!ospec.oids.includes(oid)) {\n              ospec.oids.push(oid);\n            }\n          } else {\n            ospec.oids.splice(ospec.oids.indexOf(oid), 1);\n          }\n          this.set_my_request(pid, did, request);\n        }\n      }\n    }\n  }\n\n  revoke_delegation(pid: string, did: string, oid: string) {\n    this.G.L.entry(\"DelegationService.revoke_delegation\", pid, did);\n    const a = this.get_delegation_agreements_cache(pid).get(did);\n    const p = this.G.P.polls[pid];\n    if ((a.client_vid != p.myvid)) {\n      this.G.L.error(\"DelegationService.revoke_delegation without request from me\", pid, did);\n    } else {\n      this.G.D.delv(pid, \"del_request.\" + did);\n      const acache = this.get_delegation_agreements_cache(pid);\n      if (acache) {\n        const oids = acache.get(did).active_oids;\n        if (oids) {\n          for (const oid of oids) {\n            p.del_delegation(p.myvid, oid);\n          }\n        }\n        acache.delete(did);\n      }\n    }\n    const dcache = this.get_my_outgoing_dids_cache(pid);\n    if (dcache) {\n      dcache.delete(oid);\n    }\n  }\n\n  // RESPONDING TO A DELEGATION REQUEST:\n\n  get_incoming_request_status(pid: string, did: string): Array<string> {\n    if (pid in this.G.P.polls) {\n      const p = this.G.P.polls[pid];\n      if (p.state != 'running') {\n        return [\"closed\"];\n      } else {\n        // check if request has been retrieved from db:\n        const agreement = this.G.Del.get_delegation_agreements_cache(pid).get(did);\n        if (agreement) {\n          // check if already answered:\n          if (agreement.status == 'agreed') {\n            return [\"accepted\"];\n          } \n          // check if already delegating (in)directly back to client_vid for at least one option:\n          var status: Array<any>;\n          const dirdelmap = this.G.D.direct_delegation_map_caches[pid],\n                effdelmap = this.G.D.effective_delegation_map_caches[pid],\n                inveffdelmap = this.G.D.inv_effective_delegation_map_caches[pid],\n                myvid = p.myvid,\n                client_vid = agreement.client_vid;\n          if (client_vid == myvid) {\n            return [\"impossible\", \"is-self\"];\n          }\n          let two_way = false, cycle = false, weight_exceeded = false;\n          for (let oid of p.oids) {\n            const effdel_vid = effdelmap.get(oid).get(myvid) || myvid;\n            const thisinveffdelmap = inveffdelmap.get(oid) || new Map();\n            if (1 + (thisinveffdelmap.get(client_vid)||new Set([client_vid])).size\n                + (thisinveffdelmap.get(effdel_vid)||new Set([effdel_vid])).size\n                > environment.delegation.max_weight) {\n              weight_exceeded = true;\n              break;\n            }\n            if ((dirdelmap.get(oid) || new Map()).get(myvid) == client_vid) {\n              two_way = true;\n            } else if (effdel_vid == client_vid) {\n              cycle = true;\n            }\n          }\n          if (weight_exceeded) {\n            status = [\"impossible\", \"weight-exceeded\"];\n          } else if (two_way) {\n            status = [\"possible\", \"two-way\"];\n          } else if (cycle) {\n            status = [\"possible\", \"cycle\"];\n          } else {\n            status = [\"possible\", \"acyclic\"];\n          }\n          if (agreement.status == 'declined') {\n            status[0] = \"declined, \" + status[0];\n            return status;\n          } else {\n            return status;\n          }\n        } else {\n          return [\"impossible\", \"not-in-db\"];\n        }\n      }\n    } else {\n      return [\"impossible\", \"poll-unknown\"];\n    }\n  }\n\n  store_incoming_request(pid: string, did: string, from: string, url: string, status: string) {\n    if (status != 'impossible') {\n      this.G.D.setu(\"del_incoming.\"+did, JSON.stringify([from, url, status]));\n      let cache = this.G.D.incoming_dids_caches[pid];\n      if (!cache) {\n        cache = this.G.D.incoming_dids_caches[pid] = new Map();\n      }\n      cache.set(did, [from, url, status]);   \n    }\n  }\n\n  update_incoming_request_status(pid: string, did: string, status: string) {\n    const cache = this.G.D.incoming_dids_caches[pid],\n          [from, url, old_status] = cache.get(did);\n    if (status != old_status[0]) {\n      this.store_incoming_request(pid, did, from, url, status);\n    }\n  }\n\n  accept(pid: string, did: string, private_key: string) {\n    /** accept a delegation request, store response in db */\n    const response = {option_spec: {type: \"-\", oids: []}} as del_response_t, // i.e., exclude no oids, meaning accept all oids. TODO: allow partial acceptance for only some options\n          signed_response = this.sign_response(response, private_key);\n    this.G.L.info(\"DelegationService.accept\", pid, did, response);\n    this.set_my_signed_response(pid, did, signed_response);\n  }\n\n  decline(pid: string, did: string, private_key?: string) {\n    /** decline a delegation request, store response in db */\n    if (!private_key) {\n      private_key = this.get_private_key(pid, did);\n    }\n    const response = {option_spec: {type: \"+\", oids: []}} as del_response_t, // i.e., accept NO oids\n          signed_response = this.sign_response(response, private_key);\n    this.G.L.info(\"DelegationService.decline\", pid, did, response);\n    this.set_my_signed_response(pid, did, signed_response);\n  }\n\n  // DATA HANDLING:\n\n  get_delegate_nickname(pid: string, did: string): string {\n    return this.G.D.getp(pid, \"del_nickname.\" + did);\n  }\n\n  set_delegate_nickname(pid: string, did: string, value: string) {\n    this.G.D.setp(pid, \"del_nickname.\" + did, value);\n  }\n\n  get_private_key(pid: string, did: string): string {\n    return this.G.D.getp(pid, \"del_private_key.\" + did);\n  }\n\n  set_private_key(pid: string, did: string, value: string) {\n    this.G.D.setp(pid, \"del_private_key.\" + did, value);\n  }\n\n  get_request(pid: string, did: string, client_vid?: string): del_request_t {\n    if (!client_vid) {\n      client_vid = this.get_agreement(pid, did).client_vid;\n    }\n    const item = (!!client_vid) ? this.G.D.getv(pid, \"del_request.\" + did, client_vid) : null;\n    this.G.L.trace(\"DelegationService.get_request\", pid, did, client_vid, item);\n    return item ? JSON.parse(item) as del_request_t : null;\n  }\n\n  set_my_request(pid: string, did: string, value: del_request_t) {\n    this.G.D.setv(pid, \"del_request.\" + did, JSON.stringify(value));\n    const a = this.get_agreement(pid, did);\n    a.client_vid = this.G.P.polls[pid].myvid;\n    this.update_agreement(pid, did, null, value, null);\n  }\n\n  get_signed_response(pid: string, did: string, vid?: string): del_signed_response_t {\n    this.G.L.entry(\"DelegationService.get_signed_response\", pid, did, vid);\n    if (!vid) {\n      vid = this.get_agreement(pid, did).delegate_vid;\n    }\n    return (!!vid) ? this.G.D.getv(pid, \"del_response.\" + did, vid) : null;\n  }\n  \n  set_my_signed_response(pid: string, did: string, value: del_signed_response_t) {\n    this.G.D.setv(pid, \"del_response.\" + did, value as string);\n    const a = this.get_agreement(pid, did);\n    a.delegate_vid = this.G.P.polls[pid].myvid;\n    this.update_agreement(pid, did, a, null, value);\n    this.update_incoming_request_status(pid, did, a.status);\n  }\n\n  get_agreement(pid: string, did: string): del_agreement_t {\n    const cache = this.get_delegation_agreements_cache(pid);\n    let a = cache.get(did);\n    this.G.L.entry(\"DelegationService.get_agreement\", pid, did, a);\n    if (!a) {\n      a = {\n        status: \"pending\",\n        accepted_oids: new Set(),\n        active_oids: new Set()\n      } as del_agreement_t;\n      cache.set(did, a);\n    }\n    return a;\n  }\n\n  process_request_from_db(pid: string, did: string, client_vid: string) {\n    /** after receiving a new or changed request from the db, process it: */\n    const a = this.get_agreement(pid, did);\n    if (a.delegate_vid && !a.client_vid) {\n      a.client_vid = client_vid;\n      // check earlier response for correct signature:\n      const request = this.get_request(pid, did, client_vid),\n            signed_response = this.get_signed_response(pid, did, client_vid);\n      if (this.response_signed_incorrectly(request, signed_response)) {\n        this.G.L.warn(\"DelegationService.process_request_from_db: response was not properly signed\", a);\n        delete a.delegate_vid;\n      }    \n    }\n    a.client_vid = client_vid;\n    this.update_agreement(pid, did, a, null, null);\n  }\n\n  process_deleted_request_from_db(pid: string, did: string, client_vid: string) {\n    const a = this.get_delegation_agreements_cache(pid).get(did);\n    const p = this.G.P.polls[pid];\n    if ((a.client_vid != client_vid)) {\n      this.G.L.error(\"DelegationService.process_deleted_request_from_db with wrong client_vid\", pid, did);\n    } else {\n      const acache = this.get_delegation_agreements_cache(pid);\n      if (acache) {\n        const oids = acache.get(did).active_oids;\n        if (oids) {\n          for (const oid of oids) {\n            p.del_delegation(client_vid, oid);\n          }\n        }\n        acache.delete(did);\n      }\n    }\n  }\n\n  process_signed_response_from_db(pid: string, did: string, delegate_vid: string) {\n    /** after receiving a new or changed response from the db, process it: */\n    this.G.L.entry(\"DelegationService.process_signed_response_from_db\", pid, did, delegate_vid);\n    const a = this.get_agreement(pid, did),\n          request = this.get_request(pid, did, a.client_vid),\n          signed_response = this.get_signed_response(pid, did, delegate_vid);\n    this.G.L.trace(\"DelegationService.process_signed_response_from_db\", request, signed_response);\n    if (this.response_signed_incorrectly(request, signed_response)) {\n      this.G.L.warn(\"DelegationService.process_signed_response_from_db: response was not properly signed\", a);\n      if (delegate_vid == a.delegate_vid) {\n        delete a.delegate_vid;\n      }\n      return;\n    }    \n    a.delegate_vid = delegate_vid;\n    this.update_agreement(pid, did, a, request, signed_response);\n  }\n\n  update_agreement(pid: string, did: string, agreement: del_agreement_t,\n        request: del_request_t, signed_response: del_signed_response_t) {\n    /** after changes to request or response,\n     * compare request and response, set status, extract accepted and active oids */\n    this.G.L.entry(\"DelegationService.update_agreement\", pid, did, agreement, request, signed_response);\n    // get relevant data:\n    const a = agreement || this.get_agreement(pid, did),\n          p = this.G.P.polls[pid];\n    if (!request) {\n      request = this.get_request(pid, did, a.client_vid);\n    }\n    if (!signed_response) {\n      signed_response = this.get_signed_response(pid, did, a.delegate_vid);\n    }\n    const old_status = a.status;\n    this.G.L.entry(\"DelegationService.update_agreement\", pid, did, a, request, signed_response, old_status);\n\n    if ((!request) || (!signed_response)) {\n\n      // agreement not complete yet:\n      this.G.L.trace(\"DelegationService.update_agreement not complete yet\", pid);\n      a.status = \"pending\";\n\n    } else {\n      // request and correctly signed response exist.\n\n      // update accepted_oids and status:\n      if (!a.accepted_oids) {\n        a.accepted_oids = new Set();\n      }\n      const pair = JSON.parse(this.G.D.open_signed(signed_response, request.public_key));\n      const response = {option_spec: {type: pair[0], oids: pair[1]}} as del_response_t;\n      if (!response.option_spec) {\n        a.status = \"declined\";\n      } else {\n        if (response.option_spec.type == \"+\") {\n          // oids specifies accepted options\n          for (const oid of a.accepted_oids) {\n            if (!response.option_spec.oids.includes(oid)) {\n              // oid no longer accepted:\n              a.accepted_oids.delete(oid);\n              this.G.L.trace(\"DelegationService.update_agreement revoked oid\", pid, oid);\n              // TODO: notify voter!\n            }\n          }\n          for (const oid of response.option_spec.oids) {\n            if (!a.accepted_oids.has(oid)) {\n              // oid newly accepted:\n              a.accepted_oids.add(oid);\n              this.G.L.trace(\"DelegationService.update_agreement added oid\", pid, oid);\n              // TODO: notify voter!\n            }\n          }\n        } else if (response.option_spec.type == \"-\") {\n          // oids specifies NOT accepted options\n          for (const oid of a.accepted_oids) {\n            if (response.option_spec.oids.includes(oid)) {\n              // oid no longer accepted:\n              a.accepted_oids.delete(oid);\n              this.G.L.trace(\"DelegationService.update_agreement revoked oid\", pid, oid);\n              // TODO: notify voter!\n            }\n          }\n          for (const oid of p.oids) {\n            if ((!a.accepted_oids.has(oid)) && (!response.option_spec.oids.includes(oid))) {\n              // oid newly accepted:\n              a.accepted_oids.add(oid);\n              this.G.L.trace(\"DelegationService.update_agreement added oid\", pid, oid);\n              // TODO: notify voter!\n            }\n          }\n        }\n        a.status = (a.accepted_oids.size > 0) ? \"agreed\" : \"declined\"; \n      }\n\n      // update active_oids:\n      if (!a.active_oids) {\n        a.active_oids = new Set();\n      }\n      if (request.option_spec) {\n        if (request.option_spec.type == \"+\") {\n          // oids specifies accepted options\n          for (const oid of a.active_oids) {\n            if (!(a.accepted_oids.has(oid) && request.option_spec.oids.includes(oid))) {\n              // oid no longer active:\n              a.active_oids.delete(oid);\n              p.del_delegation(a.client_vid, oid);\n              this.G.L.trace(\"DelegationService.update_agreement deactivated oid\", pid, oid);\n            }\n          }\n          for (const oid of request.option_spec.oids) {\n            if (a.accepted_oids.has(oid) && !a.active_oids.has(oid)) {\n              // oid newly active:\n              if (p.add_delegation(a.client_vid, oid, a.delegate_vid)) {\n                a.active_oids.add(oid);\n                this.G.L.trace(\"DelegationService.update_agreement activated oid\", pid, oid);\n              } else {\n                this.G.L.warn(\"DelegationService.update_agreement couldn't activate oid\", pid, oid);\n              }\n            }\n          }\n        } else if (request.option_spec.type == \"-\") {\n          // request.option_spec.oids specifies NOT requested options\n          for (const oid of a.active_oids) {\n            if (request.option_spec.oids.includes(oid) || !a.accepted_oids.has(oid)) {\n              // oid no longer active:\n              a.active_oids.delete(oid);\n              p.del_delegation(a.client_vid, oid);\n              this.G.L.trace(\"DelegationService.update_agreement deactivated oid\", pid, oid);\n            }\n          }\n          for (const oid of a.accepted_oids) {\n            if ((!a.active_oids.has(oid)) && (!request.option_spec.oids.includes(oid))) {\n              // oid newly active:\n              if (p.add_delegation(a.client_vid, oid, a.delegate_vid)) {\n                a.active_oids.add(oid);\n                this.G.L.trace(\"DelegationService.update_agreement activated oid\", pid, oid);\n              } else {\n                this.G.L.warn(\"DelegationService.update_agreement couldn't activate oid\", pid, oid);\n              }\n            }\n          }\n        }\n        a.status = (a.accepted_oids.size > 0) ? \"agreed\" : \"declined\"; \n      }\n    \n    }\n\n    // if voter affected directly, add news item:\n    if (a.client_vid == p.myvid) {\n      if ((old_status==\"pending\") && (a.status==\"agreed\")) {\n        this.G.N.add({\n          class: 'delegation_accepted', \n          pid: pid,\n          auto_dismiss: true,\n          title: this.translate.instant('news-title.delegation_accepted', {nickname: this.get_delegate_nickname(pid, did)}) \n        });\n      } else if ((old_status==\"declined\") && (a.status==\"agreed\")) {\n        this.G.N.add({\n          class: 'delegation_accepted', \n          pid: pid,\n          title: this.translate.instant('news-title.delegation_accepted_after_all', {nickname: this.get_delegate_nickname(pid, did)}) \n        });\n      } else if ((old_status==\"pending\") && (a.status==\"declined\")) {\n        this.G.N.add({\n          class: 'delegation_declined', \n          pid: pid,\n          title: this.translate.instant('news-title.delegation_declined', {nickname: this.get_delegate_nickname(pid, did)}),\n          body: this.translate.instant('news-body.delegation_declined') \n        });\n      } else if ((old_status==\"agreed\") && (a.status==\"declined\")) {\n        this.G.N.add({\n          class: 'delegation_declined', \n          pid: pid,\n          title: this.translate.instant('news-title.delegation_revoked', {nickname: this.get_delegate_nickname(pid, did)}),\n          body: this.translate.instant('news-body.delegation_declined') \n        });\n      }\n    }\n\n    // TODO: update tally!\n\n    this.G.L.exit(\"DelegationService.update_agreement\", a.status, [...a.accepted_oids], [...a.active_oids]);\n  }\n\n  response_signed_incorrectly(request: del_request_t, signed_response: del_signed_response_t) {\n    /** whether the response can be identified as being signed incorrectly */\n    this.G.L.entry(\"DelegationService.response_signed_incorrectly\", request, signed_response);\n    if ((!signed_response)||(!request)) {\n      // no request or response, so no invalid signature:\n      return false;\n    }\n    return !this.G.D.open_signed(signed_response, request.public_key);\n  }\n\n  sign_response(response: del_response_t, private_key: string): del_signed_response_t {\n    return this.G.D.sign(this.response2string(response), private_key);\n  }\n\n  response2string(response: del_response_t): string {\n    /** turn response data without signature deterministically into a string message that can be signed: */\n    return JSON.stringify([response.option_spec.type, response.option_spec.oids]);\n  }\n\n  get_my_outgoing_dids_cache(pid:string) {\n    if (!this.G.D.outgoing_dids_caches[pid]) {\n      this.G.D.outgoing_dids_caches[pid] = new Map();\n    }\n    return this.G.D.outgoing_dids_caches[pid];\n  }\n\n  get_delegation_agreements_cache(pid:string) {\n    if (!this.G.D.delegation_agreements_caches[pid]) {\n      this.G.D.delegation_agreements_caches[pid] = new Map();\n    }\n    return this.G.D.delegation_agreements_caches[pid];\n  }\n\n}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Injectable } from '@angular/core';\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\nimport { environment } from '../environments/environment';\nimport { GlobalService } from './global.service';\nimport { news_t } from './data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsService {\n\n  private G: GlobalService;\n\n  constructor() { }\n\n  init(G:GlobalService) { \n    // called by GlobalService\n    G.L.entry(\"NewsService.init\");\n    this.G = G; \n  }\n\n  generate_nid(): string {\n    return this.G.D.generate_id(environment.data_service.nid_length);\n  }\n\n  add(data: any) {\n    /** add a news item */\n    try {\n      const news = data as news_t;\n      const key = \"news.\" + this.generate_nid();\n      news.key = key;\n      this.G.D.news_keys.add(key);\n      this.G.D.setu(key, JSON.stringify(news));\n      this.G.L.trace(\"NewsService.add\", key, news);\n\n      if (this.G.S.get_notify_of(news.class)) {\n        LocalNotifications.schedule({\n          notifications: [{\n            title: news.title,\n            body: news.body,\n            id: null\n          }]\n        })\n        .then(res => {\n          this.G.L.trace(\"NewsService.add localNotifications.schedule succeeded:\", res);\n        }).catch(err => {\n          this.G.L.warn(\"NewsService.add localNotifications.schedule failed:\", err);\n        });\n      }\n    } catch {\n      this.G.L.warn(\"NewsService.add bad data:\", data);\n    }\n  }\n\n  dismiss(key: string) {\n    /** called when user dismisses news item or it was automatically dismissed */\n    if (this.G.D.news_keys.has(key)) {\n      this.G.L.entry(\"NewsService.dismiss\", key);\n      this.G.D.news_keys.delete(key);\n    } else {\n      this.G.L.warn(\"NewsService.dismiss unknown key\", key);\n    }\n    this.G.D.delu(key);\n    this.G.D.save_state();\n  }\n\n  filter(filter: any): Set<news_t> {\n    /** return a set of news items that match all entries specified in filter,\n     * such as class or pid\n     */\n    this.G.L.entry(\"NewsService.filter\", filter);\n    let res = new Set() as Set<news_t>;\n    for (let key of this.G.D.news_keys) {\n      try {\n        const news = JSON.parse(this.G.D.getu(key)) as news_t;\n        let good = true;\n        for (let [entrykey, value] of Object.entries(filter)) {\n          if (news[entrykey] != value) {\n            good = false;\n            break;\n          }\n        }\n        if (good) {\n          res.add(news);\n        }\n      } catch {}\n    }\n    return res;\n  }\n}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Injectable, HostListener, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Storage } from '@ionic/storage-angular';\nimport { Logger, LoggingService } from \"ionic-logging-service\";\nimport { AlertController } from '@ionic/angular';\n\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\nimport { DataService } from './data.service';\nimport { SettingsService } from './settings.service';\nimport { PollService } from './poll.service';\nimport { DelegationService } from './delegation.service';\nimport { NewsService } from './news.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalService implements OnDestroy {\n\n  L: Logger;\n\n  show_spinner = false;\n\n  // constants or session-specific data:\n\n  _urlRegex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n  // the following does not work: \n  urlRegex = /^(?:(http|ftp)(s)?:\\/\\/)?(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+(?:[a-zA-Z]{2,6}\\.?|[a-zA-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\[?[a-fA-F0-9]*:[a-fA-F0-9:]+\\]?)(?::\\d+)?(?:\\/?|[\\/?]\\S+)$/; \n  //               1          1       1  2          3                         3   2 2                                2                                                                        11      1 1              1                              \n\n  constructor(\n      loggingService: LoggingService,\n      public http: HttpClient, \n      public storage: Storage,\n      public D: DataService,\n      public P: PollService,\n      public S: SettingsService,\n      public Del: DelegationService,\n      public N: NewsService,\n      public translate: TranslateService,\n      public alertCtrl: AlertController,\n      ) {\n    this.L = loggingService.getLogger(\"VODLE\");\n    this.L.entry(\"GlobalService.constructor\");\n    // make this service available to the other services:\n    D.init(this); \n    P.init(this); \n    S.init(this);\n    Del.init(this);\n    N.init(this);\n\n    window.addEventListener(\"beforeunload\", this.onBeforeUnload.bind(this));\n    window.onbeforeunload = this.onBeforeUnload.bind(this);\n\n    window.onunhandledrejection = event => {\n      console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);\n    };\n    \n    window.onerror = function(message, source, lineNumber, colno, error) {\n      console.warn(`UNHANDLED ERROR: ${error.stack}`);\n    };\n    \n    this.L.exit(\"GlobalService.constructor\");\n  }\n\n  ngOnDestroy() {\n    console.log(\"GlobalService.ngOnDestroy entry\");\n    this.D.save_state();\n    console.log(\"GlobalService.ngOnDestroy exit\");\n  }\n\n  @HostListener('window:beforeunload', ['$event'])\n  onBeforeUnload(event: Event) {\n    console.log(\"DATA onBeforeUnload entry\");\n    if (!!this.storage) {\n      this.D.save_state();\n      if (this.D.page) {\n        if (this.D.page.ionViewWillLeave) {\n          this.D.page.ionViewWillLeave();\n        }\n        if (this.D.page.ionViewDidLeave) {\n          this.D.page.ionViewDidLeave();\n        }\n        if (this.D.page.ngOnDestroy) {\n          this.D.page.ngOnDestroy();\n        }\n      }  \n    }\n    console.log(\"DATA onBeforeUnload exit\");\n  }\n\n  // TODO: use this consistently wherever an external page is accessed:\n  async open_url_in_new_tab(dirty_url: string) {\n    const url = this.D.fix_url(dirty_url);\n    const confirm = await this.alertCtrl.create({ \n      message: this.translate.instant(\n        \"external-link.confirm\", {url: url}), \n      buttons: [\n        { \n          text: this.translate.instant('no'), \n          role: 'Cancel',\n          handler: () => { \n          } \n        },\n        { \n          text: this.translate.instant('external-link.copy-link'),\n          handler: () => { \n            this.copy_link_to_clipboard(url);\n          } \n        },\n        { \n          text: this.translate.instant('external-link.yes'),\n          role: 'Ok', \n          handler: () => {\n          /* \n            instead of window.open(url,'_blank');\n            we do this workaround to prevent the opened page from access to the current session:\n          */ \n            const a = document.createElement('a');\n            a.href = url;\n            a.target = '_blank';\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n          } \n        } \n      ] \n    }); \n    await confirm.present(); \n  }\n\n  copy_link_to_clipboard(url: string) {\n    window.navigator.clipboard.writeText(url);\n    LocalNotifications.schedule({\n      notifications: [{\n        title: this.translate.instant(\"external-link.notification-copied-link-title\"),\n        body: this.translate.instant(\"external-link.notification-copied-link-body\"),\n        id: null\n      }]\n    })\n    .then(res => {\n    }).catch(err => {\n    });\n  }\n\n  map2str(map: Map<any, any>): string {\n    if (map) {\n      return JSON.stringify([...map.entries()].reduce((o, [key, value]) => { \n        o[key] = (value instanceof Set) ? [...value] : (value instanceof Map) ? [...value.entries()] : value; \n        return o; \n      }, {}));\n    } else return \"#\";\n  }\n\n  go_fullscreen_on_mobile() {\n    /** try going fullscreen if in mobile browser\n     */ \n    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){\n      var elem = document.documentElement;\n      if (!!elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } /* else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n      }*/\n    }\n  }\n\n  spinning_reasons = new Set();\n\n  add_spinning_reason(reason: string) {\n    this.spinning_reasons.add(reason);\n    this.show_spinner = true;\n    this.L.trace(\"GlobalService.add_spinning_reason reasons\", [...this.spinning_reasons.entries()])\n  }\n\n  remove_spinning_reason(reason: string) {\n    if (this.spinning_reasons.has(reason)) {\n      this.spinning_reasons.delete(reason);\n      if (this.spinning_reasons.size == 0) {\n        this.show_spinner = false; \n      }\n    }\n    this.L.trace(\"GlobalService.remove_spinning_reason reasons\", [...this.spinning_reasons.entries()])\n  }\n\n}","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Injectable } from '@angular/core';\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\nimport { environment } from '../environments/environment';\nimport { GlobalService } from './global.service';\n\n/* TODO:\n- add state, allow only certain state transitions, allow attribute change only in draft state\n*/\n\n// TYPES:\n\ntype poll_state_t = \"\"|\"draft\"|\"running\"|\"closing\"|\"closed\";\ntype poll_type_t = \"winner\"|\"share\";\ntype poll_due_type_t = \"custom\"|\"10min\"|\"hour\"|\"midnight\"|\"24hr\"|\"tomorrow-noon\"|\"tomorrow-night\"\n                        |\"friday-noon\"|\"sunday-night\"|\"week\"|\"two-weeks\"|\"four-weeks\";\ntype tally_cache_t = { // T is short for \"tally data\"\n  // array of known vids:\n  all_vids_set: Set<string>;\n  // number of voters known:\n  n_not_abstaining: number;\n  // for each oid, an array of ascending ratings: \n  effective_ratings_ascending_map: Map<string, Array<number>>;\n  // for each oid, the approval threshold (effective rating at and above which option is approved):\n  thresholds_map: Map<string, number>;\n  // for each oid and vid, the approval (default: false):\n  approvals_map: Map<string, Map<string, boolean>>;\n  // for each oid, the approval score:\n  approval_scores_map: Map<string, number>;\n  // for each oid, the total rating:\n  total_effective_ratings_map: Map<string, number>;\n  // for each oid, the effective score:\n  scores_map: Map<string, number>;\n  // oids sorted by descending score:\n  oids_descending: Array<string>; \n  // for each vid, the voted-for option (or \"\" for abstention):\n  votes_map: Map<string, string>;\n  // for each oid (and \"\" for abstaining), the number of votes:\n  n_votes_map: Map<string, number>;\n  // for each oid, the winning probability/share:\n  shares_map: Map<string, number>;\n  // len of cycle myvid is on, or null if not:\n  my_cycle_len: number;\n};\n                      \n// in the following, month index start at zero (!) while date index starts at one (!):\nconst LAST_DAY_OF_MONTH = {0:31, 1:28, 2:31, 3:30, 4:31, 5:30, 6:31, 7:31, 8:30, 9:31, 10:30, 11:31};\nconst VERIFY_TALLY = true;\n\n// SERVICE:\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PollService {\n\n  private G: GlobalService;\n\n  polls: Record<string, Poll> = {};\n\n  ref_date: Date;\n\n  get running_polls() {\n    const res: Record<string, Poll> = {};\n    for (const pid in this.polls) {\n      const p = this.polls[pid];\n      if (p.state=='running') {\n        res[p.pid] = p;\n      }\n    }\n    return res;\n  }\n\n  get closed_polls() {\n    const res: Record<string, Poll> = {};\n    for (const pid in this.polls) {\n      const p = this.polls[pid];\n      if (p.state=='closed') {\n        res[p.pid] = p;\n      }\n    }\n    return res;\n  }\n\n  get draft_polls() {\n    const res: Record<string, Poll> = {};\n    for (const pid in this.polls) {\n      const p = this.polls[pid];\n      if (p.state=='draft') {\n        res[p.pid] = p;\n      }\n    }\n    return res;\n  }\n\n  // TODO: store these two in D!\n  private unused_pids: string[] = [];\n  private unused_oids: string[][] = [];\n\n  constructor() { }\n  \n  init(G:GlobalService) { \n    // called by GlobalService\n    G.L.entry(\"PollService.init\");\n    this.G = G; \n  }\n\n  generate_pid(): string {\n    return this.unused_pids.pop() || this.G.D.generate_id(environment.data_service.pid_length); \n  }\n\n  generate_oid(pid:string): string {\n    if (!(pid in this.unused_oids)) this.unused_oids[pid] = [];\n    return this.unused_oids[pid].pop() || this.G.D.generate_id(environment.data_service.oid_length);\n  }\n\n  generate_password(): string {\n    return this.G.D.generate_id(environment.data_service.pwd_length);\n  }\n\n  generate_vid(): string {\n    return this.G.D.generate_id(environment.data_service.vid_length);\n  }\n\n  update_ref_date() {\n    this.ref_date = new Date();\n  }\n\n  update_own_rating(pid: string, vid: string, oid: string, value: number, update_tally=false) {\n    if (!(value >= 0 && value <= 100)) {\n      this.G.L.warn(\"PollService.update_own_rating replaced invalid rating by zero\", value);\n      value = 0;\n    }\n    this.G.L.trace(\"PollService.update_own_rating\", pid, vid, oid, value);\n    let poll_ratings_map = this.G.D.own_ratings_map_caches[pid];\n    if (!poll_ratings_map) {\n      this.G.D.own_ratings_map_caches[pid] = poll_ratings_map = new Map();\n    }\n    let this_ratings_map = poll_ratings_map.get(oid);\n    if (!this_ratings_map) {\n      this_ratings_map = new Map();\n      poll_ratings_map.set(oid, this_ratings_map); \n    }\n    if (value != this_ratings_map.get(vid)) {\n      if (pid in this.polls) {\n        // let the poll object do the update\n        this.polls[pid].update_own_rating(vid, oid, value, update_tally);\n      } else {\n        // just store the new value:\n        this_ratings_map.set(vid, value);\n      }\n    }\n  }\n\n}\n\n\n// ENTITY CLASSES:\n\nexport class Poll {\n\n  private G: GlobalService;\n  _state: string;  // cache for state since it is asked very often\n  syncing: boolean = false;\n  allow_voting: boolean = false;\n\n  constructor (G:GlobalService, pid?:string) { \n    this.G = G;\n    if (!pid) {\n      // generate a new draft poll\n      pid = this.G.P.generate_pid();\n      this.state = 'draft';\n//      this.G.D.setp(pid, 'pid', pid);\n    } else {\n      // copy state from db into cache:\n      this._state = this.G.D.getp(pid, 'state') as poll_state_t;\n    }\n    G.L.entry(\"Poll.constructor\", pid, this._state, this.G.D.getp(pid, 'state'));\n    this._pid = pid;\n    this.G.P.polls[pid] = this;\n    if (this._pid in this.G.D.tally_caches) { \n      this.T = this.G.D.tally_caches[this._pid] as tally_cache_t;\n    } else if (!(this._state in [null, '', 'draft'])) {\n      this.tally_all();\n    }\n\n    if (this._state == 'running') {\n      this.set_timeouts();\n    } else if (this._state == 'closed' && !this.has_results) {\n      this.end();\n    }\n\n    G.L.exit(\"Poll.constructor\", pid, this._state, this.G.D.getp(pid, 'state'));\n  }\n\n  set_timeouts(start_date?: Date) {\n    /** set timeouts for ending soon and ending events */\n    this.G.L.entry(\"Poll.set_timeouts\", this._pid, start_date);\n    const has_just_ended = this.end_if_past_due();\n    if (!has_just_ended) {\n      this.allow_voting = true;\n      this.has_results = false;\n      const now_ms = (new Date()).getTime(), \n            due = this.due;\n      if (!!due) {\n        const due_ms = due.getTime(),\n              time_left_ms = due_ms - now_ms;\n        // set timeout for ending:\n        if (time_left_ms < 2000000000) {\n          window.setTimeout(this.end.bind(this), time_left_ms);\n          this.G.L.trace(\"Poll.set_timeouts: end scheduled\", this._pid, time_left_ms);  \n        } else {\n          this.G.L.trace(\"Poll.set_timeouts: end not scheduled, too far in future\", this._pid, time_left_ms);  \n        }\n        const started = start_date || this.start_date;\n        this.G.L.trace(\"Poll.set_timeouts start_date\", this._pid, started);\n        if (!!started) {\n          const started_ms = started.getTime(),\n                total_time_ms = due_ms - started_ms,\n                notify_time_ms = due_ms - this.G.S.closing_soon_fraction * total_time_ms,\n                time_to_notify_ms = notify_time_ms - now_ms;\n          if (time_to_notify_ms > 2000000000) {\n            this.G.L.trace(\"Poll.set_timeouts: notify_closing_soon not scheduled, too far in future\", this._pid, time_to_notify_ms);\n          } else if (time_to_notify_ms > 0) {\n            window.setTimeout(this.notify_closing_soon.bind(this), time_to_notify_ms);\n            this.G.L.trace(\"Poll.set_timeouts: notify_closing_soon scheduled\", this._pid, time_to_notify_ms);\n          } else {\n            this.G.L.trace(\"Poll.set_timeouts: notify_closing_soon not scheduled since in past\", this._pid, time_to_notify_ms);\n          }\n        }\n      }\n    }\n  }\n\n  notify_closing_soon() {\n    this.G.L.entry(\"Poll.notify_closing_soon\", this._pid);\n    const dummy = this.is_closing_soon;\n    if (this.G.S.get_notify_of(\"poll_closing_soon\")) {\n      LocalNotifications.schedule({\n        notifications: [{\n          title: this.G.translate.instant('notifications.closing-soon-title', {title:this.title}),\n          body: this.G.translate.instant('notifications.closing-soon-body', {title:this.title, due:this.due_string}),\n          id: null\n        }]\n      })\n      .then(res => {\n        this.G.L.trace(\"Poll.notify_closing_soon localNotifications.schedule succeeded:\", res);\n      }).catch(err => {\n        this.G.L.warn(\"Poll.notify_closing_soon localNotifications.schedule failed:\", err);\n      });\n    }\n  }\n\n  delete() {\n    this.G.L.entry(\"Poll.delete\", this._pid);\n    delete this.G.P.polls[this._pid];\n    this.G.D.delp(this._pid, 'type');\n    this.G.D.delp(this._pid, 'title');\n    this.G.D.delp(this._pid, 'desc');\n    this.G.D.delp(this._pid, 'url');\n    this.G.D.delp(this._pid, 'language');\n    this.G.D.delp(this._pid, 'db');\n    this.G.D.delp(this._pid, 'db_from_pid');\n    this.G.D.delp(this._pid, 'db_custom_server_url');\n    this.G.D.delp(this._pid, 'db_custom_password');\n    this.G.D.delp(this._pid, 'db_server_url');\n    this.G.D.delp(this._pid, 'db_password');\n    for (const oid of Object.keys(this._options)) {\n      this._options[oid].delete();\n    }\n    this.G.D.delp(this._pid, 'password');\n    this.G.D.delp(this._pid, 'vid');\n    this.G.D.delp(this._pid, 'state');\n    this.G.L.exit(\"Poll.delete\", this._pid);\n  }\n\n  private _pid: string;\n  get pid(): string { return this._pid; }\n  // pid is read-only, set at construction\n\n  // private attributes of the user:\n\n  get creator(): string { return this.G.D.getp(this._pid, 'creator'); }\n  set creator(value: string) { this.G.D.setp(this._pid, 'creator', value); }\n\n  get have_seen(): boolean { return this.G.D.getp(this._pid, 'have_seen') == 'true'; }\n  set have_seen(value: boolean) { this.G.D.setp(this._pid, 'have_seen', value.toString()); }\n\n  get has_results(): boolean { return this.G.D.getp(this._pid, 'has_results') == 'true'; }\n  set has_results(value: boolean) { this.G.D.setp(this._pid, 'has_results', value.toString()); }\n\n  get have_seen_results(): boolean { return this.G.D.getp(this._pid, 'have_seen_results') == 'true'; }\n  set have_seen_results(value: boolean) { this.G.D.setp(this._pid, 'have_seen_results', value.toString()); }\n\n  get have_acted(): boolean { return this.G.D.getp(this._pid, 'have_acted') == 'true'; }\n  set have_acted(value: boolean) { this.G.D.setp(this._pid, 'have_acted', value.toString()); }\n\n  get has_been_notified_of_end(): boolean { return this.G.D.getp(this._pid, 'has_been_notified_of_end') == 'true'; }\n  set has_been_notified_of_end(value: boolean) { this.G.D.setp(this._pid, 'has_been_notified_of_end', value.toString()); }\n\n  // attributes that are needed to access the poll's database \n  // and thus stored in user's personal data.\n  // they may only be changed in state 'draft':\n\n  get db(): string { return this.G.D.getp(this._pid, 'db'); }\n  set db(value: string) { \n    if (this.state=='draft') this.G.D.setp(this._pid, 'db', value); \n  }\n\n  get db_from_pid(): string { return this.G.D.getp(this._pid, 'db_from_pid'); }\n  set db_from_pid(value: string) { \n    if (this.state=='draft') this.G.D.setp(this._pid, 'db_from_pid', value); \n  }\n\n  get db_custom_server_url(): string { return this.G.D.getp(this._pid, 'db_custom_server_url'); }\n  set db_custom_server_url(value: string) { \n    if (this.state=='draft') this.G.D.setp(this._pid, 'db_custom_server_url', value); \n  }\n\n  get db_custom_password(): string { return this.G.D.getp(this._pid, 'db_custom_password'); }\n  set db_custom_password(value: string) { \n    if (this.state=='draft') this.G.D.setp(this._pid, 'db_custom_password', value); \n  }\n\n  // the following will be set only once at publish or join time:\n\n  get db_server_url(): string { return this.G.D.getp(this._pid, 'db_server_url')}\n  set db_server_url(value: string) {\n    this.G.D.setp(this._pid, 'db_server_url', value); \n  }\n\n  get db_password(): string { return this.G.D.getp(this._pid, 'db_password')}\n  set db_password(value: string) { \n    this.G.D.setp(this._pid, 'db_password', value); \n  }\n\n  get password(): string { return this.G.D.getp(this._pid, 'password'); }\n  set password(value: string) {\n    this.G.D.setp(this._pid, 'password', value);\n    /*\n    // also store encrypted password in public db:\n    this.G.D.setp(this._pid, 'encrypted_password', this.G.D.pgp_encrypt(value, environment.data_service.backdoor_public_key)); \n    */\n  }\n\n  get myvid(): string { return this.G.D.getp(this._pid, 'myvid'); }\n  set myvid(value: string) {\n    this.G.D.setp(this._pid, 'myvid', value);\n  }\n\n  // final rand and winner are only stored in user db:\n\n  get final_rand(): number { return Number.parseFloat(this.G.D.getp(this._pid, 'final_rand')); }\n  set final_rand(value: number) { \n    this.G.D.setp(this._pid, 'final_rand', value.toString()); \n  }\n\n  get winner(): string { return this.G.D.getp(this._pid, 'winner')}\n  set winner(value: string) { \n    this.G.D.setp(this._pid, 'winner', value); \n  }\n\n  // state is stored both in user's and in poll's (if not draft) database:\n\n  get state(): poll_state_t { \n    // this is implemented as fast as possible because it is used so often\n    return this._state as poll_state_t;\n  }\n  set state(new_state: poll_state_t) {\n    const old_state = this.state;\n    if (old_state==new_state) return;\n    if ({\n          null: ['draft'],\n          '': ['draft'], \n          'draft': ['running'], \n          'running': ['closed']\n        }[old_state].includes(new_state)) {\n        this.G.D.change_poll_state(this, new_state);\n        this._state = new_state;\n        if (new_state == 'running') {\n          this.set_timeouts(new Date());\n        }\n    } else {\n      this.G.L.error(\"Poll invalid state transition from \"+old_state+\" to \"+new_state);\n    }\n  }\n\n  // all other attributes are accessed via setp, getp, \n  // which automatically use the user's database for state 'draft' \n  // and the poll's database otherwise (in which case they are also read-only).\n\n  get is_test(): boolean { return this.G.D.getp(this._pid, 'is_test') == 'true'; }\n  set is_test(value: boolean) { this.G.D.setp(this._pid, 'is_test', value.toString()); }\n\n  get type(): poll_type_t { return this.G.D.getp(this._pid, 'type') as poll_type_t; }\n  set type(value: poll_type_t) { this.G.D.setp(this._pid, 'type', value); }\n\n  get language(): string { return this.G.D.getp(this._pid, 'language'); }\n  set language(value: string) { this.G.D.setp(this._pid, 'language', value); }\n\n  get title(): string { return this.G.D.getp(this._pid, 'title'); }\n  set title(value: string) { this.G.D.setp(this._pid, 'title', value); }\n\n  get desc(): string { return this.G.D.getp(this._pid, 'desc'); }\n  set desc(value: string) { this.G.D.setp(this._pid, 'desc', value); }\n\n  get url(): string { return this.G.D.getp(this._pid, 'url'); }\n  set url(value: string) { this.G.D.setp(this._pid, 'url', value); }\n\n  get due_type(): poll_due_type_t { return this.G.D.getp(this._pid, 'due_type') as poll_due_type_t; }\n  set due_type(value: poll_due_type_t) { this.G.D.setp(this._pid, 'due_type', value); }\n\n  // Date objects are stored as ISO strings:\n\n  get start_date(): Date {\n    const str = this.G.D.getp(this._pid, 'start_date'); \n    return str==''?null:new Date(str); \n  }\n  set start_date(value: Date) { \n    this.G.D.setp(this._pid, 'start_date', \n      ((value||'')!='') && (value.getTime() === value.getTime()) ? value.toISOString() : ''); \n  }\n\n  get due_custom(): Date {\n    const due_str = this.G.D.getp(this._pid, 'due_custom'); \n    return due_str==''?null:new Date(due_str); \n  }\n  set due_custom(value: Date) { \n    this.G.D.setp(this._pid, 'due_custom', \n      // TODO: improve validity check already in form field!\n      ((value||'')!='') && (value.getTime() === value.getTime()) ? value.toISOString() : ''); \n  }\n\n  get due(): Date {\n    const due_str = this.G.D.getp(this._pid, 'due'); \n    return (due_str == '') ? null : new Date(due_str); \n  }\n  set due(value: Date) { \n    this.G.D.setp(this._pid, 'due', \n      // TODO: improve validity check already in form field!\n      ((value||'')!='') && (value.getTime() === value.getTime()) ? value.toISOString() : ''); \n  }\n  get due_string(): string {\n    return this.G.D.format_date(this.due);\n  }\n\n  private _options: Record<string, Option> = {};\n  _add_option(o: Option) {\n//    this.G.L.entry(\"Poll._add_option\");\n    // will only be called by the option itself to self-register in its poll!\n    if (o.oid in this._options) {\n      return false;\n    } else {\n      this._options[o.oid] = o;\n      if (!this.own_ratings_map.has(o.oid)) this.own_ratings_map.set(o.oid, new Map());\n      if (!this.proxy_ratings_map.has(o.oid)) this.proxy_ratings_map.set(o.oid, new Map());\n      if (!this.direct_delegation_map.has(o.oid)) this.direct_delegation_map.set(o.oid, new Map());\n      if (!this.inv_direct_delegation_map.has(o.oid)) this.inv_direct_delegation_map.set(o.oid, new Map());\n      if (!this.indirect_delegation_map.has(o.oid)) this.indirect_delegation_map.set(o.oid, new Map());\n      if (!this.inv_indirect_delegation_map.has(o.oid)) this.inv_indirect_delegation_map.set(o.oid, new Map());\n      if (!this.effective_delegation_map.has(o.oid)) this.effective_delegation_map.set(o.oid, new Map());\n      if (!this.inv_effective_delegation_map.has(o.oid)) this.inv_effective_delegation_map.set(o.oid, new Map());\n      return true;\n    }\n  }\n\n  get options(): Record<string, Option> { return this._options; }\n  remove_option(oid: string) {\n    if (oid in this._options) {\n      delete this._options[oid];\n      /* the following should not be necessary since options cannot be removed once running:\n      this.own_ratings_map.delete(oid);\n      this.effective_ratings_map.delete(oid);\n      this.direct_delegation_map.delete(oid);\n      this.inv_direct_delegation_map.delete(oid);\n      this.indirect_delegation_map.delete(oid);\n      this.inv_indirect_delegation_map.delete(oid);\n      this.effective_delegation_map.delete(oid);\n      this.inv_effective_delegation_map.delete(oid);\n      */\n      return true;\n    } else {\n      return false;\n    }\n  }\n  get oids() { return Object.keys(this._options); }\n  get n_options() { return this.oids.length; }\n\n  get_my_own_rating(oid: string): number {\n    if (!this.own_ratings_map.has(oid)) {\n      this.own_ratings_map.set(oid, new Map());\n    }\n    const ratings_map = this.own_ratings_map.get(oid);\n    if (!ratings_map.has(this.myvid)) {\n      ratings_map.set(this.myvid, 0);\n    }\n    return ratings_map.get(this.myvid);\n  }\n\n  set_my_own_rating(oid: string, value: number, store: boolean=true) {\n    /** Set own rating in caches and optionally store it in DB.\n     * While a slider is dragged, this will be called with store=false,\n     * when the slider is released, it will be called with store=true\n     */\n    if (store) {\n      this.G.D.setv(this._pid, \"rating.\" + oid, value.toString());\n    }\n    this.update_own_rating(this.myvid, oid, value, true);\n  }\n\n  get_my_proxy_rating(oid: string): number {\n    return (this.proxy_ratings_map.get(oid) || new Map()).get(this.myvid) || 0;\n  }\n\n  get_my_effective_rating(oid: string): number {\n    return (this.effective_ratings_map.get(oid) || new Map()).get(this.myvid) || 0;\n  }\n\n  get remaining_time_fraction(): number {\n    // the remaining running time as a fraction of the total running\n    if ((this._state == \"running\")&&(!!this.start_date)&&(this.due)) {\n      const t0 = this.start_date.getTime(),\n          t1 = (new Date()).getTime(),\n          t2 = this.due.getTime();\n      return (t2 - t1) / (t2 - t0);\n    } else {\n      return null;\n    }\n  }\n\n  get is_closing_soon(): boolean {\n    if ((this._state == \"running\")&&(!!this.start_date)&&(this.due)) {\n      return this.remaining_time_fraction < this.G.S.closing_soon_fraction;\n    } else {\n      return false;\n    }\n  }\n\n  get am_abstaining(): boolean {\n    /** whether or not I'm currently abstaining */\n    if (!!this.T.votes_map) {\n      const myvote = this.T.votes_map.get(this.myvid);\n      return myvote === undefined;\n    } else {\n      return false;\n    }\n  }\n\n  get my_n_rated_positive(): number {\n    /** number of positive ratings */\n    let n_positive = 0;\n    for (const oid of this.oids) {\n      if (this.get_my_proxy_rating(oid) > 0) {\n        n_positive++;\n      }\n    }\n    return n_positive;\n  }\n\n  get my_n_approved(): number {\n    /** number of approved options */\n    let n_approved = 0;\n    for (const oid of this.oids) {\n      if (this.T.approvals_map.get(oid) && this.T.approvals_map.get(oid).get(this.myvid)) {\n        n_approved++;\n      }\n    }\n    return n_approved;\n  }\n\n  get have_delegated(): boolean {\n    const did = this.G.Del.get_my_outgoing_dids_cache(this.pid).get(\"*\");\n    if (!did) return false;\n    const agreement = this.G.Del.get_agreement(this.pid, did);\n    return (agreement.status == \"agreed\") && (agreement.active_oids.size == agreement.accepted_oids.size);\n  }\n\n  ratings_have_changed = false;\n\n  // OTHER HOOKS:\n\n  set_db_credentials() {\n    // set db credentials according to this.db... settings:\n    if (this.db=='central') {\n      this.db_server_url = environment.data_service.central_db_server_url; \n      this.db_password = environment.data_service.central_db_password;\n    } else if (this.db=='poll') {\n      this.db_server_url = this.G.P.polls[this.db_from_pid].db_server_url;\n      this.db_password = this.G.P.polls[this.db_from_pid].db_password;\n    } else if (this.db=='other') {\n      this.db_server_url = this.db_custom_server_url;\n      this.db_password = this.db_custom_password;\n    } else if (this.db=='default') {\n      this.db_server_url = this.G.S.db_server_url;\n      this.db_password = this.G.S.db_password;\n    } \n    this.db_server_url = this.G.D.fix_url(this.db_server_url);\n  }\n\n  set_due() {\n    // set due according to due_type, current date, and due_custom:\n    if (this.due_type=='custom') {\n      this.due = this.due_custom;\n    } else {\n      // get current time rounded downwards to full minutes:\n      var due = new Date();\n      due.setSeconds(0, 0);\n      const\n          dayofweek = due.getDay(),\n          hour = due.getHours(),\n          due_as_ms = due.getTime();\n      if (this.due_type=='midnight') {\n        due.setHours(23, 59, 59, 999); // almost midnight on the same day according to local time\n      } else if (this.due_type=='10min') {\n        due = new Date(due_as_ms + 10*60*1000);\n      } else if (this.due_type=='hour')  {\n        due = new Date(due_as_ms + 60*60*1000);\n      } else if (this.due_type=='24hr')  {\n        due = new Date(due_as_ms + 24*60*60*1000);\n      } else if (this.due_type=='tomorrow-noon') {\n        due = new Date(due_as_ms + 24*60*60*1000);\n        due.setHours(12, 0, 0, 0);\n      } else if (this.due_type=='tomorrow-night') {\n        due = new Date(due_as_ms + 24*60*60*1000);\n        due.setHours(23, 59, 59, 999); \n      } else if (this.due_type=='friday-noon') {\n        if (hour < 12 || dayofweek != 5) {\n          due = new Date(due_as_ms + ((5-dayofweek)%7)*24*60*60*1000);\n        } else {\n          // it's Friday afternoon, so take next Friday:\n          due = new Date(due_as_ms + 7*24*60*60*1000);\n        }\n        due.setHours(12, 0, 0, 0);   \n      } else if (this.due_type=='sunday-night') {\n        due = new Date(due_as_ms + ((7-dayofweek)%7)*24*60*60*1000);\n        due.setHours(23, 59, 59, 999); \n      } else if (this.due_type=='week')  {\n        due = new Date(due_as_ms + 7*24*60*60*1000);\n        due.setHours(23, 59, 59, 999); \n      } else if (this.due_type=='two-weeks')  {\n        due = new Date(due_as_ms + 2*7*24*60*60*1000);\n        due.setHours(23, 59, 59, 999); \n      } else if (this.due_type=='four-weeks') {\n        due = new Date(due_as_ms + 4*7*24*60*60*1000);\n        due.setHours(23, 59, 59, 999); \n      }\n      this.due = due;\n    }\n    this.G.L.info(\"PollService.set_due\", due);\n  }\n\n  init_password() {\n    // generate and store a random poll password:\n    if ((this.password||'')=='') {\n      this.password = this.G.P.generate_password(); \n      this.G.L.info(\"PollService.init_password\", this.password);\n    } else {\n      this.G.L.error(\"Attempted to init_password() when password already existed.\");\n    }\n  }\n\n  init_myvid() {\n    this.myvid = this.G.P.generate_vid();\n    this.G.L.info(\"PollService.init_vid\", this.myvid);\n  }\n\n  /*\n  init_myratings() {\n    for (const oid in this.options) {\n      this.set_my_own_rating(oid, 0);\n    }\n  }\n  */\n \n  after_incoming_changes(tally=true) {\n    if ((this.state == 'running') && (this.ratings_have_changed)) {\n      this.ratings_have_changed = false;\n      if (tally) {\n        this.tally_all();\n      }\n    }\n  }\n\n  // TALLYING:\n\n  /* Implementation Notes: \n  - For performance reasons, we use Maps instead of Records here. \n  - CAUTION: map entries are NOT accessed via [...] and in but via .get(), .set() and .has() !\n  - all Map type variables are named ..._map to make this unmistakable!\n  */\n\n  /** Ratings and Delegation\n   * \n   * The tallying is based on all voters' *effective* ratings of all options.\n   * \n   * A voter may or may not have delegated her rating of an option to some other voter.\n   * \n   * If she has not done so,\n   * her effective rating of an option equals her *own* rating that she set via the sliders in the poll page.\n   * \n   * If a voter i has delegated her rating of an option x to another voter j,\n   * her effective rating of x equals the own rating of x of her *effective delegate for x* .\n   * \n   * If j has not delegated her rating of x to yet another voter k, \n   * then i's effective delegate for x is j.\n   * Otherwise i's effective delegate for x equals j's effective delegate for x.\n   * \n   * The relevant data for all this is stored in redundant form in the following maps,\n   * which are also cached in DataService: \n   */\n\n  // for each oid and vid, the base (pre-delegation) rating (default: 0):\n  _own_ratings_map: Map<string, Map<string, number>>;\n  get own_ratings_map(): Map<string, Map<string, number>> {\n    if (!this._own_ratings_map) {\n      if (this._pid in this.G.D.own_ratings_map_caches) {\n        this._own_ratings_map = this.G.D.own_ratings_map_caches[this._pid];\n      } else {\n        this.G.D.own_ratings_map_caches[this._pid] = this._own_ratings_map = new Map();\n        for (const oid of this.oids) {\n          this._own_ratings_map.set(oid, new Map());\n        }\n        // TODO: copy my own ratings into it?\n      }  \n    }\n    return this._own_ratings_map;\n  }\n\n  // for each oid and vid, the direct delegate's vid (default: null, meaning no delegation):\n  _direct_delegation_map: Map<string, Map<string, string>>;\n  get direct_delegation_map(): Map<string, Map<string, string>> {\n    if (!this._direct_delegation_map) {\n      if (this._pid in this.G.D.direct_delegation_map_caches) {\n        this._direct_delegation_map = this.G.D.direct_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.direct_delegation_map_caches[this._pid] = this._direct_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._direct_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._direct_delegation_map;\n  }\n\n  // for each oid and vid, the set of vids who directly delegated to this vid (default: null, meaning no delegation):\n  _inv_direct_delegation_map: Map<string, Map<string, Set<string>>>;\n  get inv_direct_delegation_map(): Map<string, Map<string, Set<string>>> {\n    if (!this._inv_direct_delegation_map) {\n      if (this._pid in this.G.D.inv_direct_delegation_map_caches) {\n        this._inv_direct_delegation_map = this.G.D.inv_direct_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.inv_direct_delegation_map_caches[this._pid] = this._inv_direct_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._inv_direct_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._inv_direct_delegation_map;\n  }\n\n  // for each oid and vid, the set of vids who this voter directly or indirectly delegated to (default: null, meaning no delegation):\n  _indirect_delegation_map: Map<string, Map<string, Set<string>>>;\n  get indirect_delegation_map(): Map<string, Map<string, Set<string>>> {\n    if (!this._indirect_delegation_map) {\n      if (this._pid in this.G.D.indirect_delegation_map_caches) {\n        this._indirect_delegation_map = this.G.D.indirect_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.indirect_delegation_map_caches[this._pid] = this._indirect_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._indirect_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._indirect_delegation_map;\n  }\n\n  // for each oid and vid, the set of vids who have directly or indirectly delegated to this voter (default: null, meaning no delegation):\n  _inv_indirect_delegation_map: Map<string, Map<string, Set<string>>>;\n  get inv_indirect_delegation_map(): Map<string, Map<string, Set<string>>> {\n    if (!this._inv_indirect_delegation_map) {\n      if (this._pid in this.G.D.inv_indirect_delegation_map_caches) {\n        this._inv_indirect_delegation_map = this.G.D.inv_indirect_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.inv_indirect_delegation_map_caches[this._pid] = this._inv_indirect_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._inv_indirect_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._inv_indirect_delegation_map;\n  }\n\n  // for each oid and vid, the effective delegate's vid (default: null, meaning no delegation):\n  _effective_delegation_map: Map<string, Map<string, string>>;\n  get effective_delegation_map(): Map<string, Map<string, string>> {\n    if (!this._effective_delegation_map) {\n      if (this._pid in this.G.D.effective_delegation_map_caches) {\n        this._effective_delegation_map = this.G.D.effective_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.effective_delegation_map_caches[this._pid] = this._effective_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._effective_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._effective_delegation_map;\n  }\n\n  // for each oid and vid, the set of vids who effectively delegated to this vid, excluding the vid itself (default: null, meaning no delegation):\n  _inv_effective_delegation_map: Map<string, Map<string, Set<string>>>;\n  get inv_effective_delegation_map(): Map<string, Map<string, Set<string>>> {\n    if (!this._inv_effective_delegation_map) {\n      if (this._pid in this.G.D.inv_effective_delegation_map_caches) {\n        this._inv_effective_delegation_map = this.G.D.inv_effective_delegation_map_caches[this._pid];\n      } else {\n        this.G.D.inv_effective_delegation_map_caches[this._pid] = this._inv_effective_delegation_map = new Map();\n        for (const oid of this.oids) {\n          this._inv_effective_delegation_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._inv_effective_delegation_map;\n  }\n\n  // for each oid and vid, the proxy (post-delegation) rating (default: 0):\n  _proxy_ratings_map: Map<string, Map<string, number>>;\n  get proxy_ratings_map(): Map<string, Map<string, number>> {\n    if (!this._proxy_ratings_map) {\n      if (this._pid in this.G.D.proxy_ratings_map_caches) {\n        this._proxy_ratings_map = this.G.D.proxy_ratings_map_caches[this._pid];\n      } else {\n        this.G.D.proxy_ratings_map_caches[this._pid] = this._proxy_ratings_map = new Map();\n        for (const oid of this.oids) {\n          this._proxy_ratings_map.set(oid, new Map());\n        }\n        // TODO: copy my own ratings into it?\n      }  \n    }\n    return this._proxy_ratings_map;\n  }\n\n  // for each oid and vid, the max (over oids) proxy rating (default: 0):\n  _max_proxy_ratings_map: Map<string, number>;\n  get max_proxy_ratings_map(): Map<string, number> {\n    if (!this._max_proxy_ratings_map) {\n      if (this._pid in this.G.D.max_proxy_ratings_map_caches) {\n        this._max_proxy_ratings_map = this.G.D.max_proxy_ratings_map_caches[this._pid];\n      } else {\n        this.G.D.max_proxy_ratings_map_caches[this._pid] = this._max_proxy_ratings_map = new Map();\n      }  \n    }\n    return this._max_proxy_ratings_map;\n  }\n\n  // for each oid and vid, the argmax (over oids) proxy rating (i.e., list of oids, default: []):\n  _argmax_proxy_ratings_map: Map<string, Set<string>>;\n  get argmax_proxy_ratings_map(): Map<string, Set<string>> {\n    if (!this._argmax_proxy_ratings_map) {\n      if (this._pid in this.G.D.argmax_proxy_ratings_map_caches) {\n        this._argmax_proxy_ratings_map = this.G.D.argmax_proxy_ratings_map_caches[this._pid];\n      } else {\n        this.G.D.argmax_proxy_ratings_map_caches[this._pid] = this._argmax_proxy_ratings_map = new Map();\n      }  \n    }\n    return this._argmax_proxy_ratings_map;\n  }\n\n  // for each oid and vid, the effective (post-delegation and post-adjustment to ensure some approval) rating (default: 0):\n  _effective_ratings_map: Map<string, Map<string, number>>;\n  get effective_ratings_map(): Map<string, Map<string, number>> {\n    if (!this._effective_ratings_map) {\n      if (this._pid in this.G.D.effective_ratings_map_caches) {\n        this._effective_ratings_map = this.G.D.effective_ratings_map_caches[this._pid];\n      } else {\n        this.G.D.effective_ratings_map_caches[this._pid] = this._effective_ratings_map = new Map();\n        for (const oid of this.oids) {\n          this._effective_ratings_map.set(oid, new Map());\n        }\n      }  \n    }\n    return this._effective_ratings_map;\n  }\n\n  T: tally_cache_t;\n\n  get agreement_level(): number  {\n    const approval_scores_map = this.T.approval_scores_map, N = this.T.n_not_abstaining;\n    let expected_approval_score = 0;\n    for (const [oid, p] of this.T.shares_map.entries()) {\n      expected_approval_score += p * approval_scores_map.get(oid);\n    }\n    return expected_approval_score / Math.max(1, N);\n  }\n\n  // Methods dealing with changes to the delegation graph:\n\n  add_delegation(client_vid:string, oid:string, delegate_vid:string): boolean {\n    if (!environment.delegation.enabled) {\n      this.G.L.error(\"PollService.add_delegation when delegation is disabled\", this._pid, client_vid, oid, delegate_vid);\n      return false;\n    }\n    /** Called whenever a delegation shall be added. Returns whether this succeeded */\n\n    this.G.L.debug(\"add_delegation entry\", this.pid, oid, client_vid, delegate_vid);\n\n    const dir_d_map = this.direct_delegation_map.get(oid), \n          eff_d_map = this.effective_delegation_map.get(oid), \n          new_eff_d_vid = eff_d_map.get(delegate_vid) || delegate_vid;\n\n    // make sure no delegation exists yet:\n    // (we no longer require that delegation would not create a cycle)\n    if (dir_d_map.has(client_vid)) {\n\n      if (dir_d_map.get(client_vid) == delegate_vid) {\n        this.G.L.warn(\"PollService.add_delegation of existing delegation\", this._pid, client_vid, oid, delegate_vid, dir_d_map.get(client_vid));\n        return true;\n      } else {\n        this.G.L.error(\"PollService.add_delegation when delegation already exists\", this._pid, client_vid, oid, delegate_vid, dir_d_map.get(client_vid));\n        return false;  \n      }\n\n    /*\n    } else if (new_eff_d_vid == client_vid) { \n\n      this.G.L.error(\"PollService.add_delegation when this would create a cycle\", this._pid, client_vid, oid, delegate_vid);\n      return false;\n    */\n    } else {\n\n      this.G.L.trace(\"PollService.add_delegation feasible\", this._pid, client_vid, oid, delegate_vid);\n\n      // register DIRECT delegation and inverse:\n      dir_d_map.set(client_vid, delegate_vid);\n      const inv_dir_d_map = this.inv_direct_delegation_map.get(oid);\n      if (!inv_dir_d_map.has(delegate_vid)) {\n        inv_dir_d_map.set(delegate_vid, new Set());\n      }\n      inv_dir_d_map.get(delegate_vid).add(client_vid);\n\n      // update INDIRECT delegations and inverses:\n      const ind_d_map = this.indirect_delegation_map.get(oid),\n            ind_ds_of_delegate = ind_d_map.get(delegate_vid),\n            inv_ind_d_map = this.inv_indirect_delegation_map.get(oid),\n            inv_eff_d_map = this.inv_effective_delegation_map.get(oid);\n      if (!inv_ind_d_map.has(delegate_vid)) {\n        inv_ind_d_map.set(delegate_vid, new Set());\n      }\n      const inv_ind_ds_of_delegate = inv_ind_d_map.get(delegate_vid),\n            inv_eff_ds_of_client = inv_eff_d_map.get(client_vid);\n      // vid:\n      const ind_ds_of_client = new Set([delegate_vid]);\n      ind_d_map.set(client_vid, ind_ds_of_client);\n      inv_ind_ds_of_delegate.add(client_vid);\n      if (ind_ds_of_delegate) {\n        for (const vid of ind_ds_of_delegate) {\n          if (vid != client_vid) { // avoid self-reference entries\n            ind_ds_of_client.add(vid);\n            if (!inv_ind_d_map.has(vid)) {\n              inv_ind_d_map.set(vid, new Set());\n            }\n            inv_ind_d_map.get(vid).add(client_vid);  \n          }\n        }\n      }\n      // voters dependent on client:\n      if (inv_eff_ds_of_client) {\n        for (const vid of inv_eff_ds_of_client) {\n          const ind_ds_of_vid = ind_d_map.get(vid);\n          if (vid != delegate_vid) { // avoid self-reference entries\n            ind_ds_of_vid.add(delegate_vid);\n            inv_ind_ds_of_delegate.add(vid);  \n          }\n          if (ind_ds_of_delegate) {\n            for (const vid2 of ind_ds_of_delegate) {\n              if (vid2 != vid) { // avoid self-reference entries\n                ind_ds_of_vid.add(vid2);\n                if (!inv_ind_d_map.has(vid2)) {\n                  inv_ind_d_map.set(vid2, new Set());\n                }\n                inv_ind_d_map.get(vid2).add(vid);  \n              }\n            }\n          }  \n        }    \n      }\n\n      // update EFFECTIVE delegations, inverses, and proxy ratings:\n      if (new_eff_d_vid == client_vid) {\n        // a cycle is created\n        const rmap = this.own_ratings_map.get(oid);\n        let vid = delegate_vid,\n            new_proxy_rating = rmap.get(vid) || 0,\n            cycle_len = 0,\n            includes_me = false;\n        // loop through cycle members:\n        for (cycle_len = 1; cycle_len <= this.T.all_vids_set.size; cycle_len++) {\n          vid = dir_d_map.get(vid);\n          if (vid == delegate_vid) break;\n          // use max rating on cycle as new proxy rating:\n          new_proxy_rating = Math.max(new_proxy_rating, this.own_ratings_map.get(oid).get(vid) || 0);\n          if (vid == this.myvid) {\n            includes_me = true;\n          }\n        } \n        this.G.L.info(\"add_delegation created cycle of length\", cycle_len, includes_me, this.pid, oid, client_vid, delegate_vid);\n        if (includes_me) {\n          this.T.my_cycle_len = cycle_len;\n        }\n        this.update_proxy_rating(client_vid, oid, new_proxy_rating);\n        // update proxy rating of all dependent voters:\n        if (inv_eff_ds_of_client) {\n          for (const vid of inv_eff_ds_of_client) {\n            this.update_proxy_rating(vid, oid, new_proxy_rating);\n          }  \n        }  \n      } else {\n        // determine new proxy rating:\n        const new_proxy_rating = this.own_ratings_map.get(oid).get(new_eff_d_vid) || 0;\n        // update eff_d_map and inverse:\n        if (!inv_eff_d_map.has(new_eff_d_vid)) {\n          inv_eff_d_map.set(new_eff_d_vid, new Set());\n        }\n        const inv_eff_ds_of_new_eff_d = inv_eff_d_map.get(new_eff_d_vid);\n        // this vid:\n        eff_d_map.set(client_vid, new_eff_d_vid);\n        inv_eff_ds_of_new_eff_d.add(client_vid);\n        this.update_proxy_rating(client_vid, oid, new_proxy_rating);\n        // dependent voters:\n        if (inv_eff_ds_of_client) {\n          for (const vid of inv_eff_ds_of_client) {\n            eff_d_map.set(vid, new_eff_d_vid);\n            inv_eff_ds_of_new_eff_d.add(vid);\n            this.update_proxy_rating(vid, oid, new_proxy_rating);\n          }  \n        }  \n      }\n      this.G.L.debug(\"add_delegation exit\", this.pid, oid, client_vid, delegate_vid);\n      return true;\n    }\n  }\n\n  del_delegation(client_vid: string, oid: string) {\n    // Called whenever a voter revokes her delegation for some option\n    const dir_d_map = this.direct_delegation_map.get(oid), \n          eff_d_map = this.effective_delegation_map.get(oid);\n    // make sure a delegation exists:\n    if (!dir_d_map.has(client_vid)) {\n      this.G.L.error(\"PollService.del_delegation when no delegation exists\", client_vid, oid);\n    } else {\n      const old_d_vid = dir_d_map.get(client_vid),\n            old_eff_d_of_client = eff_d_map.get(client_vid),\n            inv_dir_d_map = this.inv_direct_delegation_map.get(oid),\n            ind_d_map = this.indirect_delegation_map.get(oid),\n            old_ind_ds_of_client = ind_d_map.get(client_vid),\n            inv_ind_d_map = this.inv_indirect_delegation_map.get(oid),\n            inv_ind_ds_of_client = inv_ind_d_map.get(client_vid),\n            inv_eff_d_map = this.inv_effective_delegation_map.get(oid),\n            inv_eff_ds_of_client = inv_eff_d_map.get(client_vid),\n            inv_eff_ds_of_old_eff_d_of_client = inv_eff_d_map.get(old_eff_d_of_client),\n            is_on_cycle = ind_d_map.get(old_d_vid).has(client_vid);\n\n      this.G.L.debug(\"del_delegation entry\", this.pid, oid, client_vid, old_d_vid, is_on_cycle);\n\n      // deregister DIRECT delegation and inverse of vid:\n      dir_d_map.delete(client_vid);\n      inv_dir_d_map.get(old_d_vid).delete(client_vid);\n\n      // deregister INDIRECT delegation of client_vid to others:\n      for (const vid of old_ind_ds_of_client) {\n        inv_ind_d_map.get(vid).delete(client_vid);\n      }\n      ind_d_map.delete(client_vid);\n\n      // deregister INDIRECT delegations no longer valid:\n      if (is_on_cycle) {\n        // we're on a cycle, so\n        // first find cycle elements in correct forward order:\n        let vid = old_d_vid,\n            former_cycle = [vid];\n        // loop through cycle members:\n        while (true) {\n          vid = dir_d_map.get(vid);\n          former_cycle.push(vid);\n          if (vid == client_vid) break;\n        } \n        if (former_cycle.includes(this.myvid)) {\n          this.T.my_cycle_len = null;\n        }\n        // now for each vid indirectly delegating to client, ...\n        if (inv_ind_ds_of_client) {\n          for (const vid of inv_ind_ds_of_client) {\n            // follow delegation path to cycle:\n            let cycle_vid = vid,\n                cycle_pos = -1;\n            while (true) {\n              cycle_pos = former_cycle.indexOf(cycle_vid);\n              if (cycle_pos != -1) {\n                break;\n              }\n              cycle_vid = dir_d_map.get(cycle_vid);\n            }\n            // then deregister indirect delegations to all earlier cycle members:\n            const ind_ds_of_vid = ind_d_map.get(vid);\n            for (let pos = 0; pos < cycle_pos; pos++) {\n              const vid2 = former_cycle[pos];\n              if (ind_ds_of_vid.has(vid2)) {\n                ind_ds_of_vid.delete(vid2);\n                inv_ind_d_map.get(vid2).delete(vid);  \n              }\n            }\n          }\n        }\n      } else {\n        // we're not on a cycle, so\n        // deregister INDIRECT delegation of voters who indirectly delegated to client_vid \n        // to all old indirect delegates of vid:\n        if (inv_ind_ds_of_client) {\n          for (const vid of inv_ind_ds_of_client) {\n            const ind_ds_of_vid = ind_d_map.get(vid);\n            for (const vid2 of old_ind_ds_of_client) {\n              ind_ds_of_vid.delete(vid2);\n              inv_ind_d_map.get(vid2).delete(vid);\n            }\n          }\n        }\n      }\n\n      // deregister EFFECTIVE delegation and inverse of vid and reset proxy rating to own rating:\n      const new_proxy_rating = this.own_ratings_map.get(oid).get(client_vid) || 0;\n      eff_d_map.delete(client_vid);\n      inv_eff_ds_of_old_eff_d_of_client.delete(client_vid);\n      this.update_proxy_rating(client_vid, oid, new_proxy_rating);\n\n      // rewire EFFECTIVE delegation and inverse of voters who indirectly delegated to vid,\n      // and update proxy ratings:\n      if (inv_ind_ds_of_client) {\n        for (const vid of inv_ind_ds_of_client) {\n          inv_eff_ds_of_old_eff_d_of_client.delete(vid);\n          eff_d_map.set(vid, client_vid);\n          inv_eff_ds_of_client.add(vid);\n          this.update_proxy_rating(vid, oid, new_proxy_rating);\n        }            \n      }\n      this.G.L.debug(\"del_delegation exit\", this.pid, oid, client_vid, old_d_vid, is_on_cycle);\n    }\n  }\n\n  get_n_indirect_option_clients(vid: string, oid: string): number {\n    /** count how many voters have indirectly delegated to vid for oid */\n    return (this.inv_indirect_delegation_map.get(oid).get(vid)||new Set()).size;\n  }\n\n  get_n_indirect_clients(vid: string): number {\n    /** count how many voters have indirectly delegated to vid for some oid */\n    let clients = new Set();\n    for (const oid of this.oids) {\n      for (const vid2 of (this.inv_indirect_delegation_map.get(oid).get(vid)||new Set())) {\n        clients.add(vid2);\n      }\n    }\n    return clients.size;\n  }\n\n  tally_all() {\n    // Called after initialization and when changes come via the db.\n    // Tallies all. \n    this.G.L.entry(\"Poll.tally_all\", this._pid);\n\n    this.G.D.tally_caches[this._pid] = this.T = {\n      all_vids_set: new Set(),\n      n_not_abstaining: 0,\n      effective_ratings_ascending_map: new Map(),\n      thresholds_map: new Map(),\n      approvals_map: new Map(),\n      approval_scores_map: new Map(),\n      total_effective_ratings_map: new Map(),\n      scores_map: new Map(),\n      oids_descending: [],\n      votes_map: new Map(),\n      n_votes_map: new Map(),\n      shares_map: new Map(),\n      my_cycle_len: null\n    }\n    // extract voters and total_ratings:\n    for (const [oid, effective_ratings_map] of this.effective_ratings_map) {\n//      this.G.L.trace(\"Poll.tally_all rating\", this._pid, oid, [...rs_map]);\n      let total_effective_rating = 0;\n      for (const [vid, effective_rating] of effective_ratings_map) {\n//        this.G.L.trace(\"Poll.tally_all rating\", this._pid, oid, vid, r);\n        this.T.all_vids_set.add(vid);\n        total_effective_rating += effective_rating;\n      }\n      this.T.total_effective_ratings_map.set(oid, total_effective_rating);\n    }\n\n    // count non-abstaining voters:\n    this.T.n_not_abstaining = 0;\n    for (const vid of this.T.all_vids_set) {\n      if (this.max_proxy_ratings_map.get(vid) || 0 > 0) {\n        this.T.n_not_abstaining += 1;\n      }\n    }\n\n//    this.G.L.trace(\"Poll.tally_all voters\", this._pid, this.T.n_voters, [...this.T.allvids_set]);\n    // calculate thresholds, approvals, and scores of all options:\n    const score_factor = this.T.n_not_abstaining * 128;\n//    this.G.L.trace(\"Poll.tally_all options\", this._pid, this._options);\n    for (const oid of this.oids) {\n      const effective_ratings_map = this.effective_ratings_map.get(oid);\n//      this.G.L.trace(\"Poll.tally_all rs_map\", this._pid, oid, [...rs_map]);\n      if (effective_ratings_map) {\n        const effective_ratings_ascending = this.update_ratings_ascending(oid, effective_ratings_map);\n//        this.G.L.trace(\"Poll.tally_all rsasc\", this._pid, oid, [...rs_map], [...rsasc]);\n        this.update_threshold_and_approvals(oid, effective_ratings_map, effective_ratings_ascending);\n        const [approval_score, _dummy] = this.update_approval_score(oid, this.T.approvals_map.get(oid) || new Map());\n        this.update_score(oid, approval_score, this.T.total_effective_ratings_map.get(oid) || 0, score_factor);\n//        this.G.L.trace(\"Poll.tally_all aps, apsc, sc\", this._pid, oid, this.T.approvals_map.get(oid), apsc, this.T.scores_map.get(oid));\n      } else {\n        this.T.effective_ratings_ascending_map.set(oid, []);\n        this.T.thresholds_map.set(oid, 100);\n        this.T.approvals_map.set(oid, new Map());\n        this.T.approval_scores_map.set(oid, 0);\n        this.T.total_effective_ratings_map.set(oid, 0);\n        this.update_score(oid, 0, 0, score_factor);\n      }\n    }\n//    this.G.L.trace(\"Poll.tally_all scores\", this._pid, [...this.T.scores_map]);\n    // order and calculate votes and shares:\n    this.update_ordering();\n    const oids_descending = this.T.oids_descending;\n//    this.G.L.trace(\"Poll.tally_all oidsdesc\", this._pid, oidsdesc);\n    for (const vid of this.T.all_vids_set) {\n      this.update_vote(vid, oids_descending);\n    }\n//    this.G.L.trace(\"Poll.tally_all votes\", this._pid, this.T.votes_map);\n    if (this.update_shares(oids_descending)) {\n      this.G.L.trace(\"Poll.tally_all pie charts need updating\");\n      if (!!this.G.D.page && typeof this.G.D.page['show_stats'] === 'function') {\n        this.G.D.page.show_stats();\n      }\n    }\n//    this.G.L.trace(\"Poll.tally_all n_votes, shares\", this._pid, [...this.T.n_votes_map], [...this.T.shares_map]);\n\n    this.G.L.exit(\"Poll.tally_all\", this._pid);\n  }\n\n  // Methods dealing with individual rating updates:\n\n  update_own_rating(vid: string, oid: string, value: number, update_tally=false) {\n    // Called whenever a rating is updated.\n    // Updates the affected effective ratings based on delegation data.\n    // if changed, update rating:\n    this.G.L.trace(\"Poll.update_own_rating\", this.pid, vid, oid, value);\n    if (!this.own_ratings_map.has(oid)) {\n      this.own_ratings_map.set(oid, new Map());\n      this.G.L.trace(\"Poll.update_own_rating first own rating for option\", oid);\n    }\n    const rs_map = this.own_ratings_map.get(oid), old_value = rs_map.get(vid) || 0;\n    this.G.L.trace(\"Poll.update_own_rating old rating:\", this.pid, vid, oid, old_value);\n    if (value != old_value) {\n      this.ratings_have_changed = true;\n      // store new value:\n      rs_map.set(vid, value);\n      this.G.L.trace(\"Poll.update_own_rating new ratings map\", this.pid, oid, [...rs_map.entries()]);\n      // check whether vid has not delegated:\n      if (!this.direct_delegation_map.get(oid)) {\n        this.direct_delegation_map.set(oid, new Map());\n      }\n      if (!this.direct_delegation_map.get(oid).has(vid)) {\n        this.G.L.trace(\"Poll.update_own_rating voter has not delegated\", this.pid, vid, oid);\n\n        // vid has not delegated this rating,\n        // so update all dependent voters' effective ratings:\n        this.update_proxy_rating(vid, oid, value, update_tally);\n        const vid2s = (this.inv_effective_delegation_map.get(oid)||new Map()).get(vid);\n        if (vid2s) {\n          for (const vid2 of vid2s) {\n            // vid2 effectively delegates their rating of oid to vid,\n            // hence we store vid's new rating of oid as vid2's effective rating of oid:\n            this.update_proxy_rating(vid2, oid, value, update_tally);\n          }\n        }\n      }\n    }\n  }\n\n  update_proxy_rating(vid: string, oid: string, value: number, update_tally=false) {\n    // Called whenever a proxy rating is updated.\n    // Updates a rating and all depending quantities up to the final shares.\n    // Tries to do this as efficiently as possible.\n    this.G.L.entry(\"Poll.update_proxy_rating\", this.pid, vid, oid, value);\n\n    // if necessary, register voter:\n    if (!this.T.all_vids_set.has(vid)) {\n      this.T.all_vids_set.add(vid);\n      this.G.L.trace(\"Poll.update_proxy_rating n_changed, first proxy rating of voter\", vid);\n    }\n    if (!this.proxy_ratings_map.has(oid)) {\n      this.proxy_ratings_map.set(oid, new Map());\n      this.G.L.trace(\"Poll.update_proxy_rating first proxy rating for option\", oid);\n    }\n\n    // if changed, update proxy rating:\n    const proxy_rs_map = this.proxy_ratings_map.get(oid), \n          old_value = proxy_rs_map.get(vid) || 0;\n    if (value != old_value) {\n      this.G.L.trace(\"Poll.update_proxy_rating proxy rating of\", oid, \"by\", vid, \"changed from\", old_value, \"to\", value);\n      if (value != 0) {\n        proxy_rs_map.set(vid, value);\n      } else {\n        proxy_rs_map.delete(vid);\n      }\n      // update depending data:\n\n      // update effective ratings of this oid and potentially other oids:\n      let n_changed = false;\n      const old_max_r = this.max_proxy_ratings_map.get(vid) || 0,\n            old_argmax_r_set = this.argmax_proxy_ratings_map.get(vid) || new Set(),\n            eff_rating_changes_map = new Map<string, number>();\n      this.G.L.trace(\"Poll.update_proxy_rating old max, argmax\",old_max_r,[...old_argmax_r_set]);\n      var max_r = old_max_r, \n      argmax_r_set = old_argmax_r_set;\n      if (old_max_r == 0) {\n        this.G.L.trace(\"Poll.update_proxy_rating voter stops abstaining\");\n        // voter was abstaining before but is no longer since value > 0 \n        // => set new max and adjust rating to effectively 100 to ensure approval of oid:\n        max_r = value;\n        argmax_r_set = new Set([oid]);\n        eff_rating_changes_map.set(oid, 100);\n        this.T.n_not_abstaining += 1;\n        n_changed = true;\n      } else if (old_max_r == 100) {\n        this.G.L.trace(\"Poll.update_proxy_rating old max was 100\");\n        // some options were actually rated 100\n        if (old_value == 100) {\n          // oid was a favourite, so check if the only one:\n          if (argmax_r_set.size == 1) {\n            this.G.L.trace(\"Poll.update_proxy_rating option decreased from only favourite\");\n            // oid was sole favourite, have to find new max!\n            max_r = -1;\n            argmax_r_set = new Set();\n            for (const oid2 of this.oids) {\n              const r2 = this.proxy_ratings_map.get(oid2).get(vid) || 0;\n              if (r2 > max_r) {\n                max_r = r2;\n                argmax_r_set = new Set([oid2]);\n              } else if (r2 == max_r) {\n                argmax_r_set.add(oid2);\n              }\n            }\n            // resulting eff ratings changes:\n            if (max_r == 0) {\n              this.G.L.trace(\"Poll.update_proxy_rating voter begins abstaining\");\n              // voter begins abstaining.\n              eff_rating_changes_map.set(oid, 0);\n              this.T.n_not_abstaining -= 1;\n              n_changed = true;\n            } else {\n              if (!argmax_r_set.has(oid)) {\n                // oid no longer fav, so set proxy value as eff value:\n                eff_rating_changes_map.set(oid, value);\n              }\n              for (const oid2 of argmax_r_set) {\n                if (oid2 != oid) {\n                  eff_rating_changes_map.set(oid2, 100);\n                }\n              }  \n            }\n          } else {\n            // there were other favourites, so max stays at 100, so simply remove from argmax and set new value:\n            this.G.L.trace(\"Poll.update_proxy_rating option decreased from several favourites\");\n            argmax_r_set.delete(oid);\n            eff_rating_changes_map.set(oid, value);\n          }\n        } else {\n          this.G.L.trace(\"Poll.update_proxy_rating option changed from non-favourite\");\n          // oid was no favourite, so check if it becomes one:\n          if (value == 100) {\n            // oid becomes additional favourite, so add to argmax:\n            argmax_r_set.add(oid);\n          }\n          // set new value:\n          eff_rating_changes_map.set(oid, value);\n        }\n      } else {\n        this.G.L.trace(\"Poll.update_proxy_rating old max was >0 and <100\");\n        // no option was actually rated 100, so eff. ratings differ from proxy ratings\n        if (old_value == max_r) {\n          // oid was a favourite, so has eff. rating 100.\n          if (value < old_value) {\n            // rating decreases.\n            // check if oid is the only fav.:\n            if (argmax_r_set.size == 1) {\n              this.G.L.trace(\"Poll.update_proxy_rating option decreased from only favourite\");\n              // oid was sole favourite, have to find new max!\n              max_r = -1;\n              argmax_r_set = new Set();\n              for (const oid2 of this.oids) {\n                const r2 = this.proxy_ratings_map.get(oid2).get(vid) || 0;\n                if (r2 > max_r) {\n                  max_r = r2;\n                  argmax_r_set = new Set([oid2]);\n                } else if (r2 == max_r) {\n                  argmax_r_set.add(oid2);\n                }\n              }\n              // resulting eff ratings changes:\n              if (max_r == 0) {\n                this.G.L.trace(\"Poll.update_proxy_rating voter begins abstaining\");\n                // voter begins abstaining.\n                eff_rating_changes_map.set(oid, 0);\n                this.T.n_not_abstaining -= 1;\n                n_changed = true;\n              } else {\n                if (!argmax_r_set.has(oid)) {\n                  // oid no longer fav, so set proxy value as eff value:\n                  eff_rating_changes_map.set(oid, value);\n                }\n                for (const oid2 of argmax_r_set) {\n                  if (oid2 != oid) {\n                    eff_rating_changes_map.set(oid2, 100);\n                  }\n                }  \n              }\n            } else {\n              this.G.L.trace(\"Poll.update_proxy_rating option decreased from several favourites\");\n              // there were other favourites, so simply remove from argmax and set new value:\n              argmax_r_set.delete(oid);\n              eff_rating_changes_map.set(oid, value);\n            }\n          } else {\n            // rating increases.\n            // check if oid is the only fav.:\n            if (argmax_r_set.size == 1) {\n              this.G.L.trace(\"Poll.update_proxy_rating option increased from only favourite\");\n              // oid remains sole favourite\n            } else {\n              this.G.L.trace(\"Poll.update_proxy_rating option increased from several favourites\");\n              // oid becomes sole favourite, other favs. eff. ratings go down to their proxy ratings:\n              for (const oid2 of argmax_r_set) {\n                if (oid2 != oid) {\n                  eff_rating_changes_map.set(oid2, this.proxy_ratings_map.get(oid2).get(vid));\n                }\n              }\n              argmax_r_set = new Set([oid]);\n            }\n            max_r = value;\n          }\n        } else {\n          // oid was no favourite, so check if it becomes one:\n          if (value < old_value) {\n            this.G.L.trace(\"Poll.update_proxy_rating option decreased from non-favourite\");\n            // rating decreases, so just register rating:\n            eff_rating_changes_map.set(oid, value);\n          } else {\n            // oid might become a fav.::\n            if (value == max_r) {\n              this.G.L.trace(\"Poll.update_proxy_rating option increased to several favourites\");\n              // rating increases to current max, so oid becomes additional fav.\n              argmax_r_set.add(oid);\n              eff_rating_changes_map.set(oid, 100);\n            } else if (value > max_r) {\n              this.G.L.trace(\"Poll.update_proxy_rating option increased to only favourite\");\n              // rating increases beyond current max, so oid becomes sole fav. with eff, rating 100\n              // other favs. eff. ratings go down to their proxy ratings:\n              for (const oid2 of argmax_r_set) {\n                if (oid2 != oid) {\n                  eff_rating_changes_map.set(oid2, this.proxy_ratings_map.get(oid2).get(vid));\n                }\n              }\n              max_r = value;\n              argmax_r_set = new Set([oid]);\n              eff_rating_changes_map.set(oid, 100);\n            } else {\n              this.G.L.trace(\"Poll.update_proxy_rating option increased to non-favourite\");\n              eff_rating_changes_map.set(oid, value);\n            }\n          }\n        }\n      }\n      this.G.L.trace(\"Poll.update_proxy_rating\",n_changed,[...eff_rating_changes_map],old_max_r,max_r,[...old_argmax_r_set],[...argmax_r_set]);\n      // store new max, argmax:\n      if (max_r > 0) {\n        this.max_proxy_ratings_map.set(vid, max_r);\n      } else {\n        this.max_proxy_ratings_map.delete(vid);\n      }\n      this.argmax_proxy_ratings_map.set(vid, argmax_r_set);\n      // now update what needs to be updated as a consequence:\n      if (eff_rating_changes_map.size > 0) {\n        this.update_proxy_rating_phase2(vid, n_changed, eff_rating_changes_map, update_tally);\n      }\n      if (environment.tallying.verify_updates) {\n        const my_shares_map = new Map(this.T.shares_map),\n              my_votes_map = new Map(this.T.votes_map),\n              my_approval_scores_map = new Map(this.T.approval_scores_map),\n              my_thresholds_map = new Map(this.T.thresholds_map);\n        this.tally_all();\n        for (const oid of this.T.shares_map.keys()) {\n          /* FIXME: this really sometimes giving inconsistent results!\n          * e.g. when going to abstention, vote is not correctly removed.\n          * it seems that in that case some thresholds are already wrong (too low)\n          */\n          if (this.T.shares_map.get(oid) != my_shares_map.get(oid)) {\n            this.G.L.warn(\"Poll.update_rating produced inconsistent shares:\", [...my_shares_map], [...this.T.shares_map]);\n            console.log([...my_votes_map], [...this.T.votes_map]);\n            console.log([...my_approval_scores_map], [...this.T.approval_scores_map]);\n            console.log([...my_thresholds_map], [...this.T.thresholds_map]);\n            return;\n          }\n        }\n        this.G.L.trace(\"Poll.update_rating produced consistent shares:\", [...my_shares_map], [...this.T.shares_map]);\n      }\n    }\n  }\n\n  private update_proxy_rating_phase2(\n        vid: string, \n        n_changed: boolean, \n        eff_rating_changes_map: Map<string, number>, \n        update_tally=false) {\n    // process the consequences of changing one or more effective ratings of vid\n    this.G.L.entry(\"Poll.update_proxy_rating_phase2\",vid,n_changed,this.T.n_not_abstaining,[...eff_rating_changes_map.entries()]);\n\n    for (const [oid, value] of eff_rating_changes_map) {\n\n      // register change in map and get old eff. rating:\n      var effective_ratings_map = this.effective_ratings_map.get(oid);\n      if (!effective_ratings_map) {\n        effective_ratings_map = new Map();\n        this.effective_ratings_map.set(oid, effective_ratings_map);\n      }\n      const old_value = effective_ratings_map.get(vid) || 0;\n      if (value > 0) {\n        effective_ratings_map.set(vid, value);\n      } else {\n        effective_ratings_map.delete(vid);\n      }\n\n      if (update_tally) {\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 update_tally\");\n        // update ratings_ascending faster than by resorting:\n        const old_effective_ratings_ascending = this.T.effective_ratings_ascending_map.get(oid) || [...effective_ratings_map.values()];\n        var effective_ratings_ascending;\n        if (old_value == 0) {\n          old_effective_ratings_ascending.push(value);\n          // repair ordering:\n          effective_ratings_ascending = old_effective_ratings_ascending.sort((n1,n2)=>n1-n2);      \n        } else {\n          const index = old_effective_ratings_ascending.indexOf(old_value);\n          if (value == 0) {\n            effective_ratings_ascending = old_effective_ratings_ascending.slice(0, index).concat(old_effective_ratings_ascending.slice(index + 1));\n          } else {\n            // replace old value by new:\n            old_effective_ratings_ascending[index] = value;\n            // repair ordering:\n            effective_ratings_ascending = old_effective_ratings_ascending.sort((n1,n2)=>n1-n2);      \n          }\n        }\n        // store result back:\n        this.T.effective_ratings_ascending_map.set(oid, effective_ratings_ascending);\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 ratings_ascending\", effective_ratings_ascending);\n        // update total rating:\n        const total_rating = (this.T.total_effective_ratings_map.get(oid) || 0) + value - old_value;\n        this.T.total_effective_ratings_map.set(oid, total_rating);\n      }\n    }\n\n    if (update_tally) {\n\n      const score_factor = this.T.n_not_abstaining * 128;\n      \n      let others_approvals_changed = false,\n          vids_approvals_changed = false,\n          svg_needs_update = false;\n\n      // update stuff of only the directly affected oids or, if n_changed, all oids:\n      const oids = n_changed ? this.oids : eff_rating_changes_map.keys();\n      for (const oid of oids) {\n        // threshold, approvals:\n        const [threshold, threshold_changed, oid_others_approvals_changed] = this.update_threshold_and_approvals(oid, this.effective_ratings_map.get(oid)||new Map(), this.T.effective_ratings_ascending_map.get(oid)||[]);\n\n        let oid_vids_approvals_changed = false;\n        const approvals_map = this.T.approvals_map.get(oid);\n        if (!threshold_changed) {\n          // update vid's approval since it has not been updated automatically by update_threshold_and_approvals:\n          const approval = (((this.effective_ratings_map.get(oid)||new Map()).get(vid)||0) >= threshold);\n          if (approval != approvals_map.get(vid)) {\n            approvals_map.set(vid, approval);\n            oid_vids_approvals_changed = true;\n          }\n        }\n        if (oid_vids_approvals_changed || oid_others_approvals_changed) {\n          // update approval score:\n          this.G.L.trace(\"Poll.update_proxy_rating_phase2 approvals changed\", oid, oid_vids_approvals_changed, oid_others_approvals_changed);\n          const [approval_score, oid_svg_needs_update] = this.update_approval_score(oid, approvals_map);\n          if (oid_svg_needs_update) {\n            svg_needs_update = true;\n          }\n        }\n        // update score:\n        this.update_score(oid, this.T.approval_scores_map.get(oid), this.T.total_effective_ratings_map.get(oid), score_factor);\n\n        if (oid_others_approvals_changed) {\n          others_approvals_changed = true;\n        }\n        if (oid_vids_approvals_changed) {\n          vids_approvals_changed = true;\n        }\n      }\n\n      // update option ordering:\n      const [oids_descending, ordering_changed] = this.update_ordering();\n      let votes_changed = false;\n      if (ordering_changed || others_approvals_changed) {\n        // update everyone's votes:\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 updating everyone's votes\", ordering_changed);\n        for (const vid2 of this.T.all_vids_set) {\n          if (this.update_vote(vid2, oids_descending)) {\n            votes_changed = true;\n          }          \n        }\n      } else if (vids_approvals_changed) {\n        // update only vid's vote:\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 updating vid's vote\");\n        votes_changed = this.update_vote(vid, oids_descending);\n      } else {\n        // neither the ordering nor the approvals have changed, \n        // so the votes and winning probabilities/shared don't change either\n      }\n      if (votes_changed || n_changed) {\n        // update winning probabilities/shares:\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 updating shares\", votes_changed);\n        const shares_changed = this.update_shares(oids_descending);\n        if (shares_changed) {\n          svg_needs_update = true;\n        }\n      }\n      if (svg_needs_update) {\n        this.G.L.trace(\"Poll.update_proxy_rating_phase2 pie charts need updating\");\n        if (!!this.G.D.page && typeof this.G.D.page['show_stats'] === 'function') {\n          this.G.D.page.show_stats();\n        }\n      }\n    }    \n  }\n\n  update_ratings_ascending(oid: string, eff_rs_map: Map<string, number>): Array<number> {\n    // sort ratings ascending:\n    const eff_rs_asc_non0 = Array.from(eff_rs_map.values()).sort((n1,n2)=>n1-n2) as Array<number>;\n//    this.G.L.trace(\"PollService.update_ratings_ascending\", [...eff_rs_map.entries()], eff_rs_asc_non0, this.T.n_not_abstaining);\n    // make sure array is correct length by padding with zeros:\n    const eff_rs_asc = Array(this.T.n_not_abstaining - eff_rs_asc_non0.length).fill(0).concat(eff_rs_asc_non0);\n    this.T.effective_ratings_ascending_map.set(oid, eff_rs_asc);\n    return eff_rs_asc;\n  }\n\n  update_threshold_and_approvals(oid: string, effective_ratings_map: Map<string, number>, effective_ratings_ascending: Array<number>): [number, boolean, boolean] {\n    this.G.L.entry(\"Poll.update_threshold_and_approvals\", oid, this.T.n_not_abstaining, [...effective_ratings_map], effective_ratings_ascending);\n    // update approval threshold:\n    let threshold = 100;\n    const threshold_factor = 100 / this.T.n_not_abstaining,\n          offset = this.T.n_not_abstaining - effective_ratings_ascending.length; // accounts for potentially missing leading zeros in array\n    for (let index = 0; index < effective_ratings_ascending.length; index++) {\n      const rating = effective_ratings_ascending[index];\n      // check whether strictly less than r percent have a rating strictly less than r:\n      const pct_less_than_r = threshold_factor * (index + offset);\n      if (pct_less_than_r < rating && rating > 0) {\n        threshold = rating;\n        break;\n      }\n    }\n    if (!(this.T.approvals_map.has(oid))) {\n      this.T.approvals_map.set(oid, new Map());\n    }\n    // update approvals:\n    let threshold_changed = false,\n        approvals_changed = false;\n    const approvals_map = this.T.approvals_map.get(oid);\n    if (threshold != this.T.thresholds_map.get(oid)) {\n      // threshold has changed, so update all approvals:\n      this.T.thresholds_map.set(oid, threshold);\n      threshold_changed = true;\n//      this.G.L.trace(\"Poll.update_threshold_and_approvals changed to\", threshold);\n      for (const vid of this.T.all_vids_set) {\n        const rating = effective_ratings_map.get(vid) || 0,\n              approval = (rating >= threshold);\n        if (approval != approvals_map.get(vid)) {\n          approvals_map.set(vid, approval);\n          approvals_changed = true;  \n        }\n      }\n    }\n    return [threshold, threshold_changed, approvals_changed];\n  }\n\n  update_approval_score(oid: string, approval_map: Map<string, boolean>): [number, boolean] {\n    const approval_score = Array.from(approval_map.values()).filter(x => x==true).length;\n    if (approval_score != this.T.approval_scores_map.get(oid)) {\n      this.T.approval_scores_map.set(oid, approval_score);\n      return [approval_score, true];\n    }\n    return [approval_score, false];\n  }\n\n  update_score(oid: string, approval_score: number, total_rating: number, score_factor: number) {\n    // TODO: make the following tie-breaker faster by storing i permanently.\n    // calculate a tiebreaking value between 0 and 1 based on the hash of the option name:\n    const tie_breaker = parseFloat('0.'+parseInt(this.G.D.hash(this.options[oid].name), 16).toString());\n    this.T.scores_map.set(oid, approval_score * score_factor + total_rating + tie_breaker);\n  }\n\n  update_ordering(): [Array<string>, boolean] {\n    const oidsdesc = [...this.T.scores_map]\n          .sort(([oid1, sc1], [oid2, sc2]) => sc2 - sc1)\n          .map(([oid2, sc2]) => oid2);\n    // check whether ordering changed:\n    let ordering_changed = false;\n    for (let index=0; index<oidsdesc.length; index++) {\n      if (oidsdesc[index] != this.T.oids_descending[index]) {\n        ordering_changed = true;\n        this.T.oids_descending = oidsdesc;\n        break;\n      }  \n    }\n    return [oidsdesc, ordering_changed];\n  }\n\n  update_vote(vid: string, oids_descending: Array<string>): boolean {\n    let vote = undefined, vote_changed = false;\n    for (const oid of oids_descending) {\n      if ((this.T.approvals_map.get(oid)||new Map()).get(vid)) {\n        vote = oid;\n        break;\n      }\n    }\n    this.G.L.trace(\"Poll.update_vote\", vid, this.T.votes_map.get(vid), vote);\n    if (vote != this.T.votes_map.get(vid)) {\n      this.T.votes_map.set(vid, vote);\n      vote_changed = true;\n    }\n    return vote_changed;\n  }\n\n  update_shares(oids_descending: Array<string>): boolean {\n    // TODO: this sometimes seems to work incorrectly at the very beginning.\n    let total_n_votes = 0,\n        shares_changed = false;\n    this.T.n_votes_map.set(\"\", 0); \n    for (const oid of oids_descending) {\n      this.T.n_votes_map.set(oid, 0);\n    }\n    for (const vid of this.T.all_vids_set) {\n      const vote = this.T.votes_map.get(vid) || '';\n      this.T.n_votes_map.set(vote, (this.T.n_votes_map.get(vote) || 0) + 1);\n      if (vote != \"\") {\n        total_n_votes++;\n      }\n    }\n    if (total_n_votes > 0) {\n      // shares are proportional to votes received:\n      for (const oid of oids_descending) {\n        const share = (this.T.n_votes_map.get(oid) || 0) / total_n_votes;\n        if (share != this.T.shares_map.get(oid)) {\n          this.G.L.trace(\"PollPage.update_shares\",this.pid, oid, share);\n          this.T.shares_map.set(oid, share);\n          shares_changed = true;\n        }\n      }  \n    } else {\n      // all abstained, so shares are uniform:\n      const k = oids_descending.length;\n      for (const oid of oids_descending) {\n        const share = 1 / k;\n        if (share != this.T.shares_map.get(oid)) {\n          this.G.L.trace(\"PollPage.update_shares\",this.pid, oid, share);\n          this.T.shares_map.set(oid, share);\n          shares_changed = true;\n        }\n      }  \n    }\n    return shares_changed;\n  }\n\n  // CLOSING:\n \n  end_if_past_due(): boolean  {\n    const now = new Date(), \n          due = this.due, \n          past_due = !!due && now > due;\n    this.G.L.entry(\"Poll.end_if_past_due\", this._pid, now, due, past_due, this._state);\n    if (past_due) {\n      if (this._state == \"running\" || (this._state == \"closed\" && !this.has_results)) {\n        this.end();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  end() {\n    this.G.L.entry(\"Poll.end\", this._pid);\n    // 1. disable voting:\n    this.allow_voting = false;\n    // 2. wait some \"grace\" period for potentially ongoing sync to finish \n    // and potential clock discrepancies between local and CouchDB server.\n    window.setTimeout((() => {\n      // 3. set state to final state \"closed\" if no other voter has done so:\n      this.G.L.trace(\"Poll.end setting state to closed\", this._pid);\n      this.state = \"closed\";\n      // 4. wait another grace period for this change to sync:\n      window.setTimeout((() => {\n        // 5. tell poll db sync to stop:\n        this.G.L.trace(\"Poll.end stopping sync\", this._pid);\n        this.G.D.stop_poll_sync(this.pid);\n        this.G.D.wait_for_poll_db(this.pid);\n        // 6. wait another grace period for this stopping to have happened:\n        window.setTimeout((() => {\n          // 7. perform a one-time replication from the remote poll db\n          // to be absolutely sure that all voters have the exact same ratings and delegation data:\n          this.G.L.trace(\"Poll.end replicating a last time\", this._pid);\n          this.G.D.replicate_once(this.pid)\n          .then((() => {\n            // 8. perform a final tally:\n            this.G.L.trace(\"Poll.end tally a last time\", this._pid);\n            this.tally_all();\n            if (this.type == 'winner') {\n              // 9. get the revision number of the remote poll state doc:\n              this.G.L.trace(\"Poll.end getting state doc revision\", this._pid);\n              this.G.D.get_remote_poll_state_doc(this.pid)\n              .then((doc => {\n                // 10. concatenate it with the pid \n                // and turn the result into a random number:\n                this.G.L.trace(\"Poll.end making random number\", this._pid, doc._rev);\n                this.make_final_rand(this.pid + doc._rev);\n                this.make_winner();\n                this.notify_of_end();\n              }).bind(this)); \n            } else {\n              this.notify_of_end();\n            }\n          }).bind(this));\n        }).bind(this), environment.closing.grace_period_3_ms);\n      }).bind(this), environment.closing.grace_period_2_ms);\n    }).bind(this), environment.closing.grace_period_1_ms);\n  }\n\n  make_winner() {\n    /** determine the winner based on oids_descending, shares, and final_rand */\n    if (!!this.final_rand) {\n      this.G.L.entry(\"Poll.make_winner\", this.final_rand, [...this.T.shares_map.entries()]);\n      // sum up the cumulative share of options from top to bottom until it exceeds the random number:\n      var cumshare = 0;\n      for (const oid of this.T.oids_descending) {\n        cumshare += this.T.shares_map.get(oid);\n        if (cumshare >= this.final_rand) {\n          this.G.L.trace(\"Poll.make_winner returning\", this._pid, oid);\n          this.winner = oid;\n          return;\n        }\n      }\n    } \n  }\n\n  notify_of_end() {\n    this.G.L.trace(\"Poll.notify_of_end has_been_notified_of_end\");\n    this.has_results = true;\n    this.have_seen_results = false;\n    if (this.G.S.get_notify_of(\"poll_closed\") && !this.has_been_notified_of_end) {\n      LocalNotifications.schedule({\n        notifications: [{\n          title: this.G.translate.instant('notifications.was-closed-title', {title:this.title}),\n          body: this.G.translate.instant('notifications.was-closed-body', {title:this.title, due:this.due_string}),\n          id: null\n        }]\n      })\n      .then(res => {\n        this.has_been_notified_of_end = true;\n        this.G.L.trace(\"Poll.notify_of_end localNotifications.schedule succeeded:\", res);\n      }).catch(err => {\n        this.G.L.warn(\"Poll.notify_of_end localNotifications.schedule failed:\", err);\n      });  \n    }\n  }\n\n  make_final_rand(base: string) {\n    var total = 0;\n    for (const oid of this.oids) {\n      total += this.T.total_effective_ratings_map.get(oid) || 0;\n    }\n    const str = base + (total%100).toString(),\n          rand = this.G.D.str2rand(str);\n    this.G.L.trace(\"PollService.make_final_rand base total r\", base, total, rand);\n    this.final_rand = rand;\n  }\n\n\n}\n\n\n\nexport class Option {\n\n  private G: GlobalService;\n  private p: Poll;\n\n  constructor (G:GlobalService, poll:Poll, oid:string=null, \n               name:string=null, desc:string=null, url:string=null) { \n    // TODO: ensure uniqueness of name within poll!\n    this.G = G;\n//    this.G.L.entry(\"Option constructor\");\n    this.p = poll;\n    if (!oid) {\n      oid = this.G.P.generate_oid(poll.pid);\n      this.G.D.setp(poll.pid, 'option.'+oid+'.oid', oid);\n      this.G.L.trace(\"...new option\", poll.pid, oid);\n    }\n    this._oid = oid;\n    if ((name||'')!='') this.G.D.setp(poll.pid, 'option.'+oid+'.name', name);\n    if ((desc||'')!='') this.G.D.setp(poll.pid, 'option.'+oid+'.desc', desc);\n    if ((url||'')!='') this.G.D.setp(poll.pid, 'option.'+oid+'.url', url);\n    poll._add_option(this);\n//    this.G.L.exit(\"Option constructor\");\n  }\n\n  delete() {\n    this.p.remove_option(this.oid);\n    this.G.D.delp(this.p.pid, 'option.'+this.oid+'.name');\n    this.G.D.delp(this.p.pid, 'option.'+this.oid+'.desc');\n    this.G.D.delp(this.p.pid, 'option.'+this.oid+'.url');\n  }\n\n  private _oid: string;\n  get oid(): string { return this._oid; }\n  // oid is read-only, set at construction\n\n  // all attributes are stored in the poll's database under keys of the form option.<oid>.<key>.\n  // they may only be set at construction or changed while poll is in state 'draft':\n\n  get name(): string { return this.G.D.getp(this.p.pid, 'option.'+this._oid+'.name'); }\n  set name(value: string) { this.G.D.setp(this.p.pid, 'option.'+this._oid+'.name', value); }\n\n  get desc(): string { return this.G.D.getp(this.p.pid, 'option.'+this._oid+'.desc'); }\n  set desc(value: string) { this.G.D.setp(this.p.pid, 'option.'+this._oid+'.desc', value); }\n\n  get url(): string { return this.G.D.getp(this.p.pid, 'option.'+this._oid+'.url'); }\n  set url(value: string) { this.G.D.setp(this.p.pid, 'option.'+this._oid+'.url', value); }\n\n}","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nexport const environment = {\n  LEAVE_THIS_AS_THE_FIRST_ENTRY: true,\n  // Important: leave the previous line exactly as it is!\n  production: true,\n  imprint_url: \"./assets/impressum.html\",\n  privacy_statement_url: \"./assets/privacy.html\",\n  privacy_statement_headline: \"Formal Privacy Policy and Terms of Use\",\n  logging: {\n    logLevels: [\n      {\n        loggerName: \"root\",\n        logLevel: \"ERROR\"\n      },\n    ]  \n  },\n  show_debug_info: false, // must be false in production!\n  data_service: {\n    central_db_server_url: \"https://sandstorm.pik-potsdam.de/couch/\",\n    central_db_password: \"none\",\n    allow_other_servers: false,\n    hash_n_bytes: 32,\n    pid_length: 8,\n    pwd_length: 16,\n    oid_length: 4,\n    vid_length: 8,\n    did_length: 8,\n    nid_length: 4,\n//  if a backdoor for law enforcement into the end-to-end encrypted data is required, uncomment:\n//    backdoor_public_key: \"ea17226c631a8a78c67626136d91980e82328b72e6b536c7df7e68fbb22c2aa7\",\n  },\n  delegation: {\n    enabled: false,\n    max_weight: 10\n  },\n  db_put_retry_delay_ms: 100,\n  default_lang: \"en\",\n  github_url: \"https://github.com/pik-gane/vodle\",\n  magic_link_base_url: \"https://sandstorm.pik-potsdam.de/#/\",\n  support_vodle_url: \"http://vodle.it/#support\",\n  tallying: {\n    verify_updates: false\n  },\n  closing: {\n    grace_period_1_ms: 3000,\n    grace_period_2_ms: 3000,\n    grace_period_3_ms: 3000\n  },\n  max_len: {\n    title: 200,\n    name: 100,\n    desc: 1000,\n    url: 200\n  },\n  polls: {\n    max_duration_days: 31,\n    delete_after_days: 31\n  },\n  // Important: leave the next line exactly as it is!\n  LEAVE_THIS_AS_THE_LAST_ENTRY: true\n};\n","<!--\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n-->\n\n<ion-app>\n  <ion-split-pane contentId=\"main\">\n    <ion-menu contentId=\"main\">\n      <ion-header>\n        <ion-toolbar>\n          <ion-title>\n            <a href=\"http://www.vodle.it\"><img src=\"./assets/topleft_icon.svg\" height=\"40px\" alt=\"vodle\"></a>\n          </ion-title>\n        </ion-toolbar>\n      </ion-header>\n      <ion-content>\n        <ion-list>\n          <ion-menu-toggle auto-hide=\"false\" *ngFor=\"let p of appPages\">\n            <ion-item [routerDirection]=\"'root'\" [routerLink]=\"[p.url]\">\n              <ion-icon slot=\"start\" [name]=\"p.icon\"></ion-icon>\n              <ion-label>\n                {{p.title|translate}}\n              </ion-label>\n            </ion-item>\n          </ion-menu-toggle>\n        </ion-list>\n      </ion-content>\n    </ion-menu>\n    <ion-router-outlet id=\"main\"></ion-router-outlet>\n  </ion-split-pane>\n</ion-app>\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Component, Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  appPages = [\n    {\n      title: 'mypolls.-page-title',\n      url: '/mypolls',\n      icon: 'home'\n    },\n    {\n      title: 'settings.-page-title',\n      url: '/settings',\n      icon: 'settings'\n    },\n    {\n      title: 'help.-page-title',\n      url: '/help',\n      icon: 'help-circle'\n    },\n    {\n      title: 'about.-page-title',\n      url: '/about',\n      icon: 'information-circle-outline'\n    },\n    {\n      title: 'privacy.-page-title',\n      url: '/privacy',\n      icon: 'shield-checkmark-outline'\n    },\n    {\n      title: 'imprint.-page-title',\n      url: '/imprint',\n      icon: 'at-outline'\n    },\n    {\n      title: 'delete-all.-page-title',\n      url: '/delete-all',\n      icon: 'trash-outline'\n    },\n    {\n      title: 'logout.-page-title',\n      url: '/logout',\n      icon: 'log-out'\n    }\n  ];\n\n\n  constructor(\n      translate: TranslateService,\n      @Inject(DOCUMENT) private document: Document\n      ) {\n    console.log(\"APP CONSTRUCTOR\");\n    translate.addLangs(['de','en','es','ko','pl']);\n\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n//    translate.setDefaultLang('nn'); // uncomment to produce translate key screenshots\n\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\n    const preferred_lang = navigator.language.slice(0,2),\n          used_lang = translate.langs.includes(preferred_lang)?preferred_lang:'en';\n    translate.use(used_lang);\n    this.document.documentElement.lang = used_lang; \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/mypolls',\n    pathMatch: 'full'\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then( m => m.AboutPageModule)\n  },\n  {\n    path: 'delrespond/:pid/:did/:from/:private_key',\n    loadChildren: () => import('./delrespond/delrespond.module').then( m => m.DelrespondPageModule)\n  },\n  {\n    path: 'draftpoll',\n    loadChildren: () => import('./draftpoll/draftpoll.module').then( m => m.DraftpollPageModule)\n  },\n  {\n    path: 'draftpoll/:pid',\n    loadChildren: () => import('./draftpoll/draftpoll.module').then( m => m.DraftpollPageModule)\n  },\n  {\n    path: 'draftpoll/use/:pd',\n    loadChildren: () => import('./draftpoll/draftpoll.module').then( m => m.DraftpollPageModule)\n  },\n  {\n    path: 'draftpoll-kebap',\n    loadChildren: () => import('./draftpoll-kebap/draftpoll-kebap.module').then( m => m.DraftpollKebapPageModule)\n  },\n  {\n    path: 'help',\n    loadChildren: () => import('./help/help.module').then( m => m.HelpPageModule)\n  },\n  {\n    path: 'inviteto/:pid',\n    loadChildren: () => import('./inviteto/inviteto.module').then( m => m.InvitetoPageModule)\n  },\n  {\n    path: 'joinpoll/:db_server_url/:db_password/:pid/:poll_password',\n    loadChildren: () => import('./joinpoll/joinpoll.module').then( m => m.JoinpollPageModule)\n  },\n  {\n    path: 'mypolls',\n    loadChildren: () => import('./mypolls/mypolls.module').then( m => m.MypollsPageModule)\n  },\n  {\n    path: 'poll/:pid',\n    loadChildren: () => import('./poll/poll.module').then( m => m.PollPageModule)\n  },\n  {\n    path: 'p/:pid',\n    loadChildren: () => import('./poll/poll.module').then( m => m.PollPageModule)\n  },\n  {\n    path: 'settings',\n    loadChildren: () => import('./settings/settings.module').then( m => m.SettingsPageModule)\n  },\n  {\n    path: 'previewpoll/:pid',\n    loadChildren: () => import('./previewpoll/previewpoll.module').then( m => m.PreviewpollPageModule)\n  },\n  {\n    path: 'login',\n    loadChildren: () => import('./login/login.module').then( m => m.LoginPageModule)\n  },\n  {\n    path: 'login/:step',\n    loadChildren: () => import('./login/login.module').then( m => m.LoginPageModule)\n  },\n  {\n    path: 'login/:step/:then',\n    loadChildren: () => import('./login/login.module').then( m => m.LoginPageModule)\n  },\n  {\n    path: 'configure-server',\n    loadChildren: () => import('./configure-server/configure-server.module').then( m => m.ConfigureServerPageModule)\n  },\n  {\n    path: 'logout',\n    loadChildren: () => import('./logout/logout.module').then( m => m.LogoutPageModule)\n  },\n  {\n    path: 'delegation-dialog',\n    loadChildren: () => import('./delegation-dialog/delegation-dialog.module').then( m => m.DelegationDialogPageModule)\n  },\n  {\n    path: 'addoption-dialog',\n    loadChildren: () => import('./addoption-dialog/addoption-dialog.module').then( m => m.AddoptionDialogPageModule)\n  },\n  {\n    path: 'explain-approval',\n    loadChildren: () => import('./explain-approval/explain-approval.module').then( m => m.ExplainApprovalPageModule)\n  },\n  {\n    path: 'privacy',\n    loadChildren: () => import('./privacy/privacy.module').then( m => m.PrivacyPageModule)\n  },\n  {\n    path: 'imprint',\n    loadChildren: () => import('./imprint/imprint.module').then( m => m.ImprintPageModule)\n  },\n  {\n    path: 'delete-all',\n    loadChildren: () => import('./delete-all/delete-all.module').then( m => m.DeleteAllPageModule)\n  },\n  {\n    path: '*',\n    redirectTo: '/mypolls'\n  },\n  {\n    path: 'assist',\n    loadChildren: () => import('./assist/assist.module').then( m => m.AssistPageModule)\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nimport { LoggingServiceModule, LoggingService, LoggingServiceConfiguration } from 'ionic-logging-service';\nimport { IonicStorageModule } from '@ionic/storage-angular';\n\nimport { environment } from '../environments/environment';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GlobalService } from './global.service';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => {\n    console.log(\"VODLE configuring logger with \"+JSON.stringify(environment.logging));\n    loggingService.configure(environment.logging as LoggingServiceConfiguration);\n  }\n}\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        LoggingServiceModule,\n        BrowserModule,\n        IonicModule.forRoot(),\n        IonicStorageModule.forRoot(),\n        AppRoutingModule,\n        HttpClientModule,\n        TranslateModule.forRoot({\n            defaultLanguage: 'en',\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [HttpClient]\n            }\n        }),\n    ],\n    providers: [\n        { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n        GlobalService,\n        {\n            deps: [LoggingService],\n            multi: true,\n            provide: APP_INITIALIZER,\n            useFactory: configureLogging\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","/*\n(C) Copyright 2015–2022 Potsdam Institute for Climate Impact Research (PIK), authors, and contributors, see AUTHORS file.\n\nThis file is part of vodle.\n\nvodle is free software: you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free \nSoftware Foundation, either version 3 of the License, or (at your option) \nany later version.\n\nvodle is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR \nA PARTICULAR PURPOSE. See the GNU Affero General Public License for more \ndetails.\n\nYou should have received a copy of the GNU Affero General Public License \nalong with vodle. If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","var map = {\n\t\"./ion-accordion_2.entry.js\": [\n\t\t79,\n\t\t8592,\n\t\t79\n\t],\n\t\"./ion-action-sheet.entry.js\": [\n\t\t5593,\n\t\t8592,\n\t\t5593\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t3225,\n\t\t8592,\n\t\t3225\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t4812,\n\t\t8592,\n\t\t4017\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t6655,\n\t\t6655\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t4856,\n\t\t8592,\n\t\t4856\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t3059,\n\t\t3059\n\t],\n\t\"./ion-breadcrumb_2.entry.js\": [\n\t\t8648,\n\t\t8592,\n\t\t8648\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t8308,\n\t\t8308\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t4690,\n\t\t4690\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t4090,\n\t\t4090\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t6214,\n\t\t6214\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t9447,\n\t\t9447\n\t],\n\t\"./ion-datetime-button.entry.js\": [\n\t\t7950,\n\t\t5523,\n\t\t7950\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t9689,\n\t\t5523,\n\t\t8592,\n\t\t9689\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t8840,\n\t\t8592,\n\t\t8840\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t749,\n\t\t749\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t9667,\n\t\t8592,\n\t\t9544\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t3288,\n\t\t3288\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t5473,\n\t\t8592,\n\t\t6108\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t3634,\n\t\t8592,\n\t\t3634\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t2855,\n\t\t8592,\n\t\t2855\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t495,\n\t\t8592,\n\t\t495\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t8737,\n\t\t8592,\n\t\t8737\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t9632,\n\t\t8592,\n\t\t9632\n\t],\n\t\"./ion-picker-column-internal.entry.js\": [\n\t\t4446,\n\t\t8592,\n\t\t4446\n\t],\n\t\"./ion-picker-internal.entry.js\": [\n\t\t2275,\n\t\t2275\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t8050,\n\t\t8592,\n\t\t8050\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t8994,\n\t\t8994\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t3592,\n\t\t3592\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t5454,\n\t\t8592,\n\t\t5454\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t290,\n\t\t8592,\n\t\t4210\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t2666,\n\t\t8592,\n\t\t8718\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t4816,\n\t\t4816\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t5534,\n\t\t5534\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t4902,\n\t\t8592,\n\t\t4902\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t1938,\n\t\t8592,\n\t\t1938\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t8179,\n\t\t8179\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t668,\n\t\t668\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t1624,\n\t\t8592,\n\t\t1624\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t9989,\n\t\t9989\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t8902,\n\t\t8592,\n\t\t8902\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t199,\n\t\t8592,\n\t\t199\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t8395,\n\t\t8395\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t6357,\n\t\t6357\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t8268,\n\t\t8592,\n\t\t8268\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t5269,\n\t\t8592,\n\t\t5269\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t2875,\n\t\t2875\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 863;\nmodule.exports = webpackAsyncContext;"],"x_google_ignoreList":[12]}